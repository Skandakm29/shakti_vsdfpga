//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Wed Apr  2 00:04:18 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// rx_stage1_operands_deq_ena     O     1
// rx_stage1_meta_deq_ena         O     1
// rx_stage1_control_deq_ena      O     1
// tx_stage3_common_enq_ena       O     1
// tx_stage3_common_enq_data      O    38
// tx_stage3_type_enq_ena         O     1
// tx_stage3_type_enq_data        O    51
// rx_stage1_dump_deq_ena         O     1
// tx_stage3_dump_enq_ena         O     1
// tx_stage3_dump_enq_data        O    64
// memory_request_get             O    70 reg
// RDY_memory_request_get         O     1 reg
// RDY_operand_fwding_put         O     1 const
// RDY_ma_update_wEpoch           O     1 const
// RDY_ma_csr_misa_c              O     1 const
// mv_redirection_fst             O    32
// RDY_mv_redirection_fst         O     1 const
// mv_redirection_snd             O     1
// RDY_mv_redirection_snd         O     1 const
// mv_event_jumps                 O     1
// RDY_mv_event_jumps             O     1 const
// mv_event_branch_taken          O     1
// RDY_mv_event_branch_taken      O     1 const
// mv_event_branch_nottaken       O     1
// RDY_mv_event_branch_nottaken   O     1 const
// mv_event_muldiv                O     1 const
// RDY_mv_event_muldiv            O     1 const
// mv_event_csr_ops               O     1
// RDY_mv_event_csr_ops           O     1 const
// mv_event_raw_stalls            O     1
// RDY_mv_event_raw_stalls        O     1 const
// mv_event_redirection           O     1
// RDY_mv_event_redirection       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_stage1_operands_notEmpty_b  I     1 unused
// rx_stage1_operands_first_deq_rdy_b  I     1
// rx_stage1_operands_first_x     I    64
// rx_stage1_meta_notEmpty_b      I     1 unused
// rx_stage1_meta_first_deq_rdy_b  I     1
// rx_stage1_meta_first_x         I    62
// rx_stage1_control_notEmpty_b   I     1 unused
// rx_stage1_control_first_deq_rdy_b  I     1
// rx_stage1_control_first_x      I    34
// tx_stage3_common_notFull_b     I     1 unused
// tx_stage3_common_enq_rdy_b     I     1
// tx_stage3_type_notFull_b       I     1 unused
// tx_stage3_type_enq_rdy_b       I     1
// rx_stage1_dump_notEmpty_b      I     1 unused
// rx_stage1_dump_first_deq_rdy_b  I     1
// rx_stage1_dump_first_x         I    64
// tx_stage3_dump_notFull_b       I     1 unused
// tx_stage3_dump_enq_rdy_b       I     1
// operand_fwding_put             I    38
// ma_csr_misa_c_c                I     1
// ma_trigger_data1_t             I    40
// ma_trigger_data2_t             I    64
// ma_trigger_enable_t            I     2
// EN_operand_fwding_put          I     1
// EN_ma_update_wEpoch            I     1
// EN_ma_csr_misa_c               I     1
// EN_memory_request_get          I     1
//
// Combinational paths from inputs to outputs:
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_operands_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_meta_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_control_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_common_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_common_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_type_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_type_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_dump_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_dump_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    rx_stage1_dump_first_x,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_dump_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_redirection_fst
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_redirection_snd
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_jumps
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_branch_taken
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_branch_nottaken
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_csr_ops
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_raw_stalls
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_redirection
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_stage1_operands_notEmpty_b,

		rx_stage1_operands_first_deq_rdy_b,

		rx_stage1_operands_first_x,

		rx_stage1_operands_deq_ena,

		rx_stage1_meta_notEmpty_b,

		rx_stage1_meta_first_deq_rdy_b,

		rx_stage1_meta_first_x,

		rx_stage1_meta_deq_ena,

		rx_stage1_control_notEmpty_b,

		rx_stage1_control_first_deq_rdy_b,

		rx_stage1_control_first_x,

		rx_stage1_control_deq_ena,

		tx_stage3_common_notFull_b,

		tx_stage3_common_enq_rdy_b,

		tx_stage3_common_enq_ena,

		tx_stage3_common_enq_data,

		tx_stage3_type_notFull_b,

		tx_stage3_type_enq_rdy_b,

		tx_stage3_type_enq_ena,

		tx_stage3_type_enq_data,

		rx_stage1_dump_notEmpty_b,

		rx_stage1_dump_first_deq_rdy_b,

		rx_stage1_dump_first_x,

		rx_stage1_dump_deq_ena,

		tx_stage3_dump_notFull_b,

		tx_stage3_dump_enq_rdy_b,

		tx_stage3_dump_enq_ena,

		tx_stage3_dump_enq_data,

		EN_memory_request_get,
		memory_request_get,
		RDY_memory_request_get,

		operand_fwding_put,
		EN_operand_fwding_put,
		RDY_operand_fwding_put,

		EN_ma_update_wEpoch,
		RDY_ma_update_wEpoch,

		ma_csr_misa_c_c,
		EN_ma_csr_misa_c,
		RDY_ma_csr_misa_c,

		ma_trigger_data1_t,

		ma_trigger_data2_t,

		ma_trigger_enable_t,

		mv_redirection_fst,
		RDY_mv_redirection_fst,

		mv_redirection_snd,
		RDY_mv_redirection_snd,

		mv_event_jumps,
		RDY_mv_event_jumps,

		mv_event_branch_taken,
		RDY_mv_event_branch_taken,

		mv_event_branch_nottaken,
		RDY_mv_event_branch_nottaken,

		mv_event_muldiv,
		RDY_mv_event_muldiv,

		mv_event_csr_ops,
		RDY_mv_event_csr_ops,

		mv_event_raw_stalls,
		RDY_mv_event_raw_stalls,

		mv_event_redirection,
		RDY_mv_event_redirection);
  input  CLK;
  input  RST_N;

  // action method rx_stage1_operands_notEmpty
  input  rx_stage1_operands_notEmpty_b;

  // action method rx_stage1_operands_first_deq_rdy
  input  rx_stage1_operands_first_deq_rdy_b;

  // action method rx_stage1_operands_first
  input  [63 : 0] rx_stage1_operands_first_x;

  // value method rx_stage1_operands_deq_ena
  output rx_stage1_operands_deq_ena;

  // action method rx_stage1_meta_notEmpty
  input  rx_stage1_meta_notEmpty_b;

  // action method rx_stage1_meta_first_deq_rdy
  input  rx_stage1_meta_first_deq_rdy_b;

  // action method rx_stage1_meta_first
  input  [61 : 0] rx_stage1_meta_first_x;

  // value method rx_stage1_meta_deq_ena
  output rx_stage1_meta_deq_ena;

  // action method rx_stage1_control_notEmpty
  input  rx_stage1_control_notEmpty_b;

  // action method rx_stage1_control_first_deq_rdy
  input  rx_stage1_control_first_deq_rdy_b;

  // action method rx_stage1_control_first
  input  [33 : 0] rx_stage1_control_first_x;

  // value method rx_stage1_control_deq_ena
  output rx_stage1_control_deq_ena;

  // action method tx_stage3_common_notFull
  input  tx_stage3_common_notFull_b;

  // action method tx_stage3_common_enq_rdy
  input  tx_stage3_common_enq_rdy_b;

  // value method tx_stage3_common_enq_ena
  output tx_stage3_common_enq_ena;

  // value method tx_stage3_common_enq_data
  output [37 : 0] tx_stage3_common_enq_data;

  // action method tx_stage3_type_notFull
  input  tx_stage3_type_notFull_b;

  // action method tx_stage3_type_enq_rdy
  input  tx_stage3_type_enq_rdy_b;

  // value method tx_stage3_type_enq_ena
  output tx_stage3_type_enq_ena;

  // value method tx_stage3_type_enq_data
  output [50 : 0] tx_stage3_type_enq_data;

  // action method rx_stage1_dump_notEmpty
  input  rx_stage1_dump_notEmpty_b;

  // action method rx_stage1_dump_first_deq_rdy
  input  rx_stage1_dump_first_deq_rdy_b;

  // action method rx_stage1_dump_first
  input  [63 : 0] rx_stage1_dump_first_x;

  // value method rx_stage1_dump_deq_ena
  output rx_stage1_dump_deq_ena;

  // action method tx_stage3_dump_notFull
  input  tx_stage3_dump_notFull_b;

  // action method tx_stage3_dump_enq_rdy
  input  tx_stage3_dump_enq_rdy_b;

  // value method tx_stage3_dump_enq_ena
  output tx_stage3_dump_enq_ena;

  // value method tx_stage3_dump_enq_data
  output [63 : 0] tx_stage3_dump_enq_data;

  // actionvalue method memory_request_get
  input  EN_memory_request_get;
  output [69 : 0] memory_request_get;
  output RDY_memory_request_get;

  // action method operand_fwding_put
  input  [37 : 0] operand_fwding_put;
  input  EN_operand_fwding_put;
  output RDY_operand_fwding_put;

  // action method ma_update_wEpoch
  input  EN_ma_update_wEpoch;
  output RDY_ma_update_wEpoch;

  // action method ma_csr_misa_c
  input  ma_csr_misa_c_c;
  input  EN_ma_csr_misa_c;
  output RDY_ma_csr_misa_c;

  // action method ma_trigger_data1
  input  [39 : 0] ma_trigger_data1_t;

  // action method ma_trigger_data2
  input  [63 : 0] ma_trigger_data2_t;

  // action method ma_trigger_enable
  input  [1 : 0] ma_trigger_enable_t;

  // value method mv_redirection_fst
  output [31 : 0] mv_redirection_fst;
  output RDY_mv_redirection_fst;

  // value method mv_redirection_snd
  output mv_redirection_snd;
  output RDY_mv_redirection_snd;

  // value method mv_event_jumps
  output mv_event_jumps;
  output RDY_mv_event_jumps;

  // value method mv_event_branch_taken
  output mv_event_branch_taken;
  output RDY_mv_event_branch_taken;

  // value method mv_event_branch_nottaken
  output mv_event_branch_nottaken;
  output RDY_mv_event_branch_nottaken;

  // value method mv_event_muldiv
  output mv_event_muldiv;
  output RDY_mv_event_muldiv;

  // value method mv_event_csr_ops
  output mv_event_csr_ops;
  output RDY_mv_event_csr_ops;

  // value method mv_event_raw_stalls
  output mv_event_raw_stalls;
  output RDY_mv_event_raw_stalls;

  // value method mv_event_redirection
  output mv_event_redirection;
  output RDY_mv_event_redirection;

  // signals for module outputs
  wire [69 : 0] memory_request_get;
  wire [63 : 0] tx_stage3_dump_enq_data;
  wire [50 : 0] tx_stage3_type_enq_data;
  wire [37 : 0] tx_stage3_common_enq_data;
  wire [31 : 0] mv_redirection_fst;
  wire RDY_ma_csr_misa_c,
       RDY_ma_update_wEpoch,
       RDY_memory_request_get,
       RDY_mv_event_branch_nottaken,
       RDY_mv_event_branch_taken,
       RDY_mv_event_csr_ops,
       RDY_mv_event_jumps,
       RDY_mv_event_muldiv,
       RDY_mv_event_raw_stalls,
       RDY_mv_event_redirection,
       RDY_mv_redirection_fst,
       RDY_mv_redirection_snd,
       RDY_operand_fwding_put,
       mv_event_branch_nottaken,
       mv_event_branch_taken,
       mv_event_csr_ops,
       mv_event_jumps,
       mv_event_muldiv,
       mv_event_raw_stalls,
       mv_event_redirection,
       mv_redirection_snd,
       rx_stage1_control_deq_ena,
       rx_stage1_dump_deq_ena,
       rx_stage1_meta_deq_ena,
       rx_stage1_operands_deq_ena,
       tx_stage3_common_enq_ena,
       tx_stage3_dump_enq_ena,
       tx_stage3_type_enq_ena;

  // inlined wires
  wire [32 : 0] wr_redirection_wget;
  wire ff_stage1_operands_w_ena_whas,
       ff_stage3_common_w_ena_whas,
       wr_event_raw_stalls_whas;

  // register rg_eEpoch
  reg rg_eEpoch;
  wire rg_eEpoch_D_IN, rg_eEpoch_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule alu
  reg [31 : 0] alu_inputs_op3;
  wire [73 : 0] alu_inputs;
  wire [63 : 0] alu_inputs_tdata2;
  wire [39 : 0] alu_inputs_tdata1;
  wire [31 : 0] alu_inputs_imm_value, alu_inputs_op1, alu_inputs_op2;
  wire [3 : 0] alu_inputs_fn;
  wire [2 : 0] alu_inputs_funct3, alu_inputs_inst_type;
  wire [1 : 0] alu_inputs_lpc, alu_inputs_memaccess, alu_inputs_tenable;
  wire alu_EN_inputs, alu_inputs_misa_c;

  // ports of submodule ff_memory_request
  wire [69 : 0] ff_memory_request_D_IN, ff_memory_request_D_OUT;
  wire ff_memory_request_CLR,
       ff_memory_request_DEQ,
       ff_memory_request_EMPTY_N,
       ff_memory_request_ENQ,
       ff_memory_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fetch_execute_pass,
       CAN_FIRE_ma_csr_misa_c,
       CAN_FIRE_ma_trigger_data1,
       CAN_FIRE_ma_trigger_data2,
       CAN_FIRE_ma_trigger_enable,
       CAN_FIRE_ma_update_wEpoch,
       CAN_FIRE_memory_request_get,
       CAN_FIRE_operand_fwding_put,
       CAN_FIRE_rx_stage1_control_first,
       CAN_FIRE_rx_stage1_control_first_deq_rdy,
       CAN_FIRE_rx_stage1_control_notEmpty,
       CAN_FIRE_rx_stage1_dump_first,
       CAN_FIRE_rx_stage1_dump_first_deq_rdy,
       CAN_FIRE_rx_stage1_dump_notEmpty,
       CAN_FIRE_rx_stage1_meta_first,
       CAN_FIRE_rx_stage1_meta_first_deq_rdy,
       CAN_FIRE_rx_stage1_meta_notEmpty,
       CAN_FIRE_rx_stage1_operands_first,
       CAN_FIRE_rx_stage1_operands_first_deq_rdy,
       CAN_FIRE_rx_stage1_operands_notEmpty,
       CAN_FIRE_tx_stage3_common_enq_rdy,
       CAN_FIRE_tx_stage3_common_notFull,
       CAN_FIRE_tx_stage3_dump_enq_rdy,
       CAN_FIRE_tx_stage3_dump_notFull,
       CAN_FIRE_tx_stage3_type_enq_rdy,
       CAN_FIRE_tx_stage3_type_notFull,
       WILL_FIRE_RL_fetch_execute_pass,
       WILL_FIRE_ma_csr_misa_c,
       WILL_FIRE_ma_trigger_data1,
       WILL_FIRE_ma_trigger_data2,
       WILL_FIRE_ma_trigger_enable,
       WILL_FIRE_ma_update_wEpoch,
       WILL_FIRE_memory_request_get,
       WILL_FIRE_operand_fwding_put,
       WILL_FIRE_rx_stage1_control_first,
       WILL_FIRE_rx_stage1_control_first_deq_rdy,
       WILL_FIRE_rx_stage1_control_notEmpty,
       WILL_FIRE_rx_stage1_dump_first,
       WILL_FIRE_rx_stage1_dump_first_deq_rdy,
       WILL_FIRE_rx_stage1_dump_notEmpty,
       WILL_FIRE_rx_stage1_meta_first,
       WILL_FIRE_rx_stage1_meta_first_deq_rdy,
       WILL_FIRE_rx_stage1_meta_notEmpty,
       WILL_FIRE_rx_stage1_operands_first,
       WILL_FIRE_rx_stage1_operands_first_deq_rdy,
       WILL_FIRE_rx_stage1_operands_notEmpty,
       WILL_FIRE_tx_stage3_common_enq_rdy,
       WILL_FIRE_tx_stage3_common_notFull,
       WILL_FIRE_tx_stage3_dump_enq_rdy,
       WILL_FIRE_tx_stage3_dump_notFull,
       WILL_FIRE_tx_stage3_type_enq_rdy,
       WILL_FIRE_tx_stage3_type_notFull;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d30;
  reg TASK_testplusargs___d31;
  reg TASK_testplusargs___d32;
  reg [63 : 0] v__h3585;
  reg TASK_testplusargs___d42;
  reg TASK_testplusargs___d43;
  reg TASK_testplusargs___d44;
  reg [63 : 0] v__h3795;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg TASK_testplusargs___d56;
  reg [63 : 0] v__h4007;
  reg TASK_testplusargs___d123;
  reg TASK_testplusargs___d124;
  reg TASK_testplusargs___d125;
  reg [63 : 0] v__h4400;
  reg TASK_testplusargs___d135;
  reg TASK_testplusargs___d136;
  reg TASK_testplusargs___d137;
  reg [63 : 0] v__h4604;
  reg TASK_testplusargs___d166;
  reg TASK_testplusargs___d167;
  reg TASK_testplusargs___d168;
  reg [63 : 0] v__h4829;
  reg TASK_testplusargs___d178;
  reg TASK_testplusargs___d179;
  reg TASK_testplusargs___d180;
  reg [63 : 0] v__h5039;
  reg TASK_testplusargs___d231;
  reg TASK_testplusargs___d232;
  reg TASK_testplusargs___d233;
  reg [63 : 0] v__h7428;
  reg TASK_testplusargs___d311;
  reg TASK_testplusargs___d312;
  reg TASK_testplusargs___d313;
  reg [63 : 0] v__h7728;
  reg TASK_testplusargs___d337;
  reg TASK_testplusargs___d338;
  reg TASK_testplusargs___d339;
  reg [63 : 0] v__h10103;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d112;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d144;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d146;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d150;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d153;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d156;
  reg TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d165;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d239;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d241;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d244;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d246;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d248;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d254;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d259;
  reg TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d261;
  reg NOT_IF_ff_stage1_control_w_data_whas__72_THEN__ETC___d316;
  // synopsys translate_on

  // remaining internal signals
  reg [48 : 0] IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302;
  reg [31 : 0] _op2__h3509;
  reg [1 : 0] CASE_aluinputs_BITS_72_TO_71_0_aluinputs_BIT_ETC__q4;
  wire [31 : 0] op1__h3506,
		op2__h3507,
		rd__h5106,
		rx_stage1_control_first_x_BITS_31_TO_0__q3,
		rx_stage1_meta_first_x_BITS_38_TO_7__q2,
		s3system_rs1_imm__h8305;
  wire [6 : 0] rx_stage1_meta_first_x_BITS_6_TO_0__q1;
  wire [4 : 0] rdaddr__h5105;
  wire [1 : 0] curr_epoch__h1789;
  wire IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265,
       IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d188,
       IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d190,
       NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197,
       v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21,
       x_wget__h3048,
       x_wget__h3118,
       x_wget__h3188,
       x_wget__h3328;

  // action method rx_stage1_operands_notEmpty
  assign CAN_FIRE_rx_stage1_operands_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_notEmpty = 1'd1 ;

  // action method rx_stage1_operands_first_deq_rdy
  assign CAN_FIRE_rx_stage1_operands_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_operands_first
  assign CAN_FIRE_rx_stage1_operands_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_first = 1'd1 ;

  // value method rx_stage1_operands_deq_ena
  assign rx_stage1_operands_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method rx_stage1_meta_notEmpty
  assign CAN_FIRE_rx_stage1_meta_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_notEmpty = 1'd1 ;

  // action method rx_stage1_meta_first_deq_rdy
  assign CAN_FIRE_rx_stage1_meta_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_meta_first
  assign CAN_FIRE_rx_stage1_meta_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_first = 1'd1 ;

  // value method rx_stage1_meta_deq_ena
  assign rx_stage1_meta_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method rx_stage1_control_notEmpty
  assign CAN_FIRE_rx_stage1_control_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_notEmpty = 1'd1 ;

  // action method rx_stage1_control_first_deq_rdy
  assign CAN_FIRE_rx_stage1_control_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_control_first
  assign CAN_FIRE_rx_stage1_control_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_first = 1'd1 ;

  // value method rx_stage1_control_deq_ena
  assign rx_stage1_control_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method tx_stage3_common_notFull
  assign CAN_FIRE_tx_stage3_common_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_common_notFull = 1'd1 ;

  // action method tx_stage3_common_enq_rdy
  assign CAN_FIRE_tx_stage3_common_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_common_enq_rdy = 1'd1 ;

  // value method tx_stage3_common_enq_ena
  assign tx_stage3_common_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_common_enq_data
  assign tx_stage3_common_enq_data =
	     { rx_stage1_control_first_x[31:0],
	       rx_stage1_meta_first_x[51:47],
	       rg_wEpoch } ;

  // action method tx_stage3_type_notFull
  assign CAN_FIRE_tx_stage3_type_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_type_notFull = 1'd1 ;

  // action method tx_stage3_type_enq_rdy
  assign CAN_FIRE_tx_stage3_type_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_type_enq_rdy = 1'd1 ;

  // value method tx_stage3_type_enq_ena
  assign tx_stage3_type_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_type_enq_data
  assign tx_stage3_type_enq_data =
	     { CASE_aluinputs_BITS_72_TO_71_0_aluinputs_BIT_ETC__q4,
	       IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302 } ;

  // action method rx_stage1_dump_notEmpty
  assign CAN_FIRE_rx_stage1_dump_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_notEmpty = 1'd1 ;

  // action method rx_stage1_dump_first_deq_rdy
  assign CAN_FIRE_rx_stage1_dump_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_dump_first
  assign CAN_FIRE_rx_stage1_dump_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_first = 1'd1 ;

  // value method rx_stage1_dump_deq_ena
  assign rx_stage1_dump_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method tx_stage3_dump_notFull
  assign CAN_FIRE_tx_stage3_dump_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_dump_notFull = 1'd1 ;

  // action method tx_stage3_dump_enq_rdy
  assign CAN_FIRE_tx_stage3_dump_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_dump_enq_rdy = 1'd1 ;

  // value method tx_stage3_dump_enq_ena
  assign tx_stage3_dump_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_dump_enq_data
  assign tx_stage3_dump_enq_data = rx_stage1_dump_first_x ;

  // actionvalue method memory_request_get
  assign memory_request_get = ff_memory_request_D_OUT ;
  assign RDY_memory_request_get = ff_memory_request_EMPTY_N ;
  assign CAN_FIRE_memory_request_get = ff_memory_request_EMPTY_N ;
  assign WILL_FIRE_memory_request_get = EN_memory_request_get ;

  // action method operand_fwding_put
  assign RDY_operand_fwding_put = 1'd1 ;
  assign CAN_FIRE_operand_fwding_put = 1'd1 ;
  assign WILL_FIRE_operand_fwding_put = EN_operand_fwding_put ;

  // action method ma_update_wEpoch
  assign RDY_ma_update_wEpoch = 1'd1 ;
  assign CAN_FIRE_ma_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_ma_update_wEpoch = EN_ma_update_wEpoch ;

  // action method ma_csr_misa_c
  assign RDY_ma_csr_misa_c = 1'd1 ;
  assign CAN_FIRE_ma_csr_misa_c = 1'd1 ;
  assign WILL_FIRE_ma_csr_misa_c = EN_ma_csr_misa_c ;

  // action method ma_trigger_data1
  assign CAN_FIRE_ma_trigger_data1 = 1'd1 ;
  assign WILL_FIRE_ma_trigger_data1 = 1'd1 ;

  // action method ma_trigger_data2
  assign CAN_FIRE_ma_trigger_data2 = 1'd1 ;
  assign WILL_FIRE_ma_trigger_data2 = 1'd1 ;

  // action method ma_trigger_enable
  assign CAN_FIRE_ma_trigger_enable = 1'd1 ;
  assign WILL_FIRE_ma_trigger_enable = 1'd1 ;

  // value method mv_redirection_fst
  assign mv_redirection_fst = wr_redirection_wget[32:1] ;
  assign RDY_mv_redirection_fst = 1'd1 ;

  // value method mv_redirection_snd
  assign mv_redirection_snd =
	     ff_stage3_common_w_ena_whas && wr_redirection_wget[0] ;
  assign RDY_mv_redirection_snd = 1'd1 ;

  // value method mv_event_jumps
  assign mv_event_jumps = ff_stage3_common_w_ena_whas && x_wget__h3048 ;
  assign RDY_mv_event_jumps = 1'd1 ;

  // value method mv_event_branch_taken
  assign mv_event_branch_taken =
	     ff_stage3_common_w_ena_whas && x_wget__h3118 ;
  assign RDY_mv_event_branch_taken = 1'd1 ;

  // value method mv_event_branch_nottaken
  assign mv_event_branch_nottaken =
	     ff_stage3_common_w_ena_whas && x_wget__h3188 ;
  assign RDY_mv_event_branch_nottaken = 1'd1 ;

  // value method mv_event_muldiv
  assign mv_event_muldiv = 1'b0 ;
  assign RDY_mv_event_muldiv = 1'd1 ;

  // value method mv_event_csr_ops
  assign mv_event_csr_ops = ff_stage3_common_w_ena_whas && x_wget__h3328 ;
  assign RDY_mv_event_csr_ops = 1'd1 ;

  // value method mv_event_raw_stalls
  assign mv_event_raw_stalls = wr_event_raw_stalls_whas ;
  assign RDY_mv_event_raw_stalls = 1'd1 ;

  // value method mv_event_redirection
  assign mv_event_redirection = ff_stage3_common_w_ena_whas && alu_inputs[0] ;
  assign RDY_mv_event_redirection = 1'd1 ;

  // submodule alu
  mkalu alu(.CLK(CLK),
	    .RST_N(RST_N),
	    .inputs_fn(alu_inputs_fn),
	    .inputs_funct3(alu_inputs_funct3),
	    .inputs_imm_value(alu_inputs_imm_value),
	    .inputs_inst_type(alu_inputs_inst_type),
	    .inputs_lpc(alu_inputs_lpc),
	    .inputs_memaccess(alu_inputs_memaccess),
	    .inputs_misa_c(alu_inputs_misa_c),
	    .inputs_op1(alu_inputs_op1),
	    .inputs_op2(alu_inputs_op2),
	    .inputs_op3(alu_inputs_op3),
	    .inputs_tdata1(alu_inputs_tdata1),
	    .inputs_tdata2(alu_inputs_tdata2),
	    .inputs_tenable(alu_inputs_tenable),
	    .EN_inputs(alu_EN_inputs),
	    .inputs(alu_inputs),
	    .RDY_inputs());

  // submodule ff_memory_request
  FIFOL1 #(.width(32'd70)) ff_memory_request(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_memory_request_D_IN),
					     .ENQ(ff_memory_request_ENQ),
					     .DEQ(ff_memory_request_DEQ),
					     .CLR(ff_memory_request_CLR),
					     .D_OUT(ff_memory_request_D_OUT),
					     .FULL_N(ff_memory_request_FULL_N),
					     .EMPTY_N(ff_memory_request_EMPTY_N));

  // rule RL_fetch_execute_pass
  assign CAN_FIRE_RL_fetch_execute_pass =
	     rx_stage1_meta_first_deq_rdy_b &&
	     rx_stage1_control_first_deq_rdy_b &&
	     EN_ma_csr_misa_c &&
	     v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21 ;
  assign WILL_FIRE_RL_fetch_execute_pass = CAN_FIRE_RL_fetch_execute_pass ;

  // inlined wires
  assign ff_stage1_operands_w_ena_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     (NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197 ||
	      !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265) ;
  assign ff_stage3_common_w_ena_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197 ;
  assign wr_redirection_wget = { alu_inputs[38:7], alu_inputs[0] } ;
  assign wr_event_raw_stalls_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 ;

  // register rg_eEpoch
  assign rg_eEpoch_D_IN = ~rg_eEpoch ;
  assign rg_eEpoch_EN =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197 &&
	     alu_inputs[0] ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = ~rg_wEpoch ;
  assign rg_wEpoch_EN = EN_ma_update_wEpoch ;

  // submodule alu
  assign alu_inputs_fn = rx_stage1_meta_first_x_BITS_6_TO_0__q1[6:3] ;
  assign alu_inputs_funct3 = rx_stage1_meta_first_x_BITS_6_TO_0__q1[2:0] ;
  assign alu_inputs_imm_value = rx_stage1_meta_first_x[38:7] ;
  assign alu_inputs_inst_type = rx_stage1_meta_first_x[43:41] ;
  assign alu_inputs_lpc = rx_stage1_control_first_x_BITS_31_TO_0__q3[1:0] ;
  assign alu_inputs_memaccess = rx_stage1_meta_first_x[40:39] ;
  assign alu_inputs_misa_c = ma_csr_misa_c_c ;
  assign alu_inputs_op1 =
	     rx_stage1_meta_first_x[46] ?
	       rx_stage1_control_first_x[31:0] :
	       op1__h3506 ;
  assign alu_inputs_op2 = _op2__h3509 ;
  always@(rx_stage1_meta_first_x or rx_stage1_control_first_x or op1__h3506)
  begin
    case (rx_stage1_meta_first_x[43:41])
      3'd1, 3'd4: alu_inputs_op3 = op1__h3506;
      default: alu_inputs_op3 = rx_stage1_control_first_x[31:0];
    endcase
  end
  assign alu_inputs_tdata1 = ma_trigger_data1_t ;
  assign alu_inputs_tdata2 = ma_trigger_data2_t ;
  assign alu_inputs_tenable = ma_trigger_enable_t ;
  assign alu_EN_inputs = CAN_FIRE_RL_fetch_execute_pass ;

  // submodule ff_memory_request
  assign ff_memory_request_D_IN =
	     { alu_inputs[38:7],
	       _op2__h3509,
	       rx_stage1_meta_first_x[40:39],
	       rx_stage1_meta_first_x_BITS_6_TO_0__q1[2:0],
	       rg_wEpoch } ;
  assign ff_memory_request_ENQ =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197 &&
	     alu_inputs[72:71] == 2'd0 &&
	     rx_stage1_meta_first_x[40:39] != 2'd3 ;
  assign ff_memory_request_DEQ = EN_memory_request_get ;
  assign ff_memory_request_CLR = EN_ma_update_wEpoch ;

  // remaining internal signals
  assign IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 =
	     rx_stage1_control_first_x[33:32] == curr_epoch__h1789 ;
  assign IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d188 =
	     rx_stage1_meta_first_x[61:57] == rdaddr__h5105 ;
  assign IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d190 =
	     rx_stage1_meta_first_x[56:52] == rdaddr__h5105 ;
  assign NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197 =
	     !IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d188 &&
	     !IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d190 ||
	     EN_operand_fwding_put && operand_fwding_put[0] ||
	     rdaddr__h5105 == 5'd0 ;
  assign curr_epoch__h1789 = { rg_eEpoch, rg_wEpoch } ;
  assign op1__h3506 =
	     IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d188 ?
	       rd__h5106 :
	       rx_stage1_operands_first_x[63:32] ;
  assign op2__h3507 =
	     IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d190 ?
	       rd__h5106 :
	       rx_stage1_operands_first_x[31:0] ;
  assign rd__h5106 =
	     EN_operand_fwding_put ? operand_fwding_put[32:1] : 32'd0 ;
  assign rdaddr__h5105 =
	     EN_operand_fwding_put ? operand_fwding_put[37:33] : 5'd0 ;
  assign rx_stage1_control_first_x_BITS_31_TO_0__q3 =
	     rx_stage1_control_first_x[31:0] ;
  assign rx_stage1_meta_first_x_BITS_38_TO_7__q2 =
	     rx_stage1_meta_first_x[38:7] ;
  assign rx_stage1_meta_first_x_BITS_6_TO_0__q1 =
	     rx_stage1_meta_first_x[6:0] ;
  assign s3system_rs1_imm__h8305 =
	     rx_stage1_meta_first_x_BITS_6_TO_0__q1[2] ?
	       { 27'd0, rx_stage1_meta_first_x_BITS_38_TO_7__q2[16:12] } :
	       alu_inputs[70:39] ;
  assign v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21 =
	     rx_stage1_dump_first_deq_rdy_b &&
	     rx_stage1_operands_first_deq_rdy_b &&
	     tx_stage3_common_enq_rdy_b &&
	     tx_stage3_type_enq_rdy_b &&
	     tx_stage3_dump_enq_rdy_b &&
	     ff_memory_request_FULL_N ;
  assign x_wget__h3048 =
	     rx_stage1_meta_first_x[43:41] == 3'd4 ||
	     rx_stage1_meta_first_x[43:41] == 3'd3 ;
  assign x_wget__h3118 =
	     rx_stage1_meta_first_x[43:41] == 3'd2 && alu_inputs[0] ;
  assign x_wget__h3188 =
	     rx_stage1_meta_first_x[43:41] == 3'd2 && !alu_inputs[0] ;
  assign x_wget__h3328 = rx_stage1_meta_first_x[43:41] == 3'd5 ;
  always@(rx_stage1_meta_first_x or op2__h3507)
  begin
    case (rx_stage1_meta_first_x[45:44])
      2'd0: _op2__h3509 = op2__h3507;
      2'd1: _op2__h3509 = rx_stage1_meta_first_x[38:7];
      2'd2: _op2__h3509 = 32'd4;
      2'd3: _op2__h3509 = 32'd2;
    endcase
  end
  always@(alu_inputs or
	  s3system_rs1_imm__h8305 or
	  rx_stage1_control_first_x_BITS_31_TO_0__q3 or
	  rx_stage1_meta_first_x_BITS_38_TO_7__q2 or
	  rx_stage1_meta_first_x_BITS_6_TO_0__q1 or rx_stage1_meta_first_x)
  begin
    case (alu_inputs[72:71])
      2'd0:
	  IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302 =
	      { 13'b0101010101010 /* unspecified value */ ,
		rx_stage1_meta_first_x[40:39],
		alu_inputs[38:7],
		rx_stage1_meta_first_x_BITS_6_TO_0__q1[1:0] };
      2'd1:
	  IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302 =
	      { s3system_rs1_imm__h8305,
		rx_stage1_control_first_x_BITS_31_TO_0__q3[1:0],
		rx_stage1_meta_first_x_BITS_38_TO_7__q2[11:0],
		rx_stage1_meta_first_x_BITS_6_TO_0__q1[2:0] };
      2'd2:
	  IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302 =
	      { 14'b10101010101010 /* unspecified value */ ,
		alu_inputs[73:39] };
      2'd3:
	  IF_alu_inputs_37_BITS_72_TO_71_42_EQ_0_43_THEN_ETC___d302 =
	      { 11'b01010101010 /* unspecified value */ ,
		alu_inputs[6:1],
		alu_inputs[38:7] };
    endcase
  end
  always@(alu_inputs)
  begin
    case (alu_inputs[72:71])
      2'd0, 2'd2:
	  CASE_aluinputs_BITS_72_TO_71_0_aluinputs_BIT_ETC__q4 =
	      alu_inputs[72:71];
      2'd1: CASE_aluinputs_BITS_72_TO_71_0_aluinputs_BIT_ETC__q4 = 2'd3;
      2'd3: CASE_aluinputs_BITS_72_TO_71_0_aluinputs_BIT_ETC__q4 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_eEpoch_EN) rg_eEpoch <= `BSV_ASSIGNMENT_DELAY rg_eEpoch_D_IN;
      if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_eEpoch = 1'h0;
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d31 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h3585 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("[%10d", v__h3585, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("STAGE2 : ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("TraceDump { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("'h%h", rx_stage1_dump_first_x[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write(", ", "instruction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("'h%h", rx_stage1_dump_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d42 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d43 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d44 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h3795 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("[%10d", v__h3795, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("STAGE2 : OPs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("STAGE1_operands { ", "op1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("'h%h", rx_stage1_operands_first_x[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write(", ", "op2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("'h%h", rx_stage1_operands_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d56 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd0;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd1;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd2;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd3;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd4;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd5;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] != 3'd0 &&
	rx_stage1_meta_first_x[43:41] != 3'd1 &&
	rx_stage1_meta_first_x[43:41] != 3'd2 &&
	rx_stage1_meta_first_x[43:41] != 3'd3 &&
	rx_stage1_meta_first_x[43:41] != 3'd4 &&
	rx_stage1_meta_first_x[43:41] != 3'd5 &&
	rx_stage1_meta_first_x[43:41] != 3'd6;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[43:41] == 3'd6;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[40:39] == 2'd0;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d112 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[40:39] == 2'd1;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[40:39] != 2'd0 &&
	rx_stage1_meta_first_x[40:39] != 2'd1;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4007 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("[%10d", v__h4007, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("STAGE2 : Meta: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("InstrMeta { ", "inst_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71)
	$write("BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74)
	$write("JAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77)
	$write("JALR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105)
	$write("WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d112)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "immediate: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("'h%h", rx_stage1_meta_first_x[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "funct: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("'h%h", rx_stage1_meta_first_x[6:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d123 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d124 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d125 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4400 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("[%10d", v__h4400, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("STAGE2 : OpAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("OpAddr { ", "rs1addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("'h%h", rx_stage1_meta_first_x[61:57]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write(", ", "rs2addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("'h%h", rx_stage1_meta_first_x[56:52]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("'h%h", rx_stage1_meta_first_x[51:47], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d123 ||
	   TASK_testplusargs___d124 && TASK_testplusargs___d125))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d135 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d136 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d137 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d144 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	!rx_stage1_meta_first_x[46];
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d146 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	rx_stage1_meta_first_x[46];
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d150 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	rx_stage1_meta_first_x[45:44] == 2'd0;
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d153 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	rx_stage1_meta_first_x[45:44] == 2'd1;
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d156 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	rx_stage1_meta_first_x[45:44] == 2'd2;
    TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d165 =
	(TASK_testplusargs___d135 ||
	 TASK_testplusargs___d136 && TASK_testplusargs___d137) &&
	rx_stage1_meta_first_x[45:44] != 2'd0 &&
	rx_stage1_meta_first_x[45:44] != 2'd1 &&
	rx_stage1_meta_first_x[45:44] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4604 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("[%10d", v__h4604, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("STAGE2 : OpType: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("OpType { ", "rs1type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d144)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d146)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write(", ", "rs2type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d150)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d153)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d156)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_35_OR_TASK_testplusargs_36_A_ETC___d165)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d166 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d167 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d168 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4829 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("[%10d", v__h4829, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("STAGE2 : Control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("STAGE1_control { ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("'h%h", rx_stage1_control_first_x[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write(", ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("'h%h", rx_stage1_control_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d166 ||
	   TASK_testplusargs___d167 && TASK_testplusargs___d168))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d178 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d179 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h5039 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("[%10d", v__h5039, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("STAGE2 : Fwding : Valid:%b Op1:%h Op2:%h",
	       NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d197,
	       op1__h3506,
	       op2__h3507);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d231 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d232 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d233 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d239 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[73];
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d241 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	!alu_inputs[73];
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d244 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[72:71] == 2'd0;
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d246 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[72:71] == 2'd1;
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d248 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[72:71] == 2'd2;
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d254 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[72:71] != 2'd0 &&
	alu_inputs[72:71] != 2'd1 &&
	alu_inputs[72:71] != 2'd2;
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d259 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	alu_inputs[0];
    TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d261 =
	(TASK_testplusargs___d231 ||
	 TASK_testplusargs___d232 && TASK_testplusargs___d233) &&
	!alu_inputs[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h7428 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("[%10d", v__h7428, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("STAGE2 : AluOut: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("ALU_OUT { ", "done: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d239)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d241)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(", ", "cmtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d244)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d246)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d248)
	$write("REGULAR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d254)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(", ", "aluresult: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("'h%h", alu_inputs[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(", ", "effective_addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("'h%h", alu_inputs[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("'h%h", alu_inputs[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(", ", "redirect: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d259)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_31_OR_TASK_testplusargs_32_A_ETC___d261)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d231 ||
	   TASK_testplusargs___d232 && TASK_testplusargs___d233))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265)
	begin
	  TASK_testplusargs___d311 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265)
	begin
	  TASK_testplusargs___d312 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("l0");
	  #0;
	end
    NOT_IF_ff_stage1_control_w_data_whas__72_THEN__ETC___d316 =
	!IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265 &&
	(TASK_testplusargs___d311 ||
	 TASK_testplusargs___d312 && TASK_testplusargs___d313);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__72_THEN_ff_s_ETC___d265)
	begin
	  v__h7728 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__72_THEN__ETC___d316)
	$write("[%10d", v__h7728, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__72_THEN__ETC___d316)
	$write("STAGE2 : Dropping instruction due to mis - match");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__72_THEN__ETC___d316)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d337 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d338 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d339 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  v__h10103 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d337 ||
	   TASK_testplusargs___d338 && TASK_testplusargs___d339))
	$write("[%10d", v__h10103, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d337 ||
	   TASK_testplusargs___d338 && TASK_testplusargs___d339))
	$write("STAGE2: Received Flush from WB");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d337 ||
	   TASK_testplusargs___d338 && TASK_testplusargs___d339))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage2

