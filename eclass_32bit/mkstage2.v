//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Mon Mar 31 00:26:13 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// rx_stage1_operands_deq_ena     O     1
// rx_stage1_meta_deq_ena         O     1
// rx_stage1_control_deq_ena      O     1
// tx_stage3_common_enq_ena       O     1
// tx_stage3_common_enq_data      O    38
// tx_stage3_type_enq_ena         O     1
// tx_stage3_type_enq_data        O    51
// rx_stage1_dump_deq_ena         O     1
// tx_stage3_dump_enq_ena         O     1
// tx_stage3_dump_enq_data        O    64
// memory_request_get             O    75 reg
// RDY_memory_request_get         O     1 reg
// RDY_operand_fwding_put         O     1 const
// RDY_ma_update_wEpoch           O     1 const
// RDY_ma_csr_misa_c              O     1 const
// mv_delayed_output              O    33
// RDY_mv_delayed_output          O     1 const
// mv_redirection_fst             O    32
// RDY_mv_redirection_fst         O     1 const
// mv_redirection_snd             O     1
// RDY_mv_redirection_snd         O     1 const
// mv_event_jumps                 O     1
// RDY_mv_event_jumps             O     1 const
// mv_event_branch_taken          O     1
// RDY_mv_event_branch_taken      O     1 const
// mv_event_branch_nottaken       O     1
// RDY_mv_event_branch_nottaken   O     1 const
// mv_event_muldiv                O     1
// RDY_mv_event_muldiv            O     1 const
// mv_event_csr_ops               O     1
// RDY_mv_event_csr_ops           O     1 const
// mv_event_raw_stalls            O     1
// RDY_mv_event_raw_stalls        O     1 const
// mv_event_redirection           O     1
// RDY_mv_event_redirection       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_stage1_operands_notEmpty_b  I     1 unused
// rx_stage1_operands_first_deq_rdy_b  I     1
// rx_stage1_operands_first_x     I    64
// rx_stage1_meta_notEmpty_b      I     1 unused
// rx_stage1_meta_first_deq_rdy_b  I     1
// rx_stage1_meta_first_x         I    64
// rx_stage1_control_notEmpty_b   I     1 unused
// rx_stage1_control_first_deq_rdy_b  I     1
// rx_stage1_control_first_x      I    34
// tx_stage3_common_notFull_b     I     1 unused
// tx_stage3_common_enq_rdy_b     I     1
// tx_stage3_type_notFull_b       I     1 unused
// tx_stage3_type_enq_rdy_b       I     1
// rx_stage1_dump_notEmpty_b      I     1 unused
// rx_stage1_dump_first_deq_rdy_b  I     1
// rx_stage1_dump_first_x         I    64
// tx_stage3_dump_notFull_b       I     1 unused
// tx_stage3_dump_enq_rdy_b       I     1
// operand_fwding_put             I    38
// ma_csr_misa_c_c                I     1
// ma_trigger_data1_t             I    40
// ma_trigger_data2_t             I    64
// ma_trigger_enable_t            I     2
// EN_operand_fwding_put          I     1
// EN_ma_update_wEpoch            I     1
// EN_ma_csr_misa_c               I     1
// EN_memory_request_get          I     1
//
// Combinational paths from inputs to outputs:
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_operands_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_meta_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_control_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_common_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_common_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_type_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_type_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> rx_stage1_dump_deq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_dump_enq_ena
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    rx_stage1_dump_first_x,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> tx_stage3_dump_enq_data
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_redirection_fst
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_redirection_snd
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_jumps
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_branch_taken
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_branch_nottaken
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_muldiv
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_csr_ops
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_raw_stalls
//   (rx_stage1_operands_first_deq_rdy_b,
//    rx_stage1_operands_first_x,
//    rx_stage1_meta_first_deq_rdy_b,
//    rx_stage1_meta_first_x,
//    rx_stage1_control_first_deq_rdy_b,
//    rx_stage1_control_first_x,
//    tx_stage3_common_enq_rdy_b,
//    tx_stage3_type_enq_rdy_b,
//    rx_stage1_dump_first_deq_rdy_b,
//    tx_stage3_dump_enq_rdy_b,
//    operand_fwding_put,
//    ma_csr_misa_c_c,
//    ma_trigger_data1_t,
//    ma_trigger_data2_t,
//    ma_trigger_enable_t,
//    EN_operand_fwding_put,
//    EN_ma_csr_misa_c,
//    EN_memory_request_get) -> mv_event_redirection
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_stage1_operands_notEmpty_b,

		rx_stage1_operands_first_deq_rdy_b,

		rx_stage1_operands_first_x,

		rx_stage1_operands_deq_ena,

		rx_stage1_meta_notEmpty_b,

		rx_stage1_meta_first_deq_rdy_b,

		rx_stage1_meta_first_x,

		rx_stage1_meta_deq_ena,

		rx_stage1_control_notEmpty_b,

		rx_stage1_control_first_deq_rdy_b,

		rx_stage1_control_first_x,

		rx_stage1_control_deq_ena,

		tx_stage3_common_notFull_b,

		tx_stage3_common_enq_rdy_b,

		tx_stage3_common_enq_ena,

		tx_stage3_common_enq_data,

		tx_stage3_type_notFull_b,

		tx_stage3_type_enq_rdy_b,

		tx_stage3_type_enq_ena,

		tx_stage3_type_enq_data,

		rx_stage1_dump_notEmpty_b,

		rx_stage1_dump_first_deq_rdy_b,

		rx_stage1_dump_first_x,

		rx_stage1_dump_deq_ena,

		tx_stage3_dump_notFull_b,

		tx_stage3_dump_enq_rdy_b,

		tx_stage3_dump_enq_ena,

		tx_stage3_dump_enq_data,

		EN_memory_request_get,
		memory_request_get,
		RDY_memory_request_get,

		operand_fwding_put,
		EN_operand_fwding_put,
		RDY_operand_fwding_put,

		EN_ma_update_wEpoch,
		RDY_ma_update_wEpoch,

		ma_csr_misa_c_c,
		EN_ma_csr_misa_c,
		RDY_ma_csr_misa_c,

		mv_delayed_output,
		RDY_mv_delayed_output,

		ma_trigger_data1_t,

		ma_trigger_data2_t,

		ma_trigger_enable_t,

		mv_redirection_fst,
		RDY_mv_redirection_fst,

		mv_redirection_snd,
		RDY_mv_redirection_snd,

		mv_event_jumps,
		RDY_mv_event_jumps,

		mv_event_branch_taken,
		RDY_mv_event_branch_taken,

		mv_event_branch_nottaken,
		RDY_mv_event_branch_nottaken,

		mv_event_muldiv,
		RDY_mv_event_muldiv,

		mv_event_csr_ops,
		RDY_mv_event_csr_ops,

		mv_event_raw_stalls,
		RDY_mv_event_raw_stalls,

		mv_event_redirection,
		RDY_mv_event_redirection);
  input  CLK;
  input  RST_N;

  // action method rx_stage1_operands_notEmpty
  input  rx_stage1_operands_notEmpty_b;

  // action method rx_stage1_operands_first_deq_rdy
  input  rx_stage1_operands_first_deq_rdy_b;

  // action method rx_stage1_operands_first
  input  [63 : 0] rx_stage1_operands_first_x;

  // value method rx_stage1_operands_deq_ena
  output rx_stage1_operands_deq_ena;

  // action method rx_stage1_meta_notEmpty
  input  rx_stage1_meta_notEmpty_b;

  // action method rx_stage1_meta_first_deq_rdy
  input  rx_stage1_meta_first_deq_rdy_b;

  // action method rx_stage1_meta_first
  input  [63 : 0] rx_stage1_meta_first_x;

  // value method rx_stage1_meta_deq_ena
  output rx_stage1_meta_deq_ena;

  // action method rx_stage1_control_notEmpty
  input  rx_stage1_control_notEmpty_b;

  // action method rx_stage1_control_first_deq_rdy
  input  rx_stage1_control_first_deq_rdy_b;

  // action method rx_stage1_control_first
  input  [33 : 0] rx_stage1_control_first_x;

  // value method rx_stage1_control_deq_ena
  output rx_stage1_control_deq_ena;

  // action method tx_stage3_common_notFull
  input  tx_stage3_common_notFull_b;

  // action method tx_stage3_common_enq_rdy
  input  tx_stage3_common_enq_rdy_b;

  // value method tx_stage3_common_enq_ena
  output tx_stage3_common_enq_ena;

  // value method tx_stage3_common_enq_data
  output [37 : 0] tx_stage3_common_enq_data;

  // action method tx_stage3_type_notFull
  input  tx_stage3_type_notFull_b;

  // action method tx_stage3_type_enq_rdy
  input  tx_stage3_type_enq_rdy_b;

  // value method tx_stage3_type_enq_ena
  output tx_stage3_type_enq_ena;

  // value method tx_stage3_type_enq_data
  output [50 : 0] tx_stage3_type_enq_data;

  // action method rx_stage1_dump_notEmpty
  input  rx_stage1_dump_notEmpty_b;

  // action method rx_stage1_dump_first_deq_rdy
  input  rx_stage1_dump_first_deq_rdy_b;

  // action method rx_stage1_dump_first
  input  [63 : 0] rx_stage1_dump_first_x;

  // value method rx_stage1_dump_deq_ena
  output rx_stage1_dump_deq_ena;

  // action method tx_stage3_dump_notFull
  input  tx_stage3_dump_notFull_b;

  // action method tx_stage3_dump_enq_rdy
  input  tx_stage3_dump_enq_rdy_b;

  // value method tx_stage3_dump_enq_ena
  output tx_stage3_dump_enq_ena;

  // value method tx_stage3_dump_enq_data
  output [63 : 0] tx_stage3_dump_enq_data;

  // actionvalue method memory_request_get
  input  EN_memory_request_get;
  output [74 : 0] memory_request_get;
  output RDY_memory_request_get;

  // action method operand_fwding_put
  input  [37 : 0] operand_fwding_put;
  input  EN_operand_fwding_put;
  output RDY_operand_fwding_put;

  // action method ma_update_wEpoch
  input  EN_ma_update_wEpoch;
  output RDY_ma_update_wEpoch;

  // action method ma_csr_misa_c
  input  ma_csr_misa_c_c;
  input  EN_ma_csr_misa_c;
  output RDY_ma_csr_misa_c;

  // value method mv_delayed_output
  output [32 : 0] mv_delayed_output;
  output RDY_mv_delayed_output;

  // action method ma_trigger_data1
  input  [39 : 0] ma_trigger_data1_t;

  // action method ma_trigger_data2
  input  [63 : 0] ma_trigger_data2_t;

  // action method ma_trigger_enable
  input  [1 : 0] ma_trigger_enable_t;

  // value method mv_redirection_fst
  output [31 : 0] mv_redirection_fst;
  output RDY_mv_redirection_fst;

  // value method mv_redirection_snd
  output mv_redirection_snd;
  output RDY_mv_redirection_snd;

  // value method mv_event_jumps
  output mv_event_jumps;
  output RDY_mv_event_jumps;

  // value method mv_event_branch_taken
  output mv_event_branch_taken;
  output RDY_mv_event_branch_taken;

  // value method mv_event_branch_nottaken
  output mv_event_branch_nottaken;
  output RDY_mv_event_branch_nottaken;

  // value method mv_event_muldiv
  output mv_event_muldiv;
  output RDY_mv_event_muldiv;

  // value method mv_event_csr_ops
  output mv_event_csr_ops;
  output RDY_mv_event_csr_ops;

  // value method mv_event_raw_stalls
  output mv_event_raw_stalls;
  output RDY_mv_event_raw_stalls;

  // value method mv_event_redirection
  output mv_event_redirection;
  output RDY_mv_event_redirection;

  // signals for module outputs
  wire [74 : 0] memory_request_get;
  wire [63 : 0] tx_stage3_dump_enq_data;
  wire [50 : 0] tx_stage3_type_enq_data;
  wire [37 : 0] tx_stage3_common_enq_data;
  wire [32 : 0] mv_delayed_output;
  wire [31 : 0] mv_redirection_fst;
  wire RDY_ma_csr_misa_c,
       RDY_ma_update_wEpoch,
       RDY_memory_request_get,
       RDY_mv_delayed_output,
       RDY_mv_event_branch_nottaken,
       RDY_mv_event_branch_taken,
       RDY_mv_event_csr_ops,
       RDY_mv_event_jumps,
       RDY_mv_event_muldiv,
       RDY_mv_event_raw_stalls,
       RDY_mv_event_redirection,
       RDY_mv_redirection_fst,
       RDY_mv_redirection_snd,
       RDY_operand_fwding_put,
       mv_event_branch_nottaken,
       mv_event_branch_taken,
       mv_event_csr_ops,
       mv_event_jumps,
       mv_event_muldiv,
       mv_event_raw_stalls,
       mv_event_redirection,
       mv_redirection_snd,
       rx_stage1_control_deq_ena,
       rx_stage1_dump_deq_ena,
       rx_stage1_meta_deq_ena,
       rx_stage1_operands_deq_ena,
       tx_stage3_common_enq_ena,
       tx_stage3_dump_enq_ena,
       tx_stage3_type_enq_ena;

  // inlined wires
  wire [50 : 0] ff_stage3_type_w_data_wget;
  wire [37 : 0] ff_stage3_common_w_data_wget;
  wire [32 : 0] wr_redirection_wget;
  wire ff_stage1_operands_w_ena_whas,
       ff_stage3_common_w_ena_whas,
       wr_event_raw_stalls_whas;

  // register rg_eEpoch
  reg rg_eEpoch;
  wire rg_eEpoch_D_IN, rg_eEpoch_EN;

  // register rg_loadreserved_addr
  reg [32 : 0] rg_loadreserved_addr;
  wire [32 : 0] rg_loadreserved_addr_D_IN;
  wire rg_loadreserved_addr_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule alu
  reg [31 : 0] alu_inputs_op3;
  wire [73 : 0] alu_inputs;
  wire [63 : 0] alu_inputs_tdata2;
  wire [39 : 0] alu_inputs_tdata1;
  wire [32 : 0] alu_mv_delayed_output;
  wire [31 : 0] alu_inputs_imm_value, alu_inputs_op1, alu_inputs_op2;
  wire [3 : 0] alu_inputs_fn, alu_inputs_inst_type;
  wire [2 : 0] alu_inputs_funct3;
  wire [1 : 0] alu_inputs_lpc, alu_inputs_memaccess, alu_inputs_tenable;
  wire alu_EN_inputs, alu_inputs_misa_c;

  // ports of submodule ff_memory_request
  wire [74 : 0] ff_memory_request_D_IN, ff_memory_request_D_OUT;
  wire ff_memory_request_CLR,
       ff_memory_request_DEQ,
       ff_memory_request_EMPTY_N,
       ff_memory_request_ENQ,
       ff_memory_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fetch_execute_pass,
       CAN_FIRE_ma_csr_misa_c,
       CAN_FIRE_ma_trigger_data1,
       CAN_FIRE_ma_trigger_data2,
       CAN_FIRE_ma_trigger_enable,
       CAN_FIRE_ma_update_wEpoch,
       CAN_FIRE_memory_request_get,
       CAN_FIRE_operand_fwding_put,
       CAN_FIRE_rx_stage1_control_first,
       CAN_FIRE_rx_stage1_control_first_deq_rdy,
       CAN_FIRE_rx_stage1_control_notEmpty,
       CAN_FIRE_rx_stage1_dump_first,
       CAN_FIRE_rx_stage1_dump_first_deq_rdy,
       CAN_FIRE_rx_stage1_dump_notEmpty,
       CAN_FIRE_rx_stage1_meta_first,
       CAN_FIRE_rx_stage1_meta_first_deq_rdy,
       CAN_FIRE_rx_stage1_meta_notEmpty,
       CAN_FIRE_rx_stage1_operands_first,
       CAN_FIRE_rx_stage1_operands_first_deq_rdy,
       CAN_FIRE_rx_stage1_operands_notEmpty,
       CAN_FIRE_tx_stage3_common_enq_rdy,
       CAN_FIRE_tx_stage3_common_notFull,
       CAN_FIRE_tx_stage3_dump_enq_rdy,
       CAN_FIRE_tx_stage3_dump_notFull,
       CAN_FIRE_tx_stage3_type_enq_rdy,
       CAN_FIRE_tx_stage3_type_notFull,
       WILL_FIRE_RL_fetch_execute_pass,
       WILL_FIRE_ma_csr_misa_c,
       WILL_FIRE_ma_trigger_data1,
       WILL_FIRE_ma_trigger_data2,
       WILL_FIRE_ma_trigger_enable,
       WILL_FIRE_ma_update_wEpoch,
       WILL_FIRE_memory_request_get,
       WILL_FIRE_operand_fwding_put,
       WILL_FIRE_rx_stage1_control_first,
       WILL_FIRE_rx_stage1_control_first_deq_rdy,
       WILL_FIRE_rx_stage1_control_notEmpty,
       WILL_FIRE_rx_stage1_dump_first,
       WILL_FIRE_rx_stage1_dump_first_deq_rdy,
       WILL_FIRE_rx_stage1_dump_notEmpty,
       WILL_FIRE_rx_stage1_meta_first,
       WILL_FIRE_rx_stage1_meta_first_deq_rdy,
       WILL_FIRE_rx_stage1_meta_notEmpty,
       WILL_FIRE_rx_stage1_operands_first,
       WILL_FIRE_rx_stage1_operands_first_deq_rdy,
       WILL_FIRE_rx_stage1_operands_notEmpty,
       WILL_FIRE_tx_stage3_common_enq_rdy,
       WILL_FIRE_tx_stage3_common_notFull,
       WILL_FIRE_tx_stage3_dump_enq_rdy,
       WILL_FIRE_tx_stage3_dump_notFull,
       WILL_FIRE_tx_stage3_type_enq_rdy,
       WILL_FIRE_tx_stage3_type_notFull;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d30;
  reg TASK_testplusargs___d31;
  reg TASK_testplusargs___d32;
  reg [63 : 0] v__h3645;
  reg TASK_testplusargs___d42;
  reg TASK_testplusargs___d43;
  reg TASK_testplusargs___d44;
  reg [63 : 0] v__h3855;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg TASK_testplusargs___d56;
  reg [63 : 0] v__h4067;
  reg TASK_testplusargs___d135;
  reg TASK_testplusargs___d136;
  reg TASK_testplusargs___d137;
  reg [63 : 0] v__h4481;
  reg TASK_testplusargs___d147;
  reg TASK_testplusargs___d148;
  reg TASK_testplusargs___d149;
  reg [63 : 0] v__h4685;
  reg TASK_testplusargs___d178;
  reg TASK_testplusargs___d179;
  reg TASK_testplusargs___d180;
  reg [63 : 0] v__h4910;
  reg TASK_testplusargs___d190;
  reg TASK_testplusargs___d191;
  reg TASK_testplusargs___d192;
  reg [63 : 0] v__h5120;
  reg TASK_testplusargs___d243;
  reg TASK_testplusargs___d244;
  reg TASK_testplusargs___d245;
  reg [63 : 0] v__h7512;
  reg TASK_testplusargs___d296;
  reg TASK_testplusargs___d297;
  reg TASK_testplusargs___d298;
  reg [63 : 0] v__h8170;
  reg TASK_testplusargs___d311;
  reg TASK_testplusargs___d312;
  reg TASK_testplusargs___d313;
  reg [63 : 0] v__h8423;
  reg TASK_testplusargs___d393;
  reg TASK_testplusargs___d394;
  reg TASK_testplusargs___d395;
  reg [63 : 0] v__h7812;
  reg TASK_testplusargs___d419;
  reg TASK_testplusargs___d420;
  reg TASK_testplusargs___d421;
  reg [63 : 0] v__h11069;
  reg IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d301;
  reg IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d316;
  reg TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d323;
  reg TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d331;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d86;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d111;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d115;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d121;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d130;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d156;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d158;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d162;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d165;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d168;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d177;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d251;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d253;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d256;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d266;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d271;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d273;
  reg IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d304;
  reg IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d319;
  reg NOT_IF_ff_stage1_control_w_data_whas__84_THEN__ETC___d398;
  // synopsys translate_on

  // remaining internal signals
  reg [48 : 0] IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383;
  reg [31 : 0] _op2__h3569;
  reg [1 : 0] CASE_IF_IF_ff_stage1_meta_w_data_whas__0_THEN__ETC__q4;
  wire [31 : 0] _theResult_____1_snd_aluresult__h8642,
		op1__h3566,
		op2__h3567,
		rd__h5187,
		rx_stage1_control_first_x_BITS_31_TO_0__q3,
		rx_stage1_meta_first_x_BITS_39_TO_8__q2,
		s3regular_rdvalue__h9117,
		s3system_rs1_imm__h9179,
		x1_avValue_snd_aluresult__h8648;
  wire [6 : 0] rx_stage1_meta_first_x_BITS_7_TO_1__q1;
  wire [4 : 0] rdaddr__h5186, x__h8006;
  wire [1 : 0] IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d341,
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342,
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d347,
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348,
	       IF_rg_loadreserved_addr_21_BIT_32_22_AND_NOT_a_ETC___d340,
	       curr_epoch__h1848;
  wire IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277,
       IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295,
       IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310,
       IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d200,
       IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d202,
       NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209,
       NOT_alu_inputs_49_BITS_38_TO_7_68_EQ_IF_rg_loa_ETC___d337,
       v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21,
       x_wget__h3107,
       x_wget__h3177,
       x_wget__h3247,
       x_wget__h3317,
       x_wget__h3387;

  // action method rx_stage1_operands_notEmpty
  assign CAN_FIRE_rx_stage1_operands_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_notEmpty = 1'd1 ;

  // action method rx_stage1_operands_first_deq_rdy
  assign CAN_FIRE_rx_stage1_operands_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_operands_first
  assign CAN_FIRE_rx_stage1_operands_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_operands_first = 1'd1 ;

  // value method rx_stage1_operands_deq_ena
  assign rx_stage1_operands_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method rx_stage1_meta_notEmpty
  assign CAN_FIRE_rx_stage1_meta_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_notEmpty = 1'd1 ;

  // action method rx_stage1_meta_first_deq_rdy
  assign CAN_FIRE_rx_stage1_meta_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_meta_first
  assign CAN_FIRE_rx_stage1_meta_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_meta_first = 1'd1 ;

  // value method rx_stage1_meta_deq_ena
  assign rx_stage1_meta_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method rx_stage1_control_notEmpty
  assign CAN_FIRE_rx_stage1_control_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_notEmpty = 1'd1 ;

  // action method rx_stage1_control_first_deq_rdy
  assign CAN_FIRE_rx_stage1_control_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_control_first
  assign CAN_FIRE_rx_stage1_control_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_control_first = 1'd1 ;

  // value method rx_stage1_control_deq_ena
  assign rx_stage1_control_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method tx_stage3_common_notFull
  assign CAN_FIRE_tx_stage3_common_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_common_notFull = 1'd1 ;

  // action method tx_stage3_common_enq_rdy
  assign CAN_FIRE_tx_stage3_common_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_common_enq_rdy = 1'd1 ;

  // value method tx_stage3_common_enq_ena
  assign tx_stage3_common_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_common_enq_data
  assign tx_stage3_common_enq_data = ff_stage3_common_w_data_wget ;

  // action method tx_stage3_type_notFull
  assign CAN_FIRE_tx_stage3_type_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_type_notFull = 1'd1 ;

  // action method tx_stage3_type_enq_rdy
  assign CAN_FIRE_tx_stage3_type_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_type_enq_rdy = 1'd1 ;

  // value method tx_stage3_type_enq_ena
  assign tx_stage3_type_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_type_enq_data
  assign tx_stage3_type_enq_data = ff_stage3_type_w_data_wget ;

  // action method rx_stage1_dump_notEmpty
  assign CAN_FIRE_rx_stage1_dump_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_notEmpty = 1'd1 ;

  // action method rx_stage1_dump_first_deq_rdy
  assign CAN_FIRE_rx_stage1_dump_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_first_deq_rdy = 1'd1 ;

  // action method rx_stage1_dump_first
  assign CAN_FIRE_rx_stage1_dump_first = 1'd1 ;
  assign WILL_FIRE_rx_stage1_dump_first = 1'd1 ;

  // value method rx_stage1_dump_deq_ena
  assign rx_stage1_dump_deq_ena = ff_stage1_operands_w_ena_whas ;

  // action method tx_stage3_dump_notFull
  assign CAN_FIRE_tx_stage3_dump_notFull = 1'd1 ;
  assign WILL_FIRE_tx_stage3_dump_notFull = 1'd1 ;

  // action method tx_stage3_dump_enq_rdy
  assign CAN_FIRE_tx_stage3_dump_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_stage3_dump_enq_rdy = 1'd1 ;

  // value method tx_stage3_dump_enq_ena
  assign tx_stage3_dump_enq_ena = ff_stage3_common_w_ena_whas ;

  // value method tx_stage3_dump_enq_data
  assign tx_stage3_dump_enq_data = rx_stage1_dump_first_x ;

  // actionvalue method memory_request_get
  assign memory_request_get = ff_memory_request_D_OUT ;
  assign RDY_memory_request_get = ff_memory_request_EMPTY_N ;
  assign CAN_FIRE_memory_request_get = ff_memory_request_EMPTY_N ;
  assign WILL_FIRE_memory_request_get = EN_memory_request_get ;

  // action method operand_fwding_put
  assign RDY_operand_fwding_put = 1'd1 ;
  assign CAN_FIRE_operand_fwding_put = 1'd1 ;
  assign WILL_FIRE_operand_fwding_put = EN_operand_fwding_put ;

  // action method ma_update_wEpoch
  assign RDY_ma_update_wEpoch = 1'd1 ;
  assign CAN_FIRE_ma_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_ma_update_wEpoch = EN_ma_update_wEpoch ;

  // action method ma_csr_misa_c
  assign RDY_ma_csr_misa_c = 1'd1 ;
  assign CAN_FIRE_ma_csr_misa_c = 1'd1 ;
  assign WILL_FIRE_ma_csr_misa_c = EN_ma_csr_misa_c ;

  // value method mv_delayed_output
  assign mv_delayed_output = alu_mv_delayed_output ;
  assign RDY_mv_delayed_output = 1'd1 ;

  // action method ma_trigger_data1
  assign CAN_FIRE_ma_trigger_data1 = 1'd1 ;
  assign WILL_FIRE_ma_trigger_data1 = 1'd1 ;

  // action method ma_trigger_data2
  assign CAN_FIRE_ma_trigger_data2 = 1'd1 ;
  assign WILL_FIRE_ma_trigger_data2 = 1'd1 ;

  // action method ma_trigger_enable
  assign CAN_FIRE_ma_trigger_enable = 1'd1 ;
  assign WILL_FIRE_ma_trigger_enable = 1'd1 ;

  // value method mv_redirection_fst
  assign mv_redirection_fst = wr_redirection_wget[32:1] ;
  assign RDY_mv_redirection_fst = 1'd1 ;

  // value method mv_redirection_snd
  assign mv_redirection_snd =
	     ff_stage3_common_w_ena_whas && wr_redirection_wget[0] ;
  assign RDY_mv_redirection_snd = 1'd1 ;

  // value method mv_event_jumps
  assign mv_event_jumps = ff_stage3_common_w_ena_whas && x_wget__h3107 ;
  assign RDY_mv_event_jumps = 1'd1 ;

  // value method mv_event_branch_taken
  assign mv_event_branch_taken =
	     ff_stage3_common_w_ena_whas && x_wget__h3177 ;
  assign RDY_mv_event_branch_taken = 1'd1 ;

  // value method mv_event_branch_nottaken
  assign mv_event_branch_nottaken =
	     ff_stage3_common_w_ena_whas && x_wget__h3247 ;
  assign RDY_mv_event_branch_nottaken = 1'd1 ;

  // value method mv_event_muldiv
  assign mv_event_muldiv = ff_stage3_common_w_ena_whas && x_wget__h3317 ;
  assign RDY_mv_event_muldiv = 1'd1 ;

  // value method mv_event_csr_ops
  assign mv_event_csr_ops = ff_stage3_common_w_ena_whas && x_wget__h3387 ;
  assign RDY_mv_event_csr_ops = 1'd1 ;

  // value method mv_event_raw_stalls
  assign mv_event_raw_stalls = wr_event_raw_stalls_whas ;
  assign RDY_mv_event_raw_stalls = 1'd1 ;

  // value method mv_event_redirection
  assign mv_event_redirection = ff_stage3_common_w_ena_whas && alu_inputs[0] ;
  assign RDY_mv_event_redirection = 1'd1 ;

  // submodule alu
  mkalu alu(.CLK(CLK),
	    .RST_N(RST_N),
	    .inputs_fn(alu_inputs_fn),
	    .inputs_funct3(alu_inputs_funct3),
	    .inputs_imm_value(alu_inputs_imm_value),
	    .inputs_inst_type(alu_inputs_inst_type),
	    .inputs_lpc(alu_inputs_lpc),
	    .inputs_memaccess(alu_inputs_memaccess),
	    .inputs_misa_c(alu_inputs_misa_c),
	    .inputs_op1(alu_inputs_op1),
	    .inputs_op2(alu_inputs_op2),
	    .inputs_op3(alu_inputs_op3),
	    .inputs_tdata1(alu_inputs_tdata1),
	    .inputs_tdata2(alu_inputs_tdata2),
	    .inputs_tenable(alu_inputs_tenable),
	    .EN_inputs(alu_EN_inputs),
	    .inputs(alu_inputs),
	    .RDY_inputs(),
	    .mv_delayed_output(alu_mv_delayed_output),
	    .RDY_mv_delayed_output());

  // submodule ff_memory_request
  FIFOL1 #(.width(32'd75)) ff_memory_request(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_memory_request_D_IN),
					     .ENQ(ff_memory_request_ENQ),
					     .DEQ(ff_memory_request_DEQ),
					     .CLR(ff_memory_request_CLR),
					     .D_OUT(ff_memory_request_D_OUT),
					     .FULL_N(ff_memory_request_FULL_N),
					     .EMPTY_N(ff_memory_request_EMPTY_N));

  // rule RL_fetch_execute_pass
  assign CAN_FIRE_RL_fetch_execute_pass =
	     rx_stage1_meta_first_deq_rdy_b &&
	     rx_stage1_control_first_deq_rdy_b &&
	     EN_ma_csr_misa_c &&
	     v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21 ;
  assign WILL_FIRE_RL_fetch_execute_pass = CAN_FIRE_RL_fetch_execute_pass ;

  // inlined wires
  assign ff_stage1_operands_w_ena_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     (NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 ||
	      !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277) ;
  assign ff_stage3_common_w_ena_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 ;
  assign ff_stage3_common_w_data_wget =
	     { rx_stage1_control_first_x[31:0],
	       rx_stage1_meta_first_x[53:49],
	       rg_wEpoch } ;
  assign ff_stage3_type_w_data_wget =
	     { CASE_IF_IF_ff_stage1_meta_w_data_whas__0_THEN__ETC__q4,
	       IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383 } ;
  assign wr_redirection_wget = { alu_inputs[38:7], alu_inputs[0] } ;
  assign wr_event_raw_stalls_whas =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 ;

  // register rg_eEpoch
  assign rg_eEpoch_D_IN = ~rg_eEpoch ;
  assign rg_eEpoch_EN =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	     alu_inputs[0] ;

  // register rg_loadreserved_addr
  assign rg_loadreserved_addr_D_IN =
	     { x__h8006 == 5'b00101 && rx_stage1_meta_first_x[41:40] == 2'd2,
	       alu_inputs[38:7] } ;
  assign rg_loadreserved_addr_EN =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	     rx_stage1_meta_first_x[45:42] == 4'd1 ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = ~rg_wEpoch ;
  assign rg_wEpoch_EN = EN_ma_update_wEpoch ;

  // submodule alu
  assign alu_inputs_fn = rx_stage1_meta_first_x_BITS_7_TO_1__q1[6:3] ;
  assign alu_inputs_funct3 = rx_stage1_meta_first_x_BITS_7_TO_1__q1[2:0] ;
  assign alu_inputs_imm_value = rx_stage1_meta_first_x[39:8] ;
  assign alu_inputs_inst_type = rx_stage1_meta_first_x[45:42] ;
  assign alu_inputs_lpc = rx_stage1_control_first_x_BITS_31_TO_0__q3[1:0] ;
  assign alu_inputs_memaccess = rx_stage1_meta_first_x[41:40] ;
  assign alu_inputs_misa_c = ma_csr_misa_c_c ;
  assign alu_inputs_op1 =
	     rx_stage1_meta_first_x[48] ?
	       rx_stage1_control_first_x[31:0] :
	       op1__h3566 ;
  assign alu_inputs_op2 = _op2__h3569 ;
  always@(rx_stage1_meta_first_x or rx_stage1_control_first_x or op1__h3566)
  begin
    case (rx_stage1_meta_first_x[45:42])
      4'd1, 4'd4: alu_inputs_op3 = op1__h3566;
      default: alu_inputs_op3 = rx_stage1_control_first_x[31:0];
    endcase
  end
  assign alu_inputs_tdata1 = ma_trigger_data1_t ;
  assign alu_inputs_tdata2 = ma_trigger_data2_t ;
  assign alu_inputs_tenable = ma_trigger_enable_t ;
  assign alu_EN_inputs = CAN_FIRE_RL_fetch_execute_pass ;

  // submodule ff_memory_request
  assign ff_memory_request_D_IN =
	     { alu_inputs[38:7],
	       _op2__h3569,
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348,
	       rx_stage1_meta_first_x_BITS_7_TO_1__q1[2:0],
	       rg_wEpoch,
	       x__h8006 } ;
  assign ff_memory_request_ENQ =
	     WILL_FIRE_RL_fetch_execute_pass &&
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	     IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342 ==
	     2'd0 &&
	     IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348 !=
	     2'd3 ;
  assign ff_memory_request_DEQ = EN_memory_request_get ;
  assign ff_memory_request_CLR = EN_ma_update_wEpoch ;

  // remaining internal signals
  assign IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d341 =
	     (x__h8006 == 5'b00111 && rx_stage1_meta_first_x[41:40] == 2'd2) ?
	       IF_rg_loadreserved_addr_21_BIT_32_22_AND_NOT_a_ETC___d340 :
	       alu_inputs[72:71] ;
  assign IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342 =
	     (rx_stage1_meta_first_x[45:42] == 4'd1) ?
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d341 :
	       alu_inputs[72:71] ;
  assign IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d347 =
	     (x__h8006 == 5'b00111 && rx_stage1_meta_first_x[41:40] == 2'd2) ?
	       ((NOT_alu_inputs_49_BITS_38_TO_7_68_EQ_IF_rg_loa_ETC___d337 ||
		 !rg_loadreserved_addr[32]) ?
		  rx_stage1_meta_first_x[41:40] :
		  2'd1) :
	       ((x__h8006 == 5'b00101 &&
		 rx_stage1_meta_first_x[41:40] == 2'd2) ?
		  2'd0 :
		  rx_stage1_meta_first_x[41:40]) ;
  assign IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348 =
	     (rx_stage1_meta_first_x[45:42] == 4'd1) ?
	       IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d347 :
	       rx_stage1_meta_first_x[41:40] ;
  assign IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 =
	     rx_stage1_control_first_x[33:32] == curr_epoch__h1848 ;
  assign IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295 =
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	     rx_stage1_meta_first_x[45:42] == 4'd1 &&
	     x__h8006 == 5'b00101 &&
	     rx_stage1_meta_first_x[41:40] == 2'd2 ;
  assign IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310 =
	     IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	     NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	     rx_stage1_meta_first_x[45:42] == 4'd1 &&
	     x__h8006 == 5'b00111 &&
	     rx_stage1_meta_first_x[41:40] == 2'd2 ;
  assign IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d200 =
	     rx_stage1_meta_first_x[63:59] == rdaddr__h5186 ;
  assign IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d202 =
	     rx_stage1_meta_first_x[58:54] == rdaddr__h5186 ;
  assign IF_rg_loadreserved_addr_21_BIT_32_22_AND_NOT_a_ETC___d340 =
	     (rg_loadreserved_addr[32] &&
	      NOT_alu_inputs_49_BITS_38_TO_7_68_EQ_IF_rg_loa_ETC___d337) ?
	       2'd2 :
	       (rg_loadreserved_addr[32] ? alu_inputs[72:71] : 2'd2) ;
  assign NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 =
	     !IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d200 &&
	     !IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d202 ||
	     EN_operand_fwding_put && operand_fwding_put[0] ||
	     rdaddr__h5186 == 5'd0 ;
  assign NOT_alu_inputs_49_BITS_38_TO_7_68_EQ_IF_rg_loa_ETC___d337 =
	     alu_inputs[38:7] != rg_loadreserved_addr[31:0] ;
  assign _theResult_____1_snd_aluresult__h8642 =
	     (NOT_alu_inputs_49_BITS_38_TO_7_68_EQ_IF_rg_loa_ETC___d337 ||
	      !rg_loadreserved_addr[32]) ?
	       32'd1 :
	       alu_inputs[70:39] ;
  assign curr_epoch__h1848 = { rg_eEpoch, rg_wEpoch } ;
  assign op1__h3566 =
	     IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d200 ?
	       rd__h5187 :
	       rx_stage1_operands_first_x[63:32] ;
  assign op2__h3567 =
	     IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d202 ?
	       rd__h5187 :
	       rx_stage1_operands_first_x[31:0] ;
  assign rd__h5187 =
	     EN_operand_fwding_put ? operand_fwding_put[32:1] : 32'd0 ;
  assign rdaddr__h5186 =
	     EN_operand_fwding_put ? operand_fwding_put[37:33] : 5'd0 ;
  assign rx_stage1_control_first_x_BITS_31_TO_0__q3 =
	     rx_stage1_control_first_x[31:0] ;
  assign rx_stage1_meta_first_x_BITS_39_TO_8__q2 =
	     rx_stage1_meta_first_x[39:8] ;
  assign rx_stage1_meta_first_x_BITS_7_TO_1__q1 =
	     rx_stage1_meta_first_x[7:1] ;
  assign s3regular_rdvalue__h9117 =
	     (rx_stage1_meta_first_x[45:42] == 4'd1) ?
	       x1_avValue_snd_aluresult__h8648 :
	       alu_inputs[70:39] ;
  assign s3system_rs1_imm__h9179 =
	     rx_stage1_meta_first_x_BITS_7_TO_1__q1[2] ?
	       { 27'd0, rx_stage1_meta_first_x_BITS_39_TO_8__q2[16:12] } :
	       s3regular_rdvalue__h9117 ;
  assign v_trigger_enable_0_whas_AND_ff_stage1_dump_w_r_ETC___d21 =
	     rx_stage1_dump_first_deq_rdy_b &&
	     rx_stage1_operands_first_deq_rdy_b &&
	     tx_stage3_common_enq_rdy_b &&
	     tx_stage3_type_enq_rdy_b &&
	     tx_stage3_dump_enq_rdy_b &&
	     ff_memory_request_FULL_N ;
  assign x1_avValue_snd_aluresult__h8648 =
	     (x__h8006 == 5'b00111 && rx_stage1_meta_first_x[41:40] == 2'd2) ?
	       _theResult_____1_snd_aluresult__h8642 :
	       alu_inputs[70:39] ;
  assign x__h8006 =
	     { rx_stage1_meta_first_x_BITS_7_TO_1__q1[0],
	       rx_stage1_meta_first_x_BITS_7_TO_1__q1[6:3] } ;
  assign x_wget__h3107 =
	     rx_stage1_meta_first_x[45:42] == 4'd4 ||
	     rx_stage1_meta_first_x[45:42] == 4'd3 ;
  assign x_wget__h3177 =
	     rx_stage1_meta_first_x[45:42] == 4'd2 && alu_inputs[0] ;
  assign x_wget__h3247 =
	     rx_stage1_meta_first_x[45:42] == 4'd2 && !alu_inputs[0] ;
  assign x_wget__h3317 = rx_stage1_meta_first_x[45:42] == 4'd8 ;
  assign x_wget__h3387 = rx_stage1_meta_first_x[45:42] == 4'd5 ;
  always@(rx_stage1_meta_first_x or op2__h3567)
  begin
    case (rx_stage1_meta_first_x[47:46])
      2'd0: _op2__h3569 = op2__h3567;
      2'd1: _op2__h3569 = rx_stage1_meta_first_x[39:8];
      2'd2: _op2__h3569 = 32'd4;
      2'd3: _op2__h3569 = 32'd2;
    endcase
  end
  always@(IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342 or
	  s3system_rs1_imm__h9179 or
	  rx_stage1_control_first_x_BITS_31_TO_0__q3 or
	  rx_stage1_meta_first_x_BITS_39_TO_8__q2 or
	  rx_stage1_meta_first_x_BITS_7_TO_1__q1 or
	  IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348 or
	  alu_inputs or s3regular_rdvalue__h9117)
  begin
    case (IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342)
      2'd0:
	  IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383 =
	      { 13'b0101010101010 /* unspecified value */ ,
		IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d348,
		alu_inputs[38:7],
		rx_stage1_meta_first_x_BITS_7_TO_1__q1[1:0] };
      2'd1:
	  IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383 =
	      { s3system_rs1_imm__h9179,
		rx_stage1_control_first_x_BITS_31_TO_0__q3[1:0],
		rx_stage1_meta_first_x_BITS_39_TO_8__q2[11:0],
		rx_stage1_meta_first_x_BITS_7_TO_1__q1[2:0] };
      2'd2:
	  IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383 =
	      { 16'b1010101010101010 /* unspecified value */ ,
		s3regular_rdvalue__h9117,
		!alu_inputs[73] };
      2'd3:
	  IF_IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_ETC___d383 =
	      { 11'b01010101010 /* unspecified value */ ,
		alu_inputs[6:1],
		alu_inputs[38:7] };
    endcase
  end
  always@(IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342)
  begin
    case (IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342)
      2'd0, 2'd2:
	  CASE_IF_IF_ff_stage1_meta_w_data_whas__0_THEN__ETC__q4 =
	      IF_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_st_ETC___d342;
      2'd1: CASE_IF_IF_ff_stage1_meta_w_data_whas__0_THEN__ETC__q4 = 2'd3;
      2'd3: CASE_IF_IF_ff_stage1_meta_w_data_whas__0_THEN__ETC__q4 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_loadreserved_addr <= `BSV_ASSIGNMENT_DELAY
	  { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
      rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_eEpoch_EN) rg_eEpoch <= `BSV_ASSIGNMENT_DELAY rg_eEpoch_D_IN;
      if (rg_loadreserved_addr_EN)
	rg_loadreserved_addr <= `BSV_ASSIGNMENT_DELAY
	    rg_loadreserved_addr_D_IN;
      if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_eEpoch = 1'h0;
    rg_loadreserved_addr = 33'h0AAAAAAAA;
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d31 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h3645 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("[%10d", v__h3645, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("STAGE2 : ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("TraceDump { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("'h%h", rx_stage1_dump_first_x[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write(", ", "instruction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("'h%h", rx_stage1_dump_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d42 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d43 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d44 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h3855 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("[%10d", v__h3855, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("STAGE2 : OPs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("STAGE1_operands { ", "op1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("'h%h", rx_stage1_operands_first_x[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write(", ", "op2: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("'h%h", rx_stage1_operands_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d42 ||
	   TASK_testplusargs___d43 && TASK_testplusargs___d44))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d56 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd0;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd1;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd2;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd3;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd4;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd5;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d86 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd7;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] == 4'd6;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d111 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[45:42] != 4'd0 &&
	rx_stage1_meta_first_x[45:42] != 4'd1 &&
	rx_stage1_meta_first_x[45:42] != 4'd2 &&
	rx_stage1_meta_first_x[45:42] != 4'd3 &&
	rx_stage1_meta_first_x[45:42] != 4'd4 &&
	rx_stage1_meta_first_x[45:42] != 4'd5 &&
	rx_stage1_meta_first_x[45:42] != 4'd6 &&
	rx_stage1_meta_first_x[45:42] != 4'd7;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d115 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[41:40] == 2'd0;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[41:40] == 2'd1;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d121 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[41:40] == 2'd3;
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d130 =
	(TASK_testplusargs___d54 ||
	 TASK_testplusargs___d55 && TASK_testplusargs___d56) &&
	rx_stage1_meta_first_x[41:40] != 2'd0 &&
	rx_stage1_meta_first_x[41:40] != 2'd1 &&
	rx_stage1_meta_first_x[41:40] != 2'd3;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4067 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("[%10d", v__h4067, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("STAGE2 : Meta: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("InstrMeta { ", "inst_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d65)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d68)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d71)
	$write("BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d74)
	$write("JAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d77)
	$write("JALR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d80)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d83)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d86)
	$write("WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d111)
	$write("MULDIV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d115)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d118)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d121)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d130)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "immediate: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("'h%h", rx_stage1_meta_first_x[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write(", ", "funct: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("'h%h", rx_stage1_meta_first_x[7:1], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d54 ||
	   TASK_testplusargs___d55 && TASK_testplusargs___d56))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d135 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d136 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d137 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4481 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("[%10d", v__h4481, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("STAGE2 : OpAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("OpAddr { ", "rs1addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("'h%h", rx_stage1_meta_first_x[63:59]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write(", ", "rs2addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("'h%h", rx_stage1_meta_first_x[58:54]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("'h%h", rx_stage1_meta_first_x[53:49], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d135 ||
	   TASK_testplusargs___d136 && TASK_testplusargs___d137))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d147 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d148 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d149 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d156 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	!rx_stage1_meta_first_x[48];
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d158 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	rx_stage1_meta_first_x[48];
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d162 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	rx_stage1_meta_first_x[47:46] == 2'd0;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d165 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	rx_stage1_meta_first_x[47:46] == 2'd1;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d168 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	rx_stage1_meta_first_x[47:46] == 2'd2;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d177 =
	(TASK_testplusargs___d147 ||
	 TASK_testplusargs___d148 && TASK_testplusargs___d149) &&
	rx_stage1_meta_first_x[47:46] != 2'd0 &&
	rx_stage1_meta_first_x[47:46] != 2'd1 &&
	rx_stage1_meta_first_x[47:46] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4685 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("[%10d", v__h4685, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("STAGE2 : OpType: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("OpType { ", "rs1type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d156)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d158)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write(", ", "rs2type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d162)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d165)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d168)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d177)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d147 ||
	   TASK_testplusargs___d148 && TASK_testplusargs___d149))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d178 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d179 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h4910 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("[%10d", v__h4910, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("STAGE2 : Control: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("STAGE1_control { ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("'h%h", rx_stage1_control_first_x[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write(", ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("'h%h", rx_stage1_control_first_x[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d178 ||
	   TASK_testplusargs___d179 && TASK_testplusargs___d180))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d190 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d191 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d192 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h5120 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d190 ||
	   TASK_testplusargs___d191 && TASK_testplusargs___d192))
	$write("[%10d", v__h5120, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d190 ||
	   TASK_testplusargs___d191 && TASK_testplusargs___d192))
	$write("STAGE2 : Fwding : Valid:%b Op1:%h Op2:%h",
	       NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209,
	       op1__h3566,
	       op2__h3567);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d190 ||
	   TASK_testplusargs___d191 && TASK_testplusargs___d192))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d243 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d244 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  TASK_testplusargs___d245 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d251 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[73];
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d253 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	!alu_inputs[73];
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d256 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[72:71] == 2'd0;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[72:71] == 2'd1;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d266 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[72:71] != 2'd0 &&
	alu_inputs[72:71] != 2'd1 &&
	alu_inputs[72:71] != 2'd2;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[72:71] == 2'd2;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d271 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	alu_inputs[0];
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d273 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	!alu_inputs[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass)
	begin
	  v__h7512 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("[%10d", v__h7512, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("STAGE2 : AluOut: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("ALU_OUT { ", "done: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d251)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d253)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(", ", "cmtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d256)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260)
	$write("REGULAR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d266)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(", ", "aluresult: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("'h%h", alu_inputs[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(", ", "effective_addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("'h%h", alu_inputs[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("'h%h", alu_inputs[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(", ", "redirect: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d271)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d273)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  (TASK_testplusargs___d243 ||
	   TASK_testplusargs___d244 && TASK_testplusargs___d245))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295)
	begin
	  TASK_testplusargs___d296 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295)
	begin
	  TASK_testplusargs___d297 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295)
	begin
	  TASK_testplusargs___d298 = $test$plusargs("l1");
	  #0;
	end
    IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d301 =
	x__h8006 == 5'b00101 && rx_stage1_meta_first_x[41:40] == 2'd2 &&
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298);
    IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d304 =
	IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	rx_stage1_meta_first_x[45:42] == 4'd1 &&
	IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d301;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d295)
	begin
	  v__h8170 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d304)
	$write("[%10d", v__h8170, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d304)
	$write("STAGE2: Reserving Addr: %h", alu_inputs[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d304)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310)
	begin
	  TASK_testplusargs___d311 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310)
	begin
	  TASK_testplusargs___d312 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("l1");
	  #0;
	end
    IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d316 =
	x__h8006 == 5'b00111 && rx_stage1_meta_first_x[41:40] == 2'd2 &&
	(TASK_testplusargs___d311 ||
	 TASK_testplusargs___d312 && TASK_testplusargs___d313);
    TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d323 =
	(TASK_testplusargs___d311 ||
	 TASK_testplusargs___d312 && TASK_testplusargs___d313) &&
	rg_loadreserved_addr[32];
    TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d331 =
	(TASK_testplusargs___d311 ||
	 TASK_testplusargs___d312 && TASK_testplusargs___d313) &&
	!rg_loadreserved_addr[32];
    IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d319 =
	IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	rx_stage1_meta_first_x[45:42] == 4'd1 &&
	IF_ff_stage1_meta_w_data_whas__0_THEN_ff_stage_ETC___d316;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d310)
	begin
	  v__h8423 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d319)
	$write("[%10d", v__h8423, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d319)
	$write("STAGE2: SC-ADDR:%h RES-ADDR: ", alu_inputs[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	  NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	  rx_stage1_meta_first_x[45:42] == 4'd1 &&
	  x__h8006 == 5'b00111 &&
	  rx_stage1_meta_first_x[41:40] == 2'd2 &&
	  TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d323)
	$write("tagged Valid ", "'h%h", rg_loadreserved_addr[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	  NOT_IF_ff_stage1_meta_w_data_whas__0_THEN_ff_s_ETC___d209 &&
	  rx_stage1_meta_first_x[45:42] == 4'd1 &&
	  x__h8006 == 5'b00111 &&
	  rx_stage1_meta_first_x[41:40] == 2'd2 &&
	  TASK_testplusargs_11_OR_TASK_testplusargs_12_A_ETC___d331)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d319)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277)
	begin
	  TASK_testplusargs___d393 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277)
	begin
	  TASK_testplusargs___d394 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277)
	begin
	  TASK_testplusargs___d395 = $test$plusargs("l0");
	  #0;
	end
    NOT_IF_ff_stage1_control_w_data_whas__84_THEN__ETC___d398 =
	!IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277 &&
	(TASK_testplusargs___d393 ||
	 TASK_testplusargs___d394 && TASK_testplusargs___d395);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  !IF_ff_stage1_control_w_data_whas__84_THEN_ff_s_ETC___d277)
	begin
	  v__h7812 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__84_THEN__ETC___d398)
	$write("[%10d", v__h7812, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__84_THEN__ETC___d398)
	$write("STAGE2 : Dropping instruction due to mis - match");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_execute_pass &&
	  NOT_IF_ff_stage1_control_w_data_whas__84_THEN__ETC___d398)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d419 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d420 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  TASK_testplusargs___d421 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch)
	begin
	  v__h11069 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("[%10d", v__h11069, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("STAGE2: Received Flush from WB");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_update_wEpoch &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage2

