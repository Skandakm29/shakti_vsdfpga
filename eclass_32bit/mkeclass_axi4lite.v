//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Mon Mar 31 00:26:15 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// master_d_awvalid               O     1 reg
// master_d_awaddr                O    32 reg
// master_d_awprot                O     3 reg
// master_d_awsize                O     2 reg
// master_d_wvalid                O     1 reg
// master_d_wdata                 O    32 reg
// master_d_wstrb                 O     4 reg
// master_d_bready                O     1 reg
// master_d_arvalid               O     1 reg
// master_d_araddr                O    32 reg
// master_d_arprot                O     3 reg
// master_d_arsize                O     2 reg
// master_d_rready                O     1 reg
// master_i_awvalid               O     1 reg
// master_i_awaddr                O    32 reg
// master_i_awprot                O     3 reg
// master_i_awsize                O     2 reg
// master_i_wvalid                O     1 reg
// master_i_wdata                 O    32 reg
// master_i_wstrb                 O     4 reg
// master_i_bready                O     1 reg
// master_i_arvalid               O     1 reg
// master_i_araddr                O    32 reg
// master_i_arprot                O     3 reg
// master_i_arsize                O     2 reg
// master_i_rready                O     1 reg
// RDY_sb_clint_msip_put          O     1 const
// RDY_sb_clint_mtip_put          O     1 const
// RDY_sb_clint_mtime_put         O     1 const
// RDY_sb_ext_interrupt_put       O     1 const
// io_dump_get                    O   103 reg
// RDY_io_dump_get                O     1 reg
// counter_values_fst             O    32 reg
// RDY_counter_values_fst         O     1 const
// counter_values_snd             O    64 reg
// RDY_counter_values_snd         O     1 const
// resetpc                        I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_m_awready_awready     I     1
// master_d_m_wready_wready       I     1
// master_d_m_bvalid_bvalid       I     1
// master_d_m_bvalid_bresp        I     2 reg
// master_d_m_arready_arready     I     1
// master_d_m_rvalid_rvalid       I     1
// master_d_m_rvalid_rresp        I     2 reg
// master_d_m_rvalid_rdata        I    32 reg
// master_i_m_awready_awready     I     1
// master_i_m_wready_wready       I     1
// master_i_m_bvalid_bvalid       I     1
// master_i_m_bvalid_bresp        I     2 reg
// master_i_m_arready_arready     I     1
// master_i_m_rvalid_rvalid       I     1
// master_i_m_rvalid_rresp        I     2 reg
// master_i_m_rvalid_rdata        I    32 reg
// sb_clint_msip_put              I     1 reg
// sb_clint_mtip_put              I     1 reg
// sb_clint_mtime_put             I    64 reg
// sb_ext_interrupt_put           I     1 reg
// EN_sb_clint_msip_put           I     1
// EN_sb_clint_mtip_put           I     1
// EN_sb_clint_mtime_put          I     1
// EN_sb_ext_interrupt_put        I     1
// EN_io_dump_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkeclass_axi4lite(resetpc,
			 CLK,
			 RST_N,

			 master_d_awvalid,

			 master_d_awaddr,

			 master_d_awprot,

			 master_d_awsize,

			 master_d_m_awready_awready,

			 master_d_wvalid,

			 master_d_wdata,

			 master_d_wstrb,

			 master_d_m_wready_wready,

			 master_d_m_bvalid_bvalid,
			 master_d_m_bvalid_bresp,

			 master_d_bready,

			 master_d_arvalid,

			 master_d_araddr,

			 master_d_arprot,

			 master_d_arsize,

			 master_d_m_arready_arready,

			 master_d_m_rvalid_rvalid,
			 master_d_m_rvalid_rresp,
			 master_d_m_rvalid_rdata,

			 master_d_rready,

			 master_i_awvalid,

			 master_i_awaddr,

			 master_i_awprot,

			 master_i_awsize,

			 master_i_m_awready_awready,

			 master_i_wvalid,

			 master_i_wdata,

			 master_i_wstrb,

			 master_i_m_wready_wready,

			 master_i_m_bvalid_bvalid,
			 master_i_m_bvalid_bresp,

			 master_i_bready,

			 master_i_arvalid,

			 master_i_araddr,

			 master_i_arprot,

			 master_i_arsize,

			 master_i_m_arready_arready,

			 master_i_m_rvalid_rvalid,
			 master_i_m_rvalid_rresp,
			 master_i_m_rvalid_rdata,

			 master_i_rready,

			 sb_clint_msip_put,
			 EN_sb_clint_msip_put,
			 RDY_sb_clint_msip_put,

			 sb_clint_mtip_put,
			 EN_sb_clint_mtip_put,
			 RDY_sb_clint_mtip_put,

			 sb_clint_mtime_put,
			 EN_sb_clint_mtime_put,
			 RDY_sb_clint_mtime_put,

			 sb_ext_interrupt_put,
			 EN_sb_ext_interrupt_put,
			 RDY_sb_ext_interrupt_put,

			 EN_io_dump_get,
			 io_dump_get,
			 RDY_io_dump_get,

			 counter_values_fst,
			 RDY_counter_values_fst,

			 counter_values_snd,
			 RDY_counter_values_snd);
  input  [31 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_awvalid;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_awaddr;

  // value method master_d_m_awuser

  // value method master_d_m_awprot
  output [2 : 0] master_d_awprot;

  // value method master_d_m_awsize
  output [1 : 0] master_d_awsize;

  // action method master_d_m_awready
  input  master_d_m_awready_awready;

  // value method master_d_m_wvalid
  output master_d_wvalid;

  // value method master_d_m_wdata
  output [31 : 0] master_d_wdata;

  // value method master_d_m_wstrb
  output [3 : 0] master_d_wstrb;

  // action method master_d_m_wready
  input  master_d_m_wready_wready;

  // action method master_d_m_bvalid
  input  master_d_m_bvalid_bvalid;
  input  [1 : 0] master_d_m_bvalid_bresp;

  // value method master_d_m_bready
  output master_d_bready;

  // value method master_d_m_arvalid
  output master_d_arvalid;

  // value method master_d_m_araddr
  output [31 : 0] master_d_araddr;

  // value method master_d_m_aruser

  // value method master_d_m_arprot
  output [2 : 0] master_d_arprot;

  // value method master_d_m_arsize
  output [1 : 0] master_d_arsize;

  // action method master_d_m_arready
  input  master_d_m_arready_arready;

  // action method master_d_m_rvalid
  input  master_d_m_rvalid_rvalid;
  input  [1 : 0] master_d_m_rvalid_rresp;
  input  [31 : 0] master_d_m_rvalid_rdata;

  // value method master_d_m_rready
  output master_d_rready;

  // value method master_i_m_awvalid
  output master_i_awvalid;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_awaddr;

  // value method master_i_m_awuser

  // value method master_i_m_awprot
  output [2 : 0] master_i_awprot;

  // value method master_i_m_awsize
  output [1 : 0] master_i_awsize;

  // action method master_i_m_awready
  input  master_i_m_awready_awready;

  // value method master_i_m_wvalid
  output master_i_wvalid;

  // value method master_i_m_wdata
  output [31 : 0] master_i_wdata;

  // value method master_i_m_wstrb
  output [3 : 0] master_i_wstrb;

  // action method master_i_m_wready
  input  master_i_m_wready_wready;

  // action method master_i_m_bvalid
  input  master_i_m_bvalid_bvalid;
  input  [1 : 0] master_i_m_bvalid_bresp;

  // value method master_i_m_bready
  output master_i_bready;

  // value method master_i_m_arvalid
  output master_i_arvalid;

  // value method master_i_m_araddr
  output [31 : 0] master_i_araddr;

  // value method master_i_m_aruser

  // value method master_i_m_arprot
  output [2 : 0] master_i_arprot;

  // value method master_i_m_arsize
  output [1 : 0] master_i_arsize;

  // action method master_i_m_arready
  input  master_i_m_arready_arready;

  // action method master_i_m_rvalid
  input  master_i_m_rvalid_rvalid;
  input  [1 : 0] master_i_m_rvalid_rresp;
  input  [31 : 0] master_i_m_rvalid_rdata;

  // value method master_i_m_rready
  output master_i_rready;

  // action method sb_clint_msip_put
  input  sb_clint_msip_put;
  input  EN_sb_clint_msip_put;
  output RDY_sb_clint_msip_put;

  // action method sb_clint_mtip_put
  input  sb_clint_mtip_put;
  input  EN_sb_clint_mtip_put;
  output RDY_sb_clint_mtip_put;

  // action method sb_clint_mtime_put
  input  [63 : 0] sb_clint_mtime_put;
  input  EN_sb_clint_mtime_put;
  output RDY_sb_clint_mtime_put;

  // action method sb_ext_interrupt_put
  input  sb_ext_interrupt_put;
  input  EN_sb_ext_interrupt_put;
  output RDY_sb_ext_interrupt_put;

  // actionvalue method io_dump_get
  input  EN_io_dump_get;
  output [102 : 0] io_dump_get;
  output RDY_io_dump_get;

  // value method counter_values_fst
  output [31 : 0] counter_values_fst;
  output RDY_counter_values_fst;

  // value method counter_values_snd
  output [63 : 0] counter_values_snd;
  output RDY_counter_values_snd;

  // signals for module outputs
  wire [102 : 0] io_dump_get;
  wire [63 : 0] counter_values_snd;
  wire [31 : 0] counter_values_fst,
		master_d_araddr,
		master_d_awaddr,
		master_d_wdata,
		master_i_araddr,
		master_i_awaddr,
		master_i_wdata;
  wire [3 : 0] master_d_wstrb, master_i_wstrb;
  wire [2 : 0] master_d_arprot,
	       master_d_awprot,
	       master_i_arprot,
	       master_i_awprot;
  wire [1 : 0] master_d_arsize,
	       master_d_awsize,
	       master_i_arsize,
	       master_i_awsize;
  wire RDY_counter_values_fst,
       RDY_counter_values_snd,
       RDY_io_dump_get,
       RDY_sb_clint_msip_put,
       RDY_sb_clint_mtime_put,
       RDY_sb_clint_mtip_put,
       RDY_sb_ext_interrupt_put,
       master_d_arvalid,
       master_d_awvalid,
       master_d_bready,
       master_d_rready,
       master_d_wvalid,
       master_i_arvalid,
       master_i_awvalid,
       master_i_bready,
       master_i_rready,
       master_i_wvalid;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule fetch_xactor_f_rd_addr
  wire [36 : 0] fetch_xactor_f_rd_addr_D_IN, fetch_xactor_f_rd_addr_D_OUT;
  wire fetch_xactor_f_rd_addr_CLR,
       fetch_xactor_f_rd_addr_DEQ,
       fetch_xactor_f_rd_addr_EMPTY_N,
       fetch_xactor_f_rd_addr_ENQ,
       fetch_xactor_f_rd_addr_FULL_N;

  // ports of submodule fetch_xactor_f_rd_data
  wire [33 : 0] fetch_xactor_f_rd_data_D_IN, fetch_xactor_f_rd_data_D_OUT;
  wire fetch_xactor_f_rd_data_CLR,
       fetch_xactor_f_rd_data_DEQ,
       fetch_xactor_f_rd_data_EMPTY_N,
       fetch_xactor_f_rd_data_ENQ,
       fetch_xactor_f_rd_data_FULL_N;

  // ports of submodule fetch_xactor_f_wr_addr
  wire [36 : 0] fetch_xactor_f_wr_addr_D_IN, fetch_xactor_f_wr_addr_D_OUT;
  wire fetch_xactor_f_wr_addr_CLR,
       fetch_xactor_f_wr_addr_DEQ,
       fetch_xactor_f_wr_addr_EMPTY_N,
       fetch_xactor_f_wr_addr_ENQ;

  // ports of submodule fetch_xactor_f_wr_data
  wire [35 : 0] fetch_xactor_f_wr_data_D_IN, fetch_xactor_f_wr_data_D_OUT;
  wire fetch_xactor_f_wr_data_CLR,
       fetch_xactor_f_wr_data_DEQ,
       fetch_xactor_f_wr_data_EMPTY_N,
       fetch_xactor_f_wr_data_ENQ;

  // ports of submodule fetch_xactor_f_wr_resp
  wire [1 : 0] fetch_xactor_f_wr_resp_D_IN;
  wire fetch_xactor_f_wr_resp_CLR,
       fetch_xactor_f_wr_resp_DEQ,
       fetch_xactor_f_wr_resp_ENQ,
       fetch_xactor_f_wr_resp_FULL_N;

  // ports of submodule ff_atomic_state
  wire [31 : 0] ff_atomic_state_D_IN, ff_atomic_state_D_OUT;
  wire ff_atomic_state_CLR,
       ff_atomic_state_DEQ,
       ff_atomic_state_EMPTY_N,
       ff_atomic_state_ENQ,
       ff_atomic_state_FULL_N;

  // ports of submodule ff_inst_access_fault
  wire ff_inst_access_fault_CLR,
       ff_inst_access_fault_DEQ,
       ff_inst_access_fault_D_IN,
       ff_inst_access_fault_D_OUT,
       ff_inst_access_fault_EMPTY_N,
       ff_inst_access_fault_ENQ,
       ff_inst_access_fault_FULL_N;

  // ports of submodule ff_inst_request
  wire [33 : 0] ff_inst_request_D_IN, ff_inst_request_D_OUT;
  wire ff_inst_request_CLR,
       ff_inst_request_DEQ,
       ff_inst_request_EMPTY_N,
       ff_inst_request_ENQ,
       ff_inst_request_FULL_N;

  // ports of submodule ff_mem_access_fault
  wire ff_mem_access_fault_CLR,
       ff_mem_access_fault_DEQ,
       ff_mem_access_fault_D_IN,
       ff_mem_access_fault_ENQ;

  // ports of submodule ff_mem_request
  wire [74 : 0] ff_mem_request_D_IN, ff_mem_request_D_OUT;
  wire ff_mem_request_CLR,
       ff_mem_request_DEQ,
       ff_mem_request_EMPTY_N,
       ff_mem_request_ENQ,
       ff_mem_request_FULL_N;

  // ports of submodule memory_xactor_f_rd_addr
  wire [36 : 0] memory_xactor_f_rd_addr_D_IN, memory_xactor_f_rd_addr_D_OUT;
  wire memory_xactor_f_rd_addr_CLR,
       memory_xactor_f_rd_addr_DEQ,
       memory_xactor_f_rd_addr_EMPTY_N,
       memory_xactor_f_rd_addr_ENQ,
       memory_xactor_f_rd_addr_FULL_N;

  // ports of submodule memory_xactor_f_rd_data
  wire [33 : 0] memory_xactor_f_rd_data_D_IN, memory_xactor_f_rd_data_D_OUT;
  wire memory_xactor_f_rd_data_CLR,
       memory_xactor_f_rd_data_DEQ,
       memory_xactor_f_rd_data_EMPTY_N,
       memory_xactor_f_rd_data_ENQ,
       memory_xactor_f_rd_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [36 : 0] memory_xactor_f_wr_addr_D_IN, memory_xactor_f_wr_addr_D_OUT;
  wire memory_xactor_f_wr_addr_CLR,
       memory_xactor_f_wr_addr_DEQ,
       memory_xactor_f_wr_addr_EMPTY_N,
       memory_xactor_f_wr_addr_ENQ,
       memory_xactor_f_wr_addr_FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  wire [35 : 0] memory_xactor_f_wr_data_D_IN, memory_xactor_f_wr_data_D_OUT;
  wire memory_xactor_f_wr_data_CLR,
       memory_xactor_f_wr_data_DEQ,
       memory_xactor_f_wr_data_EMPTY_N,
       memory_xactor_f_wr_data_ENQ,
       memory_xactor_f_wr_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [1 : 0] memory_xactor_f_wr_resp_D_IN, memory_xactor_f_wr_resp_D_OUT;
  wire memory_xactor_f_wr_resp_CLR,
       memory_xactor_f_wr_resp_DEQ,
       memory_xactor_f_wr_resp_EMPTY_N,
       memory_xactor_f_wr_resp_ENQ,
       memory_xactor_f_wr_resp_FULL_N;

  // ports of submodule riscv
  reg [33 : 0] riscv_memory_response_put;
  wire [119 : 0] riscv_mv_pmp_addr;
  wire [102 : 0] riscv_dump_get;
  wire [74 : 0] riscv_memory_request_get;
  wire [63 : 0] riscv_clint_mtime_c_mtime, riscv_counter_values_snd;
  wire [34 : 0] riscv_inst_response_put;
  wire [33 : 0] riscv_inst_request_get;
  wire [31 : 0] riscv_counter_values_fst, riscv_mv_pmp_cfg;
  wire [1 : 0] riscv_mv_curr_priv;
  wire riscv_EN_clint_msip,
       riscv_EN_clint_mtime,
       riscv_EN_clint_mtip,
       riscv_EN_dump_get,
       riscv_EN_ext_interrupt,
       riscv_EN_inst_request_get,
       riscv_EN_inst_response_put,
       riscv_EN_ma_event_loads,
       riscv_EN_ma_event_stores,
       riscv_EN_memory_request_get,
       riscv_EN_memory_response_put,
       riscv_RDY_dump_get,
       riscv_RDY_inst_request_get,
       riscv_RDY_inst_response_put,
       riscv_RDY_memory_request_get,
       riscv_clint_msip_intrpt,
       riscv_clint_mtip_intrpt,
       riscv_ext_interrupt_intrpt,
       riscv_ma_event_loads_e,
       riscv_ma_event_stores_e,
       riscv_mv_trap;

  // rule scheduling signals
  wire CAN_FIRE_RL_handle_atomic_readresponse,
       CAN_FIRE_RL_handle_atomic_writeresponse,
       CAN_FIRE_RL_handle_fetch_request,
       CAN_FIRE_RL_handle_fetch_response,
       CAN_FIRE_RL_handle_inst_access_fault,
       CAN_FIRE_RL_handle_memoryRead_response,
       CAN_FIRE_RL_handle_memoryWrite_response,
       CAN_FIRE_RL_handle_memory_request,
       CAN_FIRE_RL_update_epochs,
       CAN_FIRE_io_dump_get,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip_put,
       CAN_FIRE_sb_clint_mtime_put,
       CAN_FIRE_sb_clint_mtip_put,
       CAN_FIRE_sb_ext_interrupt_put,
       WILL_FIRE_RL_handle_atomic_readresponse,
       WILL_FIRE_RL_handle_atomic_writeresponse,
       WILL_FIRE_RL_handle_fetch_request,
       WILL_FIRE_RL_handle_fetch_response,
       WILL_FIRE_RL_handle_inst_access_fault,
       WILL_FIRE_RL_handle_memoryRead_response,
       WILL_FIRE_RL_handle_memoryWrite_response,
       WILL_FIRE_RL_handle_memory_request,
       WILL_FIRE_RL_update_epochs,
       WILL_FIRE_io_dump_get,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip_put,
       WILL_FIRE_sb_clint_mtime_put,
       WILL_FIRE_sb_clint_mtip_put,
       WILL_FIRE_sb_ext_interrupt_put;

  // inputs to muxes for submodule ports
  wire [36 : 0] MUX_memory_xactor_f_wr_addr_enq_1__VAL_1,
		MUX_memory_xactor_f_wr_addr_enq_1__VAL_2;
  wire [35 : 0] MUX_memory_xactor_f_wr_data_enq_1__VAL_1,
		MUX_memory_xactor_f_wr_data_enq_1__VAL_2;
  wire [34 : 0] MUX_riscv_inst_response_put_1__VAL_1,
		MUX_riscv_inst_response_put_1__VAL_2;
  wire [33 : 0] MUX_riscv_memory_response_put_1__VAL_1,
		MUX_riscv_memory_response_put_1__VAL_2,
		MUX_riscv_memory_response_put_1__VAL_3,
		MUX_riscv_memory_response_put_1__VAL_4;
  wire MUX_memory_xactor_f_wr_addr_enq_1__SEL_1,
       MUX_memory_xactor_f_wr_addr_enq_1__SEL_2,
       MUX_riscv_memory_response_put_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d19;
  reg TASK_testplusargs___d20;
  reg TASK_testplusargs___d21;
  reg [63 : 0] v__h3348;
  reg TASK_testplusargs___d31;
  reg TASK_testplusargs___d32;
  reg TASK_testplusargs___d33;
  reg [63 : 0] v__h3191;
  reg TASK_testplusargs___d61;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg [63 : 0] v__h3718;
  reg TASK_testplusargs___d81;
  reg TASK_testplusargs___d82;
  reg TASK_testplusargs___d83;
  reg [63 : 0] v__h3898;
  reg TASK_testplusargs___d133;
  reg TASK_testplusargs___d134;
  reg TASK_testplusargs___d135;
  reg [63 : 0] v__h6404;
  reg TASK_testplusargs___d141;
  reg TASK_testplusargs___d142;
  reg TASK_testplusargs___d143;
  reg [63 : 0] v__h6553;
  reg TASK_testplusargs___d151;
  reg TASK_testplusargs___d152;
  reg TASK_testplusargs___d153;
  reg [63 : 0] v__h5016;
  reg TASK_testplusargs___d195;
  reg TASK_testplusargs___d196;
  reg TASK_testplusargs___d197;
  reg [63 : 0] v__h7191;
  reg TASK_testplusargs___d221;
  reg TASK_testplusargs___d222;
  reg TASK_testplusargs___d223;
  reg [63 : 0] v__h7466;
  reg TASK_testplusargs___d247;
  reg TASK_testplusargs___d248;
  reg TASK_testplusargs___d249;
  reg [63 : 0] v__h7637;
  reg TASK_testplusargs___d301;
  reg TASK_testplusargs___d302;
  reg TASK_testplusargs___d303;
  reg [63 : 0] v__h8767;
  reg riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138;
  reg riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146;
  reg NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156;
  reg fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24;
  reg NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d67;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d69;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d71;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d76;
  reg TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d201;
  reg TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d203;
  reg TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d205;
  reg TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d210;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d227;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d229;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d231;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d236;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d253;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d254;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d255;
  reg TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d256;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d307;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d308;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d309;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d310;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] CASE_ff_mem_requestD_OUT_BITS_7_TO_6_0_IF_ff__ETC__q3,
	       w_wdata__h5214,
	       w_wdata__h8005;
  reg [3 : 0] write_strobe__h3969;
  wire [31 : 0] lv_data__h3534,
		memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177,
		pmpreq_address__h1967,
		pmpreq_address__h3998,
		put_data__h6780,
		put_data__h7368,
		put_data__h8650,
		put_inst__h3557,
		read_request_araddr__h4909;
  wire [15 : 0] memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q2;
  wire [7 : 0] memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q1;
  wire [6 : 0] fn_pmp_lookup___d109, fn_pmp_lookup___d17;
  wire [5 : 0] pmpreq_num_bytes__h3999;
  wire [4 : 0] lv_shift__h3533, lv_shift__h6759;
  wire [3 : 0] w_wstrb__h5215,
	       w_wstrb__h8006,
	       write_strobe___1__h6278,
	       write_strobe___1__h8015;
  wire [2 : 0] aw_awprot__h7942;
  wire [1 : 0] pmpreq_access_type__h4000;
  wire memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d270,
       memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d275,
       rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99,
       x_port1__read__h3984;

  // value method master_d_m_awvalid
  assign master_d_awvalid = memory_xactor_f_wr_addr_EMPTY_N ;

  // value method master_d_m_awaddr
  assign master_d_awaddr = memory_xactor_f_wr_addr_D_OUT[36:5] ;

  // value method master_d_m_awprot
  assign master_d_awprot = memory_xactor_f_wr_addr_D_OUT[4:2] ;

  // value method master_d_m_awsize
  assign master_d_awsize = memory_xactor_f_wr_addr_D_OUT[1:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_wvalid = memory_xactor_f_wr_data_EMPTY_N ;

  // value method master_d_m_wdata
  assign master_d_wdata = memory_xactor_f_wr_data_D_OUT[35:4] ;

  // value method master_d_m_wstrb
  assign master_d_wstrb = memory_xactor_f_wr_data_D_OUT[3:0] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_bready = memory_xactor_f_wr_resp_FULL_N ;

  // value method master_d_m_arvalid
  assign master_d_arvalid = memory_xactor_f_rd_addr_EMPTY_N ;

  // value method master_d_m_araddr
  assign master_d_araddr = memory_xactor_f_rd_addr_D_OUT[36:5] ;

  // value method master_d_m_arprot
  assign master_d_arprot = memory_xactor_f_rd_addr_D_OUT[4:2] ;

  // value method master_d_m_arsize
  assign master_d_arsize = memory_xactor_f_rd_addr_D_OUT[1:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_rready = memory_xactor_f_rd_data_FULL_N ;

  // value method master_i_m_awvalid
  assign master_i_awvalid = fetch_xactor_f_wr_addr_EMPTY_N ;

  // value method master_i_m_awaddr
  assign master_i_awaddr = fetch_xactor_f_wr_addr_D_OUT[36:5] ;

  // value method master_i_m_awprot
  assign master_i_awprot = fetch_xactor_f_wr_addr_D_OUT[4:2] ;

  // value method master_i_m_awsize
  assign master_i_awsize = fetch_xactor_f_wr_addr_D_OUT[1:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_wvalid = fetch_xactor_f_wr_data_EMPTY_N ;

  // value method master_i_m_wdata
  assign master_i_wdata = fetch_xactor_f_wr_data_D_OUT[35:4] ;

  // value method master_i_m_wstrb
  assign master_i_wstrb = fetch_xactor_f_wr_data_D_OUT[3:0] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_bready = fetch_xactor_f_wr_resp_FULL_N ;

  // value method master_i_m_arvalid
  assign master_i_arvalid = fetch_xactor_f_rd_addr_EMPTY_N ;

  // value method master_i_m_araddr
  assign master_i_araddr = fetch_xactor_f_rd_addr_D_OUT[36:5] ;

  // value method master_i_m_arprot
  assign master_i_arprot = fetch_xactor_f_rd_addr_D_OUT[4:2] ;

  // value method master_i_m_arsize
  assign master_i_arsize = fetch_xactor_f_rd_addr_D_OUT[1:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_rready = fetch_xactor_f_rd_data_FULL_N ;

  // action method sb_clint_msip_put
  assign RDY_sb_clint_msip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip_put = EN_sb_clint_msip_put ;

  // action method sb_clint_mtip_put
  assign RDY_sb_clint_mtip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip_put = EN_sb_clint_mtip_put ;

  // action method sb_clint_mtime_put
  assign RDY_sb_clint_mtime_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime_put = EN_sb_clint_mtime_put ;

  // action method sb_ext_interrupt_put
  assign RDY_sb_ext_interrupt_put = 1'd1 ;
  assign CAN_FIRE_sb_ext_interrupt_put = 1'd1 ;
  assign WILL_FIRE_sb_ext_interrupt_put = EN_sb_ext_interrupt_put ;

  // actionvalue method io_dump_get
  assign io_dump_get = riscv_dump_get ;
  assign RDY_io_dump_get = riscv_RDY_dump_get ;
  assign CAN_FIRE_io_dump_get = riscv_RDY_dump_get ;
  assign WILL_FIRE_io_dump_get = EN_io_dump_get ;

  // value method counter_values_fst
  assign counter_values_fst = riscv_counter_values_fst ;
  assign RDY_counter_values_fst = 1'd1 ;

  // value method counter_values_snd
  assign counter_values_snd = riscv_counter_values_snd ;
  assign RDY_counter_values_snd = 1'd1 ;

  // submodule fetch_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) fetch_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_addr_D_IN),
								 .ENQ(fetch_xactor_f_rd_addr_ENQ),
								 .DEQ(fetch_xactor_f_rd_addr_DEQ),
								 .CLR(fetch_xactor_f_rd_addr_CLR),
								 .D_OUT(fetch_xactor_f_rd_addr_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_addr_EMPTY_N));

  // submodule fetch_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) fetch_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_data_D_IN),
								 .ENQ(fetch_xactor_f_rd_data_ENQ),
								 .DEQ(fetch_xactor_f_rd_data_DEQ),
								 .CLR(fetch_xactor_f_rd_data_CLR),
								 .D_OUT(fetch_xactor_f_rd_data_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) fetch_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_addr_D_IN),
								 .ENQ(fetch_xactor_f_wr_addr_ENQ),
								 .DEQ(fetch_xactor_f_wr_addr_DEQ),
								 .CLR(fetch_xactor_f_wr_addr_CLR),
								 .D_OUT(fetch_xactor_f_wr_addr_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_addr_EMPTY_N));

  // submodule fetch_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) fetch_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_data_D_IN),
								 .ENQ(fetch_xactor_f_wr_data_ENQ),
								 .DEQ(fetch_xactor_f_wr_data_DEQ),
								 .CLR(fetch_xactor_f_wr_data_CLR),
								 .D_OUT(fetch_xactor_f_wr_data_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) fetch_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fetch_xactor_f_wr_resp_D_IN),
								.ENQ(fetch_xactor_f_wr_resp_ENQ),
								.DEQ(fetch_xactor_f_wr_resp_DEQ),
								.CLR(fetch_xactor_f_wr_resp_CLR),
								.D_OUT(),
								.FULL_N(fetch_xactor_f_wr_resp_FULL_N),
								.EMPTY_N());

  // submodule ff_atomic_state
  FIFO1 #(.width(32'd32), .guarded(1'd1)) ff_atomic_state(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_atomic_state_D_IN),
							  .ENQ(ff_atomic_state_ENQ),
							  .DEQ(ff_atomic_state_DEQ),
							  .CLR(ff_atomic_state_CLR),
							  .D_OUT(ff_atomic_state_D_OUT),
							  .FULL_N(ff_atomic_state_FULL_N),
							  .EMPTY_N(ff_atomic_state_EMPTY_N));

  // submodule ff_inst_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_inst_access_fault(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_inst_access_fault_D_IN),
							      .ENQ(ff_inst_access_fault_ENQ),
							      .DEQ(ff_inst_access_fault_DEQ),
							      .CLR(ff_inst_access_fault_CLR),
							      .D_OUT(ff_inst_access_fault_D_OUT),
							      .FULL_N(ff_inst_access_fault_FULL_N),
							      .EMPTY_N(ff_inst_access_fault_EMPTY_N));

  // submodule ff_inst_request
  FIFO2 #(.width(32'd34), .guarded(1'd1)) ff_inst_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_inst_request_D_IN),
							  .ENQ(ff_inst_request_ENQ),
							  .DEQ(ff_inst_request_DEQ),
							  .CLR(ff_inst_request_CLR),
							  .D_OUT(ff_inst_request_D_OUT),
							  .FULL_N(ff_inst_request_FULL_N),
							  .EMPTY_N(ff_inst_request_EMPTY_N));

  // submodule ff_mem_access_fault
  FIFO2 #(.width(32'd1), .guarded(1'd1)) ff_mem_access_fault(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_access_fault_D_IN),
							     .ENQ(ff_mem_access_fault_ENQ),
							     .DEQ(ff_mem_access_fault_DEQ),
							     .CLR(ff_mem_access_fault_CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ff_mem_request
  FIFO2 #(.width(32'd75), .guarded(1'd1)) ff_mem_request(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_mem_request_D_IN),
							 .ENQ(ff_mem_request_ENQ),
							 .DEQ(ff_mem_request_DEQ),
							 .CLR(ff_mem_request_CLR),
							 .D_OUT(ff_mem_request_D_OUT),
							 .FULL_N(ff_mem_request_FULL_N),
							 .EMPTY_N(ff_mem_request_EMPTY_N));

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr_D_IN),
								  .ENQ(memory_xactor_f_rd_addr_ENQ),
								  .DEQ(memory_xactor_f_rd_addr_DEQ),
								  .CLR(memory_xactor_f_rd_addr_CLR),
								  .D_OUT(memory_xactor_f_rd_addr_D_OUT),
								  .FULL_N(memory_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_addr_EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_data_D_IN),
								  .ENQ(memory_xactor_f_rd_data_ENQ),
								  .DEQ(memory_xactor_f_rd_data_DEQ),
								  .CLR(memory_xactor_f_rd_data_CLR),
								  .D_OUT(memory_xactor_f_rd_data_D_OUT),
								  .FULL_N(memory_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_data_EMPTY_N));

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd37), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr_D_IN),
								  .ENQ(memory_xactor_f_wr_addr_ENQ),
								  .DEQ(memory_xactor_f_wr_addr_DEQ),
								  .CLR(memory_xactor_f_wr_addr_CLR),
								  .D_OUT(memory_xactor_f_wr_addr_D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr_EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_data_D_IN),
								  .ENQ(memory_xactor_f_wr_data_ENQ),
								  .DEQ(memory_xactor_f_wr_data_DEQ),
								  .CLR(memory_xactor_f_wr_data_CLR),
								  .D_OUT(memory_xactor_f_wr_data_D_OUT),
								  .FULL_N(memory_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_data_EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp_D_IN),
								 .ENQ(memory_xactor_f_wr_resp_ENQ),
								 .DEQ(memory_xactor_f_wr_resp_DEQ),
								 .CLR(memory_xactor_f_wr_resp_CLR),
								 .D_OUT(memory_xactor_f_wr_resp_D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp_EMPTY_N));

  // submodule riscv
  mkriscv riscv(.resetpc(resetpc),
		.CLK(CLK),
		.RST_N(RST_N),
		.clint_msip_intrpt(riscv_clint_msip_intrpt),
		.clint_mtime_c_mtime(riscv_clint_mtime_c_mtime),
		.clint_mtip_intrpt(riscv_clint_mtip_intrpt),
		.ext_interrupt_intrpt(riscv_ext_interrupt_intrpt),
		.inst_response_put(riscv_inst_response_put),
		.ma_event_loads_e(riscv_ma_event_loads_e),
		.ma_event_stores_e(riscv_ma_event_stores_e),
		.memory_response_put(riscv_memory_response_put),
		.EN_inst_request_get(riscv_EN_inst_request_get),
		.EN_inst_response_put(riscv_EN_inst_response_put),
		.EN_memory_request_get(riscv_EN_memory_request_get),
		.EN_memory_response_put(riscv_EN_memory_response_put),
		.EN_clint_msip(riscv_EN_clint_msip),
		.EN_clint_mtip(riscv_EN_clint_mtip),
		.EN_clint_mtime(riscv_EN_clint_mtime),
		.EN_ext_interrupt(riscv_EN_ext_interrupt),
		.EN_dump_get(riscv_EN_dump_get),
		.EN_ma_event_loads(riscv_EN_ma_event_loads),
		.EN_ma_event_stores(riscv_EN_ma_event_stores),
		.inst_request_get(riscv_inst_request_get),
		.RDY_inst_request_get(riscv_RDY_inst_request_get),
		.RDY_inst_response_put(riscv_RDY_inst_response_put),
		.memory_request_get(riscv_memory_request_get),
		.RDY_memory_request_get(riscv_RDY_memory_request_get),
		.RDY_memory_response_put(),
		.RDY_clint_msip(),
		.RDY_clint_mtip(),
		.RDY_clint_mtime(),
		.RDY_ext_interrupt(),
		.dump_get(riscv_dump_get),
		.RDY_dump_get(riscv_RDY_dump_get),
		.mv_curr_priv(riscv_mv_curr_priv),
		.RDY_mv_curr_priv(),
		.mv_trap(riscv_mv_trap),
		.RDY_mv_trap(),
		.RDY_ma_event_loads(),
		.RDY_ma_event_stores(),
		.counter_values_fst(riscv_counter_values_fst),
		.RDY_counter_values_fst(),
		.counter_values_snd(riscv_counter_values_snd),
		.RDY_counter_values_snd(),
		.mv_pmp_cfg(riscv_mv_pmp_cfg),
		.RDY_mv_pmp_cfg(),
		.mv_pmp_addr(riscv_mv_pmp_addr),
		.RDY_mv_pmp_addr());

  // rule RL_update_epochs
  assign CAN_FIRE_RL_update_epochs = riscv_mv_trap ;
  assign WILL_FIRE_RL_update_epochs = riscv_mv_trap ;

  // rule RL_handle_fetch_request
  assign CAN_FIRE_RL_handle_fetch_request =
	     riscv_RDY_inst_request_get && ff_inst_access_fault_FULL_N &&
	     ff_inst_request_FULL_N &&
	     fetch_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_handle_fetch_request =
	     CAN_FIRE_RL_handle_fetch_request ;

  // rule RL_handle_fetch_response
  assign CAN_FIRE_RL_handle_fetch_response =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     fetch_xactor_f_rd_data_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     !ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_fetch_response =
	     CAN_FIRE_RL_handle_fetch_response ;

  // rule RL_handle_inst_access_fault
  assign CAN_FIRE_RL_handle_inst_access_fault =
	     riscv_RDY_inst_response_put && ff_inst_access_fault_EMPTY_N &&
	     ff_inst_request_EMPTY_N &&
	     ff_inst_access_fault_D_OUT ;
  assign WILL_FIRE_RL_handle_inst_access_fault =
	     CAN_FIRE_RL_handle_inst_access_fault ;

  // rule RL_handle_memory_request
  assign CAN_FIRE_RL_handle_memory_request =
	     riscv_RDY_memory_request_get && ff_mem_request_FULL_N &&
	     memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     memory_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_handle_memory_request =
	     CAN_FIRE_RL_handle_memory_request ;

  // rule RL_handle_memoryRead_response
  assign CAN_FIRE_RL_handle_memoryRead_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_rd_data_EMPTY_N &&
	     ff_mem_request_D_OUT[10:9] == 2'd0 ;
  assign WILL_FIRE_RL_handle_memoryRead_response =
	     CAN_FIRE_RL_handle_memoryRead_response ;

  // rule RL_handle_memoryWrite_response
  assign CAN_FIRE_RL_handle_memoryWrite_response =
	     ff_mem_request_EMPTY_N && memory_xactor_f_wr_resp_EMPTY_N &&
	     ff_mem_request_D_OUT[10:9] == 2'd1 ;
  assign WILL_FIRE_RL_handle_memoryWrite_response =
	     CAN_FIRE_RL_handle_memoryWrite_response ;

  // rule RL_handle_atomic_readresponse
  assign CAN_FIRE_RL_handle_atomic_readresponse =
	     ff_mem_request_EMPTY_N && memory_xactor_f_rd_data_EMPTY_N &&
	     memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     ff_atomic_state_FULL_N &&
	     ff_mem_request_D_OUT[10:9] == 2'd2 &&
	     !ff_atomic_state_EMPTY_N ;
  assign WILL_FIRE_RL_handle_atomic_readresponse =
	     CAN_FIRE_RL_handle_atomic_readresponse &&
	     !WILL_FIRE_RL_handle_memory_request ;

  // rule RL_handle_atomic_writeresponse
  assign CAN_FIRE_RL_handle_atomic_writeresponse =
	     ff_mem_request_EMPTY_N && memory_xactor_f_wr_resp_EMPTY_N &&
	     ff_atomic_state_EMPTY_N &&
	     ff_mem_request_D_OUT[10:9] == 2'd2 ;
  assign WILL_FIRE_RL_handle_atomic_writeresponse =
	     CAN_FIRE_RL_handle_atomic_writeresponse ;

  // inputs to muxes for submodule ports
  assign MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0 ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__SEL_2 =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	     riscv_memory_request_get[10:9] == 2'd1 ;
  assign MUX_riscv_memory_response_put_1__SEL_1 =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0 ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__VAL_1 =
	     { ff_mem_request_D_OUT[74:43],
	       aw_awprot__h7942,
	       ff_mem_request_D_OUT[7:6] } ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__VAL_2 =
	     { read_request_araddr__h4909,
	       3'd1,
	       riscv_memory_request_get[7:6] } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_1 =
	     { w_wdata__h8005, w_wstrb__h8006 } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_2 =
	     { w_wdata__h5214, w_wstrb__h5215 } ;
  assign MUX_riscv_inst_response_put_1__VAL_1 =
	     { put_inst__h3557,
	       ff_inst_request_D_OUT[1:0],
	       fetch_xactor_f_rd_data_D_OUT[33:32] != 2'd0 } ;
  assign MUX_riscv_inst_response_put_1__VAL_2 =
	     { ff_inst_request_D_OUT, 1'd1 } ;
  assign MUX_riscv_memory_response_put_1__VAL_1 =
	     { ff_mem_request_D_OUT[74:43],
	       memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0,
	       ff_mem_request_D_OUT[5] } ;
  assign MUX_riscv_memory_response_put_1__VAL_2 =
	     { put_data__h6780,
	       memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0,
	       ff_mem_request_D_OUT[5] } ;
  assign MUX_riscv_memory_response_put_1__VAL_3 =
	     { put_data__h7368,
	       memory_xactor_f_wr_resp_D_OUT != 2'd0,
	       ff_mem_request_D_OUT[5] } ;
  assign MUX_riscv_memory_response_put_1__VAL_4 =
	     { put_data__h8650,
	       memory_xactor_f_wr_resp_D_OUT != 2'd0,
	       ff_mem_request_D_OUT[5] } ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = x_port1__read__h3984 ;
  assign rg_wEpoch_EN = 1'b1 ;

  // submodule fetch_xactor_f_rd_addr
  assign fetch_xactor_f_rd_addr_D_IN =
	     { riscv_inst_request_get[33:2], aw_awprot__h7942, 2'd2 } ;
  assign fetch_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_handle_fetch_request && !fn_pmp_lookup___d17[6] ;
  assign fetch_xactor_f_rd_addr_DEQ =
	     fetch_xactor_f_rd_addr_EMPTY_N && master_i_m_arready_arready ;
  assign fetch_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_rd_data
  assign fetch_xactor_f_rd_data_D_IN =
	     { master_i_m_rvalid_rresp, master_i_m_rvalid_rdata } ;
  assign fetch_xactor_f_rd_data_ENQ =
	     master_i_m_rvalid_rvalid && fetch_xactor_f_rd_data_FULL_N ;
  assign fetch_xactor_f_rd_data_DEQ = CAN_FIRE_RL_handle_fetch_response ;
  assign fetch_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_addr
  assign fetch_xactor_f_wr_addr_D_IN = 37'h0 ;
  assign fetch_xactor_f_wr_addr_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_addr_DEQ =
	     fetch_xactor_f_wr_addr_EMPTY_N && master_i_m_awready_awready ;
  assign fetch_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_data
  assign fetch_xactor_f_wr_data_D_IN = 36'h0 ;
  assign fetch_xactor_f_wr_data_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_data_DEQ =
	     fetch_xactor_f_wr_data_EMPTY_N && master_i_m_wready_wready ;
  assign fetch_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_resp
  assign fetch_xactor_f_wr_resp_D_IN = master_i_m_bvalid_bresp ;
  assign fetch_xactor_f_wr_resp_ENQ =
	     master_i_m_bvalid_bvalid && fetch_xactor_f_wr_resp_FULL_N ;
  assign fetch_xactor_f_wr_resp_DEQ = 1'b0 ;
  assign fetch_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule ff_atomic_state
  assign ff_atomic_state_D_IN =
	     memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 ;
  assign ff_atomic_state_ENQ = MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 ;
  assign ff_atomic_state_DEQ = CAN_FIRE_RL_handle_atomic_writeresponse ;
  assign ff_atomic_state_CLR = 1'b0 ;

  // submodule ff_inst_access_fault
  assign ff_inst_access_fault_D_IN = fn_pmp_lookup___d17[6] ;
  assign ff_inst_access_fault_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_access_fault_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_access_fault_CLR = 1'b0 ;

  // submodule ff_inst_request
  assign ff_inst_request_D_IN = riscv_inst_request_get ;
  assign ff_inst_request_ENQ = CAN_FIRE_RL_handle_fetch_request ;
  assign ff_inst_request_DEQ =
	     WILL_FIRE_RL_handle_inst_access_fault ||
	     WILL_FIRE_RL_handle_fetch_response ;
  assign ff_inst_request_CLR = 1'b0 ;

  // submodule ff_mem_access_fault
  assign ff_mem_access_fault_D_IN = 1'b0 ;
  assign ff_mem_access_fault_ENQ = 1'b0 ;
  assign ff_mem_access_fault_DEQ = 1'b0 ;
  assign ff_mem_access_fault_CLR = 1'b0 ;

  // submodule ff_mem_request
  assign ff_mem_request_D_IN =
	     { read_request_araddr__h4909,
	       w_wdata__h5214,
	       riscv_memory_request_get[10:0] } ;
  assign ff_mem_request_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 ;
  assign ff_mem_request_DEQ =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0 ||
	     WILL_FIRE_RL_handle_atomic_writeresponse ||
	     WILL_FIRE_RL_handle_memoryWrite_response ||
	     WILL_FIRE_RL_handle_memoryRead_response ;
  assign ff_mem_request_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_addr
  assign memory_xactor_f_rd_addr_D_IN =
	     MUX_memory_xactor_f_wr_addr_enq_1__VAL_2 ;
  assign memory_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	     riscv_memory_request_get[10:9] != 2'd1 ;
  assign memory_xactor_f_rd_addr_DEQ =
	     memory_xactor_f_rd_addr_EMPTY_N && master_d_m_arready_arready ;
  assign memory_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data_D_IN =
	     { master_d_m_rvalid_rresp, master_d_m_rvalid_rdata } ;
  assign memory_xactor_f_rd_data_ENQ =
	     master_d_m_rvalid_rvalid && memory_xactor_f_rd_data_FULL_N ;
  assign memory_xactor_f_rd_data_DEQ =
	     WILL_FIRE_RL_handle_atomic_readresponse ||
	     WILL_FIRE_RL_handle_memoryRead_response ;
  assign memory_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr_D_IN =
	     MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 ?
	       MUX_memory_xactor_f_wr_addr_enq_1__VAL_1 :
	       MUX_memory_xactor_f_wr_addr_enq_1__VAL_2 ;
  assign memory_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0 ||
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	     riscv_memory_request_get[10:9] == 2'd1 ;
  assign memory_xactor_f_wr_addr_DEQ =
	     memory_xactor_f_wr_addr_EMPTY_N && master_d_m_awready_awready ;
  assign memory_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  assign memory_xactor_f_wr_data_D_IN =
	     MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 ?
	       MUX_memory_xactor_f_wr_data_enq_1__VAL_1 :
	       MUX_memory_xactor_f_wr_data_enq_1__VAL_2 ;
  assign memory_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0 ||
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	     riscv_memory_request_get[10:9] == 2'd1 ;
  assign memory_xactor_f_wr_data_DEQ =
	     memory_xactor_f_wr_data_EMPTY_N && master_d_m_wready_wready ;
  assign memory_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp_D_IN = master_d_m_bvalid_bresp ;
  assign memory_xactor_f_wr_resp_ENQ =
	     master_d_m_bvalid_bvalid && memory_xactor_f_wr_resp_FULL_N ;
  assign memory_xactor_f_wr_resp_DEQ =
	     WILL_FIRE_RL_handle_atomic_writeresponse ||
	     WILL_FIRE_RL_handle_memoryWrite_response ;
  assign memory_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_clint_msip_intrpt = sb_clint_msip_put ;
  assign riscv_clint_mtime_c_mtime = sb_clint_mtime_put ;
  assign riscv_clint_mtip_intrpt = sb_clint_mtip_put ;
  assign riscv_ext_interrupt_intrpt = sb_ext_interrupt_put ;
  assign riscv_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ?
	       MUX_riscv_inst_response_put_1__VAL_1 :
	       MUX_riscv_inst_response_put_1__VAL_2 ;
  assign riscv_ma_event_loads_e = 1'd1 ;
  assign riscv_ma_event_stores_e = 1'd1 ;
  always@(MUX_riscv_memory_response_put_1__SEL_1 or
	  MUX_riscv_memory_response_put_1__VAL_1 or
	  WILL_FIRE_RL_handle_memoryRead_response or
	  MUX_riscv_memory_response_put_1__VAL_2 or
	  WILL_FIRE_RL_handle_memoryWrite_response or
	  MUX_riscv_memory_response_put_1__VAL_3 or
	  WILL_FIRE_RL_handle_atomic_writeresponse or
	  MUX_riscv_memory_response_put_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_riscv_memory_response_put_1__SEL_1:
	  riscv_memory_response_put = MUX_riscv_memory_response_put_1__VAL_1;
      WILL_FIRE_RL_handle_memoryRead_response:
	  riscv_memory_response_put = MUX_riscv_memory_response_put_1__VAL_2;
      WILL_FIRE_RL_handle_memoryWrite_response:
	  riscv_memory_response_put = MUX_riscv_memory_response_put_1__VAL_3;
      WILL_FIRE_RL_handle_atomic_writeresponse:
	  riscv_memory_response_put = MUX_riscv_memory_response_put_1__VAL_4;
      default: riscv_memory_response_put =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign riscv_EN_inst_request_get = CAN_FIRE_RL_handle_fetch_request ;
  assign riscv_EN_inst_response_put =
	     WILL_FIRE_RL_handle_fetch_response ||
	     WILL_FIRE_RL_handle_inst_access_fault ;
  assign riscv_EN_memory_request_get = CAN_FIRE_RL_handle_memory_request ;
  assign riscv_EN_memory_response_put =
	     WILL_FIRE_RL_handle_atomic_readresponse &&
	     memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0 ||
	     WILL_FIRE_RL_handle_memoryRead_response ||
	     WILL_FIRE_RL_handle_memoryWrite_response ||
	     WILL_FIRE_RL_handle_atomic_writeresponse ;
  assign riscv_EN_clint_msip = EN_sb_clint_msip_put ;
  assign riscv_EN_clint_mtip = EN_sb_clint_mtip_put ;
  assign riscv_EN_clint_mtime = EN_sb_clint_mtime_put ;
  assign riscv_EN_ext_interrupt = EN_sb_ext_interrupt_put ;
  assign riscv_EN_dump_get = EN_io_dump_get ;
  assign riscv_EN_ma_event_loads =
	     WILL_FIRE_RL_handle_memory_request &&
	     rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	     riscv_memory_request_get[10:9] != 2'd1 ;
  assign riscv_EN_ma_event_stores = MUX_memory_xactor_f_wr_addr_enq_1__SEL_2 ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_1(.fn_pmp_lookup_req({ pmpreq_address__h1967,
								     8'd18 }),
						.fn_pmp_lookup_priv(riscv_mv_curr_priv),
						.fn_pmp_lookup_pmpcfg(riscv_mv_pmp_cfg),
						.fn_pmp_lookup_pmpaddr(riscv_mv_pmp_addr),
						.fn_pmp_lookup(fn_pmp_lookup___d17));
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ pmpreq_address__h3998,
								     pmpreq_num_bytes__h3999,
								     pmpreq_access_type__h4000 }),
						.fn_pmp_lookup_priv(riscv_mv_curr_priv),
						.fn_pmp_lookup_pmpcfg(riscv_mv_pmp_cfg),
						.fn_pmp_lookup_pmpaddr(riscv_mv_pmp_addr),
						.fn_pmp_lookup(fn_pmp_lookup___d109));
  assign aw_awprot__h7942 = { 2'd0, riscv_mv_curr_priv[1] } ;
  assign lv_data__h3534 =
	     fetch_xactor_f_rd_data_D_OUT[31:0] >> lv_shift__h3533 ;
  assign lv_shift__h3533 = { ff_inst_request_D_OUT[3:2], 3'd0 } ;
  assign lv_shift__h6759 = { ff_mem_request_D_OUT[44:43], 3'd0 } ;
  assign memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 =
	     memory_xactor_f_rd_data_D_OUT[31:0] >> lv_shift__h6759 ;
  assign memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d270 =
	     memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 <=
	     ff_mem_request_D_OUT[42:11] ;
  assign memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d275 =
	     (memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 ^
	      32'h80000000) <=
	     (ff_mem_request_D_OUT[42:11] ^ 32'h80000000) ;
  assign memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q1 =
	     memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177[7:0] ;
  assign memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q2 =
	     memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177[15:0] ;
  assign pmpreq_access_type__h4000 =
	     (riscv_memory_request_get[10:9] == 2'd0) ?
	       riscv_memory_request_get[10:9] :
	       2'd1 ;
  assign pmpreq_address__h1967 = riscv_inst_request_get[33:2] ;
  assign pmpreq_address__h3998 = riscv_memory_request_get[74:43] ;
  assign pmpreq_num_bytes__h3999 = { 4'd0, riscv_memory_request_get[7:6] } ;
  assign put_data__h6780 =
	     (memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0) ?
	       CASE_ff_mem_requestD_OUT_BITS_7_TO_6_0_IF_ff__ETC__q3 :
	       ff_mem_request_D_OUT[74:43] ;
  assign put_data__h7368 =
	     (memory_xactor_f_wr_resp_D_OUT == 2'd0) ?
	       32'd0 :
	       ff_mem_request_D_OUT[74:43] ;
  assign put_data__h8650 =
	     (memory_xactor_f_wr_resp_D_OUT == 2'd0) ?
	       ff_atomic_state_D_OUT :
	       ff_mem_request_D_OUT[74:43] ;
  assign put_inst__h3557 =
	     (fetch_xactor_f_rd_data_D_OUT[33:32] == 2'd0) ?
	       lv_data__h3534 :
	       ff_inst_request_D_OUT[33:2] ;
  assign read_request_araddr__h4909 =
	     fn_pmp_lookup___d109[6] ?
	       32'd0 :
	       riscv_memory_request_get[74:43] ;
  assign rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 =
	     x_port1__read__h3984 == riscv_memory_request_get[5] ;
  assign w_wstrb__h5215 =
	     (riscv_memory_request_get[8:6] == 3'd3) ?
	       write_strobe__h3969 :
	       write_strobe___1__h6278 ;
  assign w_wstrb__h8006 =
	     (ff_mem_request_D_OUT[8:6] == 3'd3) ?
	       4'hF :
	       write_strobe___1__h8015 ;
  assign write_strobe___1__h6278 =
	     write_strobe__h3969 << riscv_memory_request_get[44:43] ;
  assign write_strobe___1__h8015 = 4'hF << ff_mem_request_D_OUT[44:43] ;
  assign x_port1__read__h3984 = riscv_mv_trap ? ~rg_wEpoch : rg_wEpoch ;
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[7:6])
      2'd0: w_wdata__h5214 = {4{riscv_memory_request_get[18:11]}};
      2'd1: w_wdata__h5214 = {2{riscv_memory_request_get[26:11]}};
      default: w_wdata__h5214 = riscv_memory_request_get[42:11];
    endcase
  end
  always@(riscv_memory_request_get)
  begin
    case (riscv_memory_request_get[8:6])
      3'd0: write_strobe__h3969 = 4'b0001;
      3'd1: write_strobe__h3969 = 4'b0011;
      default: write_strobe__h3969 = 4'hF;
    endcase
  end
  always@(ff_mem_request_D_OUT or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q1 or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q2)
  begin
    case (ff_mem_request_D_OUT[7:6])
      2'd0:
	  CASE_ff_mem_requestD_OUT_BITS_7_TO_6_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[8] ?
		{ 24'd0,
		  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177[7:0] } :
		{ {24{memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q1[7]}},
		  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q1 };
      2'd1:
	  CASE_ff_mem_requestD_OUT_BITS_7_TO_6_0_IF_ff__ETC__q3 =
	      ff_mem_request_D_OUT[8] ?
		{ 16'd0,
		  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177[15:0] } :
		{ {16{memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q2[15]}},
		  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC__q2 };
      default: CASE_ff_mem_requestD_OUT_BITS_7_TO_6_0_IF_ff__ETC__q3 =
		   memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177;
    endcase
  end
  always@(ff_mem_request_D_OUT or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d275 or
	  memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d270)
  begin
    case (ff_mem_request_D_OUT[3:0])
      4'b0:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 +
	      ff_mem_request_D_OUT[42:11];
      4'b0010:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 ^
	      ff_mem_request_D_OUT[42:11];
      4'b0011: w_wdata__h8005 = ff_mem_request_D_OUT[42:11];
      4'b0100:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 |
	      ff_mem_request_D_OUT[42:11];
      4'b0110:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 &
	      ff_mem_request_D_OUT[42:11];
      4'b1000:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d275 ?
		memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 :
		ff_mem_request_D_OUT[42:11];
      4'b1010:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d275 ?
		ff_mem_request_D_OUT[42:11] :
		memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177;
      4'b1100:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d270 ?
		memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177 :
		ff_mem_request_D_OUT[42:11];
      4'b1110:
	  w_wdata__h8005 =
	      memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d270 ?
		ff_mem_request_D_OUT[42:11] :
		memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177;
      default: w_wdata__h8005 =
		   memory_xactor_f_rd_data_first__68_BITS_31_TO_0_ETC___d177;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d19 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d20 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d21 = $test$plusargs("l0");
	  #0;
	end
    fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24 =
	fn_pmp_lookup___d17[6] &&
	(TASK_testplusargs___d19 ||
	 TASK_testplusargs___d20 && TASK_testplusargs___d21);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && fn_pmp_lookup___d17[6])
	begin
	  v__h3348 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("[%10d", v__h3348, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("CORE : Fetch Request is Faulty: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("InstRequest { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("'h%h", riscv_inst_request_get[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("'h%h", riscv_inst_request_get[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  fn_pmp_lookup_7_BIT_6_8_AND_TASK_testplusargs__ETC___d24)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && !fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d31 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && !fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d32 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && !fn_pmp_lookup___d17[6])
	begin
	  TASK_testplusargs___d33 = $test$plusargs("l0");
	  #0;
	end
    NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36 =
	!fn_pmp_lookup___d17[6] &&
	(TASK_testplusargs___d31 ||
	 TASK_testplusargs___d32 && TASK_testplusargs___d33);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request && !fn_pmp_lookup___d17[6])
	begin
	  v__h3191 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("[%10d", v__h3191, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("CORE : Fetch Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("'h%h", riscv_inst_request_get[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("'h%h", aw_awprot__h7942);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("'h%h", 2'd2, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_request &&
	  NOT_fn_pmp_lookup_7_BIT_6_8_7_AND_TASK_testplu_ETC___d36)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d61 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d67 =
	(TASK_testplusargs___d61 ||
	 TASK_testplusargs___d62 && TASK_testplusargs___d63) &&
	fetch_xactor_f_rd_data_D_OUT[33:32] == 2'd0;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d69 =
	(TASK_testplusargs___d61 ||
	 TASK_testplusargs___d62 && TASK_testplusargs___d63) &&
	fetch_xactor_f_rd_data_D_OUT[33:32] == 2'd1;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d71 =
	(TASK_testplusargs___d61 ||
	 TASK_testplusargs___d62 && TASK_testplusargs___d63) &&
	fetch_xactor_f_rd_data_D_OUT[33:32] == 2'd2;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d76 =
	(TASK_testplusargs___d61 ||
	 TASK_testplusargs___d62 && TASK_testplusargs___d63) &&
	fetch_xactor_f_rd_data_D_OUT[33:32] != 2'd0 &&
	fetch_xactor_f_rd_data_D_OUT[33:32] != 2'd1 &&
	fetch_xactor_f_rd_data_D_OUT[33:32] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response)
	begin
	  v__h3718 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("[%10d", v__h3718, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("CORE : Fetch Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d67)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d69)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d71)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d76)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("'h%h", fetch_xactor_f_rd_data_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_fetch_response &&
	  (TASK_testplusargs___d61 ||
	   TASK_testplusargs___d62 && TASK_testplusargs___d63))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d81 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d82 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  TASK_testplusargs___d83 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault)
	begin
	  v__h3898 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d81 ||
	   TASK_testplusargs___d82 && TASK_testplusargs___d83))
	$write("[%10d", v__h3898, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d81 ||
	   TASK_testplusargs___d82 && TASK_testplusargs___d83))
	$write("CORE : Fetch Access Fault ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_inst_access_fault &&
	  (TASK_testplusargs___d81 ||
	   TASK_testplusargs___d82 && TASK_testplusargs___d83))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d133 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d134 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d135 = $test$plusargs("l0 ");
	  #0;
	end
    riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138 =
	riscv_memory_request_get[10:9] == 2'd1 &&
	(TASK_testplusargs___d133 ||
	 TASK_testplusargs___d134 && TASK_testplusargs___d135);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  v__h6404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("[%10d", v__h6404, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("CORE : Memory write Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("'h%h", read_request_araddr__h4909);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("'h%h", 3'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("'h%h", riscv_memory_request_get[7:6], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d138)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d141 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d142 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  TASK_testplusargs___d143 = $test$plusargs("l0 ");
	  #0;
	end
    riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146 =
	riscv_memory_request_get[10:9] == 2'd1 &&
	(TASK_testplusargs___d141 ||
	 TASK_testplusargs___d142 && TASK_testplusargs___d143);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] == 2'd1)
	begin
	  v__h6553 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("[%10d", v__h6553, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("CORE : Memory write Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("'h%h", w_wdata__h5214);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("'h%h", w_wstrb__h5215, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get_7_BITS_10_TO_9_00_EQ__ETC___d146)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] != 2'd1)
	begin
	  TASK_testplusargs___d151 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] != 2'd1)
	begin
	  TASK_testplusargs___d152 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] != 2'd1)
	begin
	  TASK_testplusargs___d153 = $test$plusargs("l0");
	  #0;
	end
    NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156 =
	riscv_memory_request_get[10:9] != 2'd1 &&
	(TASK_testplusargs___d151 ||
	 TASK_testplusargs___d152 && TASK_testplusargs___d153);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  riscv_memory_request_get[10:9] != 2'd1)
	begin
	  v__h5016 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("[%10d", v__h5016, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("CORE : Memory Read Request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("'h%h", read_request_araddr__h4909);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("'h%h", 3'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("'h%h", riscv_memory_request_get[7:6], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memory_request &&
	  rg_wEpoch_port1__read__6_EQ_riscv_memory_reque_ETC___d99 &&
	  NOT_riscv_memory_request_get_7_BITS_10_TO_9_00_ETC___d156)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d195 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d196 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  TASK_testplusargs___d197 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d201 =
	(TASK_testplusargs___d195 ||
	 TASK_testplusargs___d196 && TASK_testplusargs___d197) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0;
    TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d203 =
	(TASK_testplusargs___d195 ||
	 TASK_testplusargs___d196 && TASK_testplusargs___d197) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd1;
    TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d205 =
	(TASK_testplusargs___d195 ||
	 TASK_testplusargs___d196 && TASK_testplusargs___d197) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd2;
    TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d210 =
	(TASK_testplusargs___d195 ||
	 TASK_testplusargs___d196 && TASK_testplusargs___d197) &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0 &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd1 &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response)
	begin
	  v__h7191 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("[%10d", v__h7191, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("CORE : Memory Read Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d201)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d203)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d205)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  TASK_testplusargs_95_OR_TASK_testplusargs_96_A_ETC___d210)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryRead_response &&
	  (TASK_testplusargs___d195 ||
	   TASK_testplusargs___d196 && TASK_testplusargs___d197))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d221 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d222 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  TASK_testplusargs___d223 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d227 =
	(TASK_testplusargs___d221 ||
	 TASK_testplusargs___d222 && TASK_testplusargs___d223) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd0;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d229 =
	(TASK_testplusargs___d221 ||
	 TASK_testplusargs___d222 && TASK_testplusargs___d223) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd1;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d231 =
	(TASK_testplusargs___d221 ||
	 TASK_testplusargs___d222 && TASK_testplusargs___d223) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd2;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d236 =
	(TASK_testplusargs___d221 ||
	 TASK_testplusargs___d222 && TASK_testplusargs___d223) &&
	memory_xactor_f_wr_resp_D_OUT != 2'd0 &&
	memory_xactor_f_wr_resp_D_OUT != 2'd1 &&
	memory_xactor_f_wr_resp_D_OUT != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response)
	begin
	  v__h7466 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write("[%10d", v__h7466, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write("CORE : Memory Write Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d227)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d229)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d231)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d236)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_memoryWrite_response &&
	  (TASK_testplusargs___d221 ||
	   TASK_testplusargs___d222 && TASK_testplusargs___d223))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse)
	begin
	  TASK_testplusargs___d247 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse)
	begin
	  TASK_testplusargs___d248 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse)
	begin
	  TASK_testplusargs___d249 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d253 =
	(TASK_testplusargs___d247 ||
	 TASK_testplusargs___d248 && TASK_testplusargs___d249) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd0;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d254 =
	(TASK_testplusargs___d247 ||
	 TASK_testplusargs___d248 && TASK_testplusargs___d249) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd1;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d255 =
	(TASK_testplusargs___d247 ||
	 TASK_testplusargs___d248 && TASK_testplusargs___d249) &&
	memory_xactor_f_rd_data_D_OUT[33:32] == 2'd2;
    TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d256 =
	(TASK_testplusargs___d247 ||
	 TASK_testplusargs___d248 && TASK_testplusargs___d249) &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd0 &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd1 &&
	memory_xactor_f_rd_data_D_OUT[33:32] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse)
	begin
	  v__h7637 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("[%10d", v__h7637, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("CORE : Atomic Read Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d253)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d254)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d255)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  TASK_testplusargs_47_OR_TASK_testplusargs_48_A_ETC___d256)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_readresponse &&
	  (TASK_testplusargs___d247 ||
	   TASK_testplusargs___d248 && TASK_testplusargs___d249))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse)
	begin
	  TASK_testplusargs___d301 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse)
	begin
	  TASK_testplusargs___d302 = $test$plusargs("meclass");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse)
	begin
	  TASK_testplusargs___d303 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d307 =
	(TASK_testplusargs___d301 ||
	 TASK_testplusargs___d302 && TASK_testplusargs___d303) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd0;
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d308 =
	(TASK_testplusargs___d301 ||
	 TASK_testplusargs___d302 && TASK_testplusargs___d303) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd1;
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d309 =
	(TASK_testplusargs___d301 ||
	 TASK_testplusargs___d302 && TASK_testplusargs___d303) &&
	memory_xactor_f_wr_resp_D_OUT == 2'd2;
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d310 =
	(TASK_testplusargs___d301 ||
	 TASK_testplusargs___d302 && TASK_testplusargs___d303) &&
	memory_xactor_f_wr_resp_D_OUT != 2'd0 &&
	memory_xactor_f_wr_resp_D_OUT != 2'd1 &&
	memory_xactor_f_wr_resp_D_OUT != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse)
	begin
	  v__h8767 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("[%10d", v__h8767, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("CORE : Atomic Write Response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d307)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d308)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d309)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d310)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_atomic_writeresponse &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkeclass_axi4lite

