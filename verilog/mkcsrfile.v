//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eba)
//
// On Fri Mar  7 14:49:27 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// read_csr                       O    64
// RDY_read_csr                   O     1 const
// RDY_write_csr                  O     1 const
// upd_on_ret                     O    64
// RDY_upd_on_ret                 O     1 const
// upd_on_trap                    O    64
// RDY_upd_on_trap                O     1 const
// RDY_incr_minstret              O     1 const
// mv_csr_decode                  O   152
// RDY_mv_csr_decode              O     1 const
// mv_csr_misa_c                  O     1 reg
// RDY_mv_csr_misa_c              O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// csr_mstatus                    O    64
// RDY_csr_mstatus                O     1 const
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// RDY_ext_interrupt              O     1 const
// mv_interrupt                   O     1
// mv_pmp_cfg                     O    32 reg
// RDY_mv_pmp_cfg                 O     1 const
// mv_pmp_addr                    O   120 reg
// RDY_mv_pmp_addr                O     1 const
// mv_trigger_data1               O    44 reg
// RDY_mv_trigger_data1           O     1 const
// mv_trigger_data2               O   128 reg
// RDY_mv_trigger_data2           O     1 const
// mv_trigger_enable              O     2
// RDY_mv_trigger_enable          O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_addr                  I    12
// write_csr_addr                 I    12
// write_csr_word                 I    64
// write_csr_lpc                  I     2
// upd_on_ret_prv                 I     2
// upd_on_trap_cause              I     6
// upd_on_trap_pc                 I    64
// upd_on_trap_tval               I    64
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// ext_interrupt_ex_i             I     1 reg
// EN_write_csr                   I     1
// EN_incr_minstret               I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_ext_interrupt               I     1
// EN_read_csr                    I     1 unused
// EN_upd_on_ret                  I     1
// EN_upd_on_trap                 I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_addr -> read_csr
//   upd_on_ret_prv -> upd_on_ret
//   upd_on_trap_cause -> upd_on_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcsrfile(CLK,
		 RST_N,

		 read_csr_addr,
		 EN_read_csr,
		 read_csr,
		 RDY_read_csr,

		 write_csr_addr,
		 write_csr_word,
		 write_csr_lpc,
		 EN_write_csr,
		 RDY_write_csr,

		 upd_on_ret_prv,
		 EN_upd_on_ret,
		 upd_on_ret,
		 RDY_upd_on_ret,

		 upd_on_trap_cause,
		 upd_on_trap_pc,
		 upd_on_trap_tval,
		 EN_upd_on_trap,
		 upd_on_trap,
		 RDY_upd_on_trap,

		 EN_incr_minstret,
		 RDY_incr_minstret,

		 mv_csr_decode,
		 RDY_mv_csr_decode,

		 mv_csr_misa_c,
		 RDY_mv_csr_misa_c,

		 mv_curr_priv,
		 RDY_mv_curr_priv,

		 csr_mstatus,
		 RDY_csr_mstatus,

		 clint_msip_intrpt,
		 EN_clint_msip,
		 RDY_clint_msip,

		 clint_mtip_intrpt,
		 EN_clint_mtip,
		 RDY_clint_mtip,

		 clint_mtime_c_mtime,
		 EN_clint_mtime,
		 RDY_clint_mtime,

		 ext_interrupt_ex_i,
		 EN_ext_interrupt,
		 RDY_ext_interrupt,

		 mv_interrupt,

		 mv_pmp_cfg,
		 RDY_mv_pmp_cfg,

		 mv_pmp_addr,
		 RDY_mv_pmp_addr,

		 mv_trigger_data1,
		 RDY_mv_trigger_data1,

		 mv_trigger_data2,
		 RDY_mv_trigger_data2,

		 mv_trigger_enable,
		 RDY_mv_trigger_enable);
  input  CLK;
  input  RST_N;

  // actionvalue method read_csr
  input  [11 : 0] read_csr_addr;
  input  EN_read_csr;
  output [63 : 0] read_csr;
  output RDY_read_csr;

  // action method write_csr
  input  [11 : 0] write_csr_addr;
  input  [63 : 0] write_csr_word;
  input  [1 : 0] write_csr_lpc;
  input  EN_write_csr;
  output RDY_write_csr;

  // actionvalue method upd_on_ret
  input  [1 : 0] upd_on_ret_prv;
  input  EN_upd_on_ret;
  output [63 : 0] upd_on_ret;
  output RDY_upd_on_ret;

  // actionvalue method upd_on_trap
  input  [5 : 0] upd_on_trap_cause;
  input  [63 : 0] upd_on_trap_pc;
  input  [63 : 0] upd_on_trap_tval;
  input  EN_upd_on_trap;
  output [63 : 0] upd_on_trap;
  output RDY_upd_on_trap;

  // action method incr_minstret
  input  EN_incr_minstret;
  output RDY_incr_minstret;

  // value method mv_csr_decode
  output [151 : 0] mv_csr_decode;
  output RDY_mv_csr_decode;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method csr_mstatus
  output [63 : 0] csr_mstatus;
  output RDY_csr_mstatus;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // action method ext_interrupt
  input  ext_interrupt_ex_i;
  input  EN_ext_interrupt;
  output RDY_ext_interrupt;

  // value method mv_interrupt
  output mv_interrupt;

  // value method mv_pmp_cfg
  output [31 : 0] mv_pmp_cfg;
  output RDY_mv_pmp_cfg;

  // value method mv_pmp_addr
  output [119 : 0] mv_pmp_addr;
  output RDY_mv_pmp_addr;

  // value method mv_trigger_data1
  output [43 : 0] mv_trigger_data1;
  output RDY_mv_trigger_data1;

  // value method mv_trigger_data2
  output [127 : 0] mv_trigger_data2;
  output RDY_mv_trigger_data2;

  // value method mv_trigger_enable
  output [1 : 0] mv_trigger_enable;
  output RDY_mv_trigger_enable;

  // signals for module outputs
  reg [63 : 0] read_csr;
  wire [151 : 0] mv_csr_decode;
  wire [127 : 0] mv_trigger_data2;
  wire [119 : 0] mv_pmp_addr;
  wire [63 : 0] csr_mstatus, upd_on_ret, upd_on_trap;
  wire [43 : 0] mv_trigger_data1;
  wire [31 : 0] mv_pmp_cfg;
  wire [1 : 0] mv_curr_priv, mv_trigger_enable;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_csr_mstatus,
       RDY_ext_interrupt,
       RDY_incr_minstret,
       RDY_mv_csr_decode,
       RDY_mv_csr_misa_c,
       RDY_mv_curr_priv,
       RDY_mv_pmp_addr,
       RDY_mv_pmp_cfg,
       RDY_mv_trigger_data1,
       RDY_mv_trigger_data2,
       RDY_mv_trigger_enable,
       RDY_read_csr,
       RDY_upd_on_ret,
       RDY_upd_on_trap,
       RDY_write_csr,
       mv_csr_misa_c,
       mv_interrupt;

  // register ext_ueip
  reg ext_ueip;
  wire ext_ueip_D_IN, ext_ueip_EN;

  // register fflags
  reg [4 : 0] fflags;
  wire [4 : 0] fflags_D_IN;
  wire fflags_EN;

  // register frm
  reg [2 : 0] frm;
  wire [2 : 0] frm_D_IN;
  wire frm_EN;

  // register fs
  reg [1 : 0] fs;
  wire [1 : 0] fs_D_IN;
  wire fs_EN;

  // register mcycle
  reg [63 : 0] mcycle;
  wire [63 : 0] mcycle_D_IN;
  wire mcycle_EN;

  // register minstret
  reg [63 : 0] minstret;
  wire [63 : 0] minstret_D_IN;
  wire minstret_EN;

  // register misa_a
  reg misa_a;
  wire misa_a_D_IN, misa_a_EN;

  // register misa_c
  reg misa_c;
  wire misa_c_D_IN, misa_c_EN;

  // register misa_i
  reg misa_i;
  wire misa_i_D_IN, misa_i_EN;

  // register misa_m
  reg misa_m;
  wire misa_m_D_IN, misa_m_EN;

  // register misa_n
  reg misa_n;
  wire misa_n_D_IN, misa_n_EN;

  // register misa_u
  reg misa_u;
  wire misa_u_D_IN, misa_u_EN;

  // register rg_clint_mtime
  reg [63 : 0] rg_clint_mtime;
  wire [63 : 0] rg_clint_mtime_D_IN;
  wire rg_clint_mtime_EN;

  // register rg_mcause
  reg [4 : 0] rg_mcause;
  wire [4 : 0] rg_mcause_D_IN;
  wire rg_mcause_EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren_D_IN;
  wire rg_mcounteren_EN;

  // register rg_medeleg_l10
  reg [9 : 0] rg_medeleg_l10;
  wire [9 : 0] rg_medeleg_l10_D_IN;
  wire rg_medeleg_l10_EN;

  // register rg_medeleg_m2
  reg [1 : 0] rg_medeleg_m2;
  wire [1 : 0] rg_medeleg_m2_D_IN;
  wire rg_medeleg_m2_EN;

  // register rg_medeleg_u1
  reg rg_medeleg_u1;
  wire rg_medeleg_u1_D_IN, rg_medeleg_u1_EN;

  // register rg_meie
  reg rg_meie;
  wire rg_meie_D_IN, rg_meie_EN;

  // register rg_meip
  reg rg_meip;
  wire rg_meip_D_IN, rg_meip_EN;

  // register rg_mepc
  reg [62 : 0] rg_mepc;
  wire [62 : 0] rg_mepc_D_IN;
  wire rg_mepc_EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg_D_IN;
  wire rg_mideleg_EN;

  // register rg_mie
  reg rg_mie;
  reg rg_mie_D_IN;
  wire rg_mie_EN;

  // register rg_minterrupt
  reg rg_minterrupt;
  wire rg_minterrupt_D_IN, rg_minterrupt_EN;

  // register rg_mode
  reg [1 : 0] rg_mode;
  wire [1 : 0] rg_mode_D_IN;
  wire rg_mode_EN;

  // register rg_mpie
  reg rg_mpie;
  reg rg_mpie_D_IN;
  wire rg_mpie_EN;

  // register rg_mpp
  reg [1 : 0] rg_mpp;
  reg [1 : 0] rg_mpp_D_IN;
  wire rg_mpp_EN;

  // register rg_mprv
  reg rg_mprv;
  wire rg_mprv_D_IN, rg_mprv_EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch_D_IN;
  wire rg_mscratch_EN;

  // register rg_msie
  reg rg_msie;
  wire rg_msie_D_IN, rg_msie_EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip_D_IN, rg_msip_EN;

  // register rg_mtie
  reg rg_mtie;
  wire rg_mtie_D_IN, rg_mtie_EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip_D_IN, rg_mtip_EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval_D_IN;
  wire rg_mtval_EN;

  // register rg_mtvec
  reg [61 : 0] rg_mtvec;
  wire [61 : 0] rg_mtvec_D_IN;
  wire rg_mtvec_EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // register rg_ucause
  reg [4 : 0] rg_ucause;
  wire [4 : 0] rg_ucause_D_IN;
  wire rg_ucause_EN;

  // register rg_ueie
  reg rg_ueie;
  wire rg_ueie_D_IN, rg_ueie_EN;

  // register rg_uepc
  reg [62 : 0] rg_uepc;
  wire [62 : 0] rg_uepc_D_IN;
  wire rg_uepc_EN;

  // register rg_uie
  reg rg_uie;
  reg rg_uie_D_IN;
  wire rg_uie_EN;

  // register rg_uinterrupt
  reg rg_uinterrupt;
  wire rg_uinterrupt_D_IN, rg_uinterrupt_EN;

  // register rg_umode
  reg [1 : 0] rg_umode;
  wire [1 : 0] rg_umode_D_IN;
  wire rg_umode_EN;

  // register rg_upie
  reg rg_upie;
  reg rg_upie_D_IN;
  wire rg_upie_EN;

  // register rg_uscratch
  reg [63 : 0] rg_uscratch;
  wire [63 : 0] rg_uscratch_D_IN;
  wire rg_uscratch_EN;

  // register rg_usie
  reg rg_usie;
  wire rg_usie_D_IN, rg_usie_EN;

  // register rg_usip
  reg rg_usip;
  wire rg_usip_D_IN, rg_usip_EN;

  // register rg_utie
  reg rg_utie;
  wire rg_utie_D_IN, rg_utie_EN;

  // register rg_utip
  reg rg_utip;
  wire rg_utip_D_IN, rg_utip_EN;

  // register rg_utval
  reg [63 : 0] rg_utval;
  wire [63 : 0] rg_utval_D_IN;
  wire rg_utval_EN;

  // register rg_utvec
  reg [61 : 0] rg_utvec;
  wire [61 : 0] rg_utvec_D_IN;
  wire rg_utvec_EN;

  // register soft_ueip
  reg soft_ueip;
  wire soft_ueip_D_IN, soft_ueip_EN;

  // register trigger_index
  reg trigger_index;
  wire trigger_index_D_IN, trigger_index_EN;

  // register v_pmp_addr_0
  reg [29 : 0] v_pmp_addr_0;
  wire [29 : 0] v_pmp_addr_0_D_IN;
  wire v_pmp_addr_0_EN;

  // register v_pmp_addr_1
  reg [29 : 0] v_pmp_addr_1;
  wire [29 : 0] v_pmp_addr_1_D_IN;
  wire v_pmp_addr_1_EN;

  // register v_pmp_addr_2
  reg [29 : 0] v_pmp_addr_2;
  wire [29 : 0] v_pmp_addr_2_D_IN;
  wire v_pmp_addr_2_EN;

  // register v_pmp_addr_3
  reg [29 : 0] v_pmp_addr_3;
  wire [29 : 0] v_pmp_addr_3_D_IN;
  wire v_pmp_addr_3_EN;

  // register v_pmp_cfg_0
  reg [7 : 0] v_pmp_cfg_0;
  wire [7 : 0] v_pmp_cfg_0_D_IN;
  wire v_pmp_cfg_0_EN;

  // register v_pmp_cfg_1
  reg [7 : 0] v_pmp_cfg_1;
  wire [7 : 0] v_pmp_cfg_1_D_IN;
  wire v_pmp_cfg_1_EN;

  // register v_pmp_cfg_2
  reg [7 : 0] v_pmp_cfg_2;
  wire [7 : 0] v_pmp_cfg_2_D_IN;
  wire v_pmp_cfg_2_EN;

  // register v_pmp_cfg_3
  reg [7 : 0] v_pmp_cfg_3;
  wire [7 : 0] v_pmp_cfg_3_D_IN;
  wire v_pmp_cfg_3_EN;

  // register v_tinfo_0
  reg [63 : 0] v_tinfo_0;
  wire [63 : 0] v_tinfo_0_D_IN;
  wire v_tinfo_0_EN;

  // register v_tinfo_1
  reg [63 : 0] v_tinfo_1;
  wire [63 : 0] v_tinfo_1_D_IN;
  wire v_tinfo_1_EN;

  // register v_trig_tdata1_0
  reg [21 : 0] v_trig_tdata1_0;
  wire [21 : 0] v_trig_tdata1_0_D_IN;
  wire v_trig_tdata1_0_EN;

  // register v_trig_tdata1_1
  reg [21 : 0] v_trig_tdata1_1;
  wire [21 : 0] v_trig_tdata1_1_D_IN;
  wire v_trig_tdata1_1_EN;

  // register v_trig_tdata2_0
  reg [63 : 0] v_trig_tdata2_0;
  wire [63 : 0] v_trig_tdata2_0_D_IN;
  wire v_trig_tdata2_0_EN;

  // register v_trig_tdata2_1
  reg [63 : 0] v_trig_tdata2_1;
  wire [63 : 0] v_trig_tdata2_1_D_IN;
  wire v_trig_tdata2_1_EN;

  // register v_trig_tdata3_0
  reg v_trig_tdata3_0;
  wire v_trig_tdata3_0_D_IN, v_trig_tdata3_0_EN;

  // register v_trig_tdata3_1
  reg v_trig_tdata3_1;
  wire v_trig_tdata3_1_D_IN, v_trig_tdata3_1_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_cycle_counter,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_ext_interrupt,
       CAN_FIRE_incr_minstret,
       CAN_FIRE_read_csr,
       CAN_FIRE_upd_on_ret,
       CAN_FIRE_upd_on_trap,
       CAN_FIRE_write_csr,
       WILL_FIRE_RL_increment_cycle_counter,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_ext_interrupt,
       WILL_FIRE_incr_minstret,
       WILL_FIRE_read_csr,
       WILL_FIRE_upd_on_ret,
       WILL_FIRE_upd_on_trap,
       WILL_FIRE_write_csr;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_mcycle_write_1__VAL_2, MUX_minstret_write_1__VAL_2;
  wire [1 : 0] MUX_rg_prv_write_1__VAL_1, MUX_rg_prv_write_1__VAL_2;
  wire MUX_mcycle_write_1__SEL_1,
       MUX_minstret_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_2,
       MUX_rg_mepc_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_3,
       MUX_rg_mpp_write_1__SEL_2,
       MUX_rg_mtval_write_1__SEL_1,
       MUX_rg_ucause_write_1__SEL_1,
       MUX_rg_uie_write_1__SEL_1,
       MUX_rg_uie_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d3;
  reg TASK_testplusargs___d4;
  reg TASK_testplusargs___d5;
  reg [63 : 0] v__h3170;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg TASK_testplusargs___d11;
  reg [63 : 0] v__h3312;
  reg TASK_testplusargs___d699;
  reg TASK_testplusargs___d700;
  reg TASK_testplusargs___d701;
  reg [63 : 0] v__h11341;
  reg TASK_testplusargs___d705;
  reg TASK_testplusargs___d706;
  reg TASK_testplusargs___d707;
  reg [63 : 0] v__h11480;
  reg TASK_testplusargs___d721;
  reg TASK_testplusargs___d722;
  reg TASK_testplusargs___d723;
  reg [63 : 0] v__h15135;
  reg TASK_testplusargs___d744;
  reg TASK_testplusargs___d745;
  reg TASK_testplusargs___d746;
  reg [63 : 0] v__h15309;
  reg TASK_testplusargs___d384;
  reg TASK_testplusargs___d385;
  reg TASK_testplusargs___d386;
  reg [63 : 0] v__h6116;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d729;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d731;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d740;
  reg TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d743;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] data___1__h3381, data___1__h3579;
  reg [5 : 0] CASE_trigger_index_0_v_trig_tdata1_0_BITS_8_TO_ETC__q19;
  reg [3 : 0] CASE_trigger_index_0_v_trig_tdata1_0_BITS_14_T_ETC__q11,
	      CASE_trigger_index_0_v_trig_tdata1_0_BITS_9_TO_ETC__q14,
	      SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d53;
  reg [1 : 0] CASE_write_csr_word_BITS_63_TO_60_4_1_5_2_3__q23;
  reg CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q20,
      CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q21,
      CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q22,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_10_1__ETC__q15,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_15_1__ETC__q12,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_16_1__ETC__q13,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_17_1__ETC__q8,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_18_1__ETC__q9,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_19_1__ETC__q10,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_1_1_v_ETC__q16,
      CASE_trigger_index_0_v_trig_tdata1_0_BIT_2_1_v_ETC__q18,
      CASE_trigger_index_0_v_trig_tdata3_0_1_v_trig__ETC__q5,
      CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q3,
      CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q4,
      CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q1,
      CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q2;
  wire [63 : 0] IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d168,
		IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d169,
		_2_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d117,
		_theResult_____2__h3245,
		data___1__h3472,
		data___1__h3669,
		data___1__h4665,
		data___1__h4689,
		data___1__h4696,
		data___1__h4701,
		data___1__h4717,
		data___1__h4832,
		data___1__h4843,
		data___1__h4852,
		data___1__h4857,
		data___1__h4961,
		data___1__h5028,
		data___1__h5173,
		data___1__h5190,
		data___1__h5207,
		data___1__h5300,
		data___1__h5695,
		data___1__h5701,
		data___1__h5715,
		data___1__h5725,
		data___1__h5758,
		data___1__h5791,
		data___1__h5800,
		data___1__h5802,
		data___1__h5830,
		mv_csr_decode_csr_mstatus__h15934;
  wire [62 : 0] IF_upd_on_ret_prv_EQ_0_89_THEN_IF_misa_c_34_TH_ETC___d698,
		result__h11079,
		result__h11218;
  wire [61 : 0] IF_rg_mode_28_EQ_1_57_AND_upd_on_trap_cause_BI_ETC___d760,
		IF_rg_umode_26_EQ_1_52_AND_upd_on_trap_cause_B_ETC___d756;
  wire [58 : 0] _0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d143;
  wire [25 : 0] misa__h260;
  wire [20 : 0] _0b0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_2_ETC___d115;
  wire [15 : 0] SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d113,
		rg_medeleg_u1_CONCAT_0_CONCAT_rg_medeleg_m2_CO_ETC__q7;
  wire [11 : 0] rg_mideleg_SRL_upd_on_trap_cause_BITS_4_TO_0__q6,
		x__h15968,
		x__h15980,
		x__h16007,
		x__h16184;
  wire [10 : 0] SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d112;
  wire [8 : 0] rg_ueie_30_AND_misa_n_96_AND_soft_ueip_92_OR_e_ETC___d786;
  wire [7 : 0] x__h4692;
  wire [6 : 0] _0_CONCAT_rg_utie_33_AND_misa_n_96_AND_rg_utip__ETC___d785;
  wire [3 : 0] x__h10404, x__h10567;
  wire [2 : 0] SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d110;
  wire NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739,
       misa_n_96_AND_rg_ueie_30___d298,
       misa_n_96_AND_rg_usie_36___d300,
       misa_n_96_AND_rg_usip_05___d291,
       misa_n_96_AND_rg_utie_33___d299,
       misa_n_96_AND_rg_utip_00___d290,
       misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289,
       r__h4966,
       rg_medeleg_u1_07_CONCAT_0_CONCAT_rg_medeleg_m2_ETC___d719,
       rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d715,
       rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742,
       write_csr_addr_EQ_0x1_86_AND_NOT_fflags_76_EQ__ETC___d504,
       write_csr_addr_EQ_0x2_92_AND_NOT_frm_75_EQ_wri_ETC___d502,
       write_csr_word_BITS_1_TO_0_03_ULT_2___d404,
       x__h4731,
       x__h4765,
       x__h4793,
       y__h4734;

  // actionvalue method read_csr
  always@(read_csr_addr or
	  data___1__h4961 or
	  data___1__h4701 or
	  data___1__h4696 or
	  data___1__h4689 or
	  data___1__h4857 or
	  data___1__h4852 or
	  rg_uscratch or
	  data___1__h4843 or
	  data___1__h4832 or
	  rg_utval or
	  data___1__h4717 or
	  data___1__h5802 or
	  misa_u or
	  misa_n or
	  misa_m or
	  misa_i or
	  misa_c or
	  misa_a or
	  data___1__h5791 or
	  data___1__h5800 or
	  data___1__h5758 or
	  data___1__h5830 or
	  data___1__h5695 or
	  rg_mscratch or
	  data___1__h5715 or
	  data___1__h5701 or
	  rg_mtval or
	  data___1__h5725 or
	  data___1__h5300 or
	  data___1__h5207 or
	  data___1__h5190 or
	  data___1__h5173 or
	  data___1__h5028 or
	  data___1__h4665 or
	  data___1__h3669 or
	  data___1__h3579 or
	  data___1__h3472 or
	  data___1__h3381 or mcycle or rg_clint_mtime or minstret)
  begin
    case (read_csr_addr)
      12'h0: read_csr = data___1__h4961;
      12'h001: read_csr = data___1__h4701;
      12'h002: read_csr = data___1__h4696;
      12'h003: read_csr = data___1__h4689;
      12'h004: read_csr = data___1__h4857;
      12'h005: read_csr = data___1__h4852;
      12'h040: read_csr = rg_uscratch;
      12'h041: read_csr = data___1__h4843;
      12'h042: read_csr = data___1__h4832;
      12'h043: read_csr = rg_utval;
      12'h044: read_csr = data___1__h4717;
      12'h300: read_csr = data___1__h5802;
      12'h301:
	  read_csr =
	      { 43'h40000000000,
		misa_u,
		6'd16,
		misa_n,
		misa_m,
		3'd0,
		misa_i,
		5'd0,
		misa_c,
		1'd0,
		misa_a };
      12'h302: read_csr = data___1__h5791;
      12'h303: read_csr = data___1__h5800;
      12'h304: read_csr = data___1__h5758;
      12'h305: read_csr = data___1__h5830;
      12'h306: read_csr = data___1__h5695;
      12'h340: read_csr = rg_mscratch;
      12'h341: read_csr = data___1__h5715;
      12'h342: read_csr = data___1__h5701;
      12'h343: read_csr = rg_mtval;
      12'h344: read_csr = data___1__h5725;
      12'h3A0: read_csr = data___1__h5300;
      12'h3A2, 12'h7A8, 12'h800: read_csr = 64'd0;
      12'h3B0: read_csr = data___1__h5207;
      12'h3B1: read_csr = data___1__h5190;
      12'h3B2: read_csr = data___1__h5173;
      12'h3B3: read_csr = data___1__h5028;
      12'h7A0: read_csr = data___1__h4665;
      12'h7A1: read_csr = data___1__h3669;
      12'h7A2: read_csr = data___1__h3579;
      12'h7A3: read_csr = data___1__h3472;
      12'h7A4: read_csr = data___1__h3381;
      12'hB00, 12'hC00: read_csr = mcycle;
      12'hB01, 12'hC01: read_csr = rg_clint_mtime;
      12'hB02, 12'hC02: read_csr = minstret;
      default: read_csr = 64'd0;
    endcase
  end
  assign RDY_read_csr = 1'd1 ;
  assign CAN_FIRE_read_csr = 1'd1 ;
  assign WILL_FIRE_read_csr = EN_read_csr ;

  // action method write_csr
  assign RDY_write_csr = 1'd1 ;
  assign CAN_FIRE_write_csr = 1'd1 ;
  assign WILL_FIRE_write_csr = EN_write_csr ;

  // actionvalue method upd_on_ret
  assign upd_on_ret =
	     { IF_upd_on_ret_prv_EQ_0_89_THEN_IF_misa_c_34_TH_ETC___d698,
	       1'b0 } ;
  assign RDY_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_upd_on_ret = EN_upd_on_ret ;

  // actionvalue method upd_on_trap
  assign upd_on_trap =
	     { rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ?
		 IF_rg_umode_26_EQ_1_52_AND_upd_on_trap_cause_B_ETC___d756 :
		 IF_rg_mode_28_EQ_1_57_AND_upd_on_trap_cause_BI_ETC___d760,
	       2'b0 } ;
  assign RDY_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_upd_on_trap = EN_upd_on_trap ;

  // action method incr_minstret
  assign RDY_incr_minstret = 1'd1 ;
  assign CAN_FIRE_incr_minstret = 1'd1 ;
  assign WILL_FIRE_incr_minstret = EN_incr_minstret ;

  // value method mv_csr_decode
  assign mv_csr_decode =
	     { rg_prv,
	       rg_meip,
	       2'd0,
	       misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289,
	       rg_mtip,
	       2'd0,
	       misa_n_96_AND_rg_utip_00___d290,
	       rg_msip,
	       2'd0,
	       misa_n_96_AND_rg_usip_05___d291,
	       x__h15968,
	       rg_mideleg,
	       x__h15980,
	       x__h16007,
	       misa__h260,
	       mv_csr_decode_csr_mstatus__h15934 } ;
  assign RDY_mv_csr_decode = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = misa_c ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_curr_priv
  assign mv_curr_priv = rg_prv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method csr_mstatus
  assign csr_mstatus =
	     { r__h4966,
	       45'd32768,
	       rg_mprv,
	       2'd0,
	       fs,
	       rg_mpp,
	       3'd0,
	       rg_mpie,
	       2'd0,
	       rg_upie,
	       rg_mie,
	       2'd0,
	       rg_uie } ;
  assign RDY_csr_mstatus = 1'd1 ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // action method ext_interrupt
  assign RDY_ext_interrupt = 1'd1 ;
  assign CAN_FIRE_ext_interrupt = 1'd1 ;
  assign WILL_FIRE_ext_interrupt = EN_ext_interrupt ;

  // value method mv_interrupt
  assign mv_interrupt = x__h16184 != 12'd0 ;

  // value method mv_pmp_cfg
  assign mv_pmp_cfg = { v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign RDY_mv_pmp_cfg = 1'd1 ;

  // value method mv_pmp_addr
  assign mv_pmp_addr =
	     { v_pmp_addr_3, v_pmp_addr_2, v_pmp_addr_1, v_pmp_addr_0 } ;
  assign RDY_mv_pmp_addr = 1'd1 ;

  // value method mv_trigger_data1
  assign mv_trigger_data1 = { v_trig_tdata1_1, v_trig_tdata1_0 } ;
  assign RDY_mv_trigger_data1 = 1'd1 ;

  // value method mv_trigger_data2
  assign mv_trigger_data2 = { v_trig_tdata2_1, v_trig_tdata2_0 } ;
  assign RDY_mv_trigger_data2 = 1'd1 ;

  // value method mv_trigger_enable
  assign mv_trigger_enable =
	     { CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q1 &&
	       rg_prv == 2'd3 ||
	       CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q2 &&
	       rg_prv == 2'd0,
	       CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q3 &&
	       rg_prv == 2'd3 ||
	       CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q4 &&
	       rg_prv == 2'd0 } ;
  assign RDY_mv_trigger_enable = 1'd1 ;

  // rule RL_increment_cycle_counter
  assign CAN_FIRE_RL_increment_cycle_counter = 1'd1 ;
  assign WILL_FIRE_RL_increment_cycle_counter = !EN_write_csr ;

  // inputs to muxes for submodule ports
  assign MUX_mcycle_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB00 ;
  assign MUX_minstret_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB02 ;
  assign MUX_rg_mcause_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h342 ;
  assign MUX_rg_mcause_write_1__SEL_2 =
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ;
  assign MUX_rg_mepc_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h341 ;
  assign MUX_rg_mie_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h300 ;
  assign MUX_rg_mie_write_1__SEL_3 = EN_upd_on_ret && upd_on_ret_prv != 2'd0 ;
  assign MUX_rg_mpp_write_1__SEL_2 =
	     EN_write_csr && write_csr_addr == 12'h300 &&
	     (write_csr_word[12:11] == 2'd3 ||
	      write_csr_word[12:11] == 2'd1 ||
	      misa_u && write_csr_word[12:11] == 2'd0) ;
  assign MUX_rg_mtval_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h343 ;
  assign MUX_rg_ucause_write_1__SEL_1 =
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ;
  assign MUX_rg_uie_write_1__SEL_1 = EN_upd_on_ret && upd_on_ret_prv == 2'd0 ;
  assign MUX_rg_uie_write_1__SEL_3 =
	     EN_write_csr &&
	     (write_csr_addr == 12'h300 || write_csr_addr == 12'h0) ;
  assign MUX_mcycle_write_1__VAL_2 = mcycle + 64'd1 ;
  assign MUX_minstret_write_1__VAL_2 = minstret + 64'd1 ;
  assign MUX_rg_prv_write_1__VAL_1 =
	     (upd_on_ret_prv == 2'd0) ? upd_on_ret_prv : rg_mpp ;
  assign MUX_rg_prv_write_1__VAL_2 =
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ?
	       2'd0 :
	       2'd3 ;

  // register ext_ueip
  assign ext_ueip_D_IN = ext_interrupt_ex_i ;
  assign ext_ueip_EN = EN_ext_interrupt && rg_prv == 2'd0 ;

  // register fflags
  assign fflags_D_IN = write_csr_word[4:0] ;
  assign fflags_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h001 || write_csr_addr == 12'h003) ;

  // register frm
  assign frm_D_IN =
	     (write_csr_addr == 12'h002) ?
	       write_csr_word[2:0] :
	       write_csr_word[7:5] ;
  assign frm_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h002 || write_csr_addr == 12'h003) ;

  // register fs
  assign fs_D_IN =
	     (write_csr_addr == 12'h300) ? write_csr_word[14:13] : 2'b11 ;
  assign fs_EN =
	     EN_write_csr && write_csr_addr != 12'h301 &&
	     write_csr_addr != 12'h305 &&
	     (write_csr_addr == 12'h300 ||
	      write_csr_addr != 12'h303 && write_csr_addr != 12'h302 &&
	      write_csr_addr != 12'h304 &&
	      write_csr_addr != 12'h344 &&
	      write_csr_addr != 12'hB00 &&
	      write_csr_addr != 12'hB02 &&
	      write_csr_addr != 12'h341 &&
	      write_csr_addr != 12'h343 &&
	      write_csr_addr != 12'h340 &&
	      write_csr_addr != 12'h342 &&
	      write_csr_addr != 12'h306 &&
	      write_csr_addr != 12'h0 &&
	      write_csr_addr != 12'h3A0 &&
	      write_csr_addr != 12'h3A2 &&
	      write_csr_addr != 12'h3B0 &&
	      write_csr_addr != 12'h3B1 &&
	      write_csr_addr != 12'h3B2 &&
	      write_csr_addr != 12'h3B3 &&
	      write_csr_addr != 12'h3B4 &&
	      write_csr_addr != 12'h3B5 &&
	      write_csr_addr != 12'h3B6 &&
	      write_csr_addr != 12'h3B7 &&
	      write_csr_addr != 12'h3B8 &&
	      write_csr_addr != 12'h3B9 &&
	      write_csr_addr != 12'h3BA &&
	      write_csr_addr != 12'h3BB &&
	      write_csr_addr != 12'h3BC &&
	      write_csr_addr != 12'h3BD &&
	      write_csr_addr != 12'h3BE &&
	      write_csr_addr != 12'h3BF &&
	      write_csr_addr != 12'h040 &&
	      write_csr_addr_EQ_0x1_86_AND_NOT_fflags_76_EQ__ETC___d504) ;

  // register mcycle
  assign mcycle_D_IN =
	     MUX_mcycle_write_1__SEL_1 ?
	       write_csr_word :
	       MUX_mcycle_write_1__VAL_2 ;
  assign mcycle_EN =
	     EN_write_csr && write_csr_addr == 12'hB00 ||
	     WILL_FIRE_RL_increment_cycle_counter ;

  // register minstret
  assign minstret_D_IN =
	     MUX_minstret_write_1__SEL_1 ?
	       write_csr_word :
	       MUX_minstret_write_1__VAL_2 ;
  assign minstret_EN =
	     EN_write_csr && write_csr_addr == 12'hB02 || EN_incr_minstret ;

  // register misa_a
  assign misa_a_D_IN = write_csr_word[0] ;
  assign misa_a_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register misa_c
  assign misa_c_D_IN = write_csr_word[2] ;
  assign misa_c_EN =
	     EN_write_csr && write_csr_addr == 12'h301 &&
	     (write_csr_word[2] || write_csr_lpc == 2'd0) ;

  // register misa_i
  assign misa_i_D_IN = write_csr_word[8] ;
  assign misa_i_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register misa_m
  assign misa_m_D_IN = write_csr_word[12] ;
  assign misa_m_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register misa_n
  assign misa_n_D_IN = write_csr_word[13] ;
  assign misa_n_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register misa_u
  assign misa_u_D_IN = write_csr_word[20] ;
  assign misa_u_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register rg_clint_mtime
  assign rg_clint_mtime_D_IN = clint_mtime_c_mtime ;
  assign rg_clint_mtime_EN = EN_clint_mtime ;

  // register rg_mcause
  assign rg_mcause_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[4:0] :
	       upd_on_trap_cause[4:0] ;
  assign rg_mcause_EN =
	     EN_write_csr && write_csr_addr == 12'h342 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ;

  // register rg_mcounteren
  assign rg_mcounteren_D_IN = write_csr_word[2:0] ;
  assign rg_mcounteren_EN = EN_write_csr && write_csr_addr == 12'h306 ;

  // register rg_medeleg_l10
  assign rg_medeleg_l10_D_IN = write_csr_word[9:0] ;
  assign rg_medeleg_l10_EN = EN_write_csr && write_csr_addr == 12'h302 ;

  // register rg_medeleg_m2
  assign rg_medeleg_m2_D_IN = write_csr_word[13:12] ;
  assign rg_medeleg_m2_EN = EN_write_csr && write_csr_addr == 12'h302 ;

  // register rg_medeleg_u1
  assign rg_medeleg_u1_D_IN = write_csr_word[15] ;
  assign rg_medeleg_u1_EN = EN_write_csr && write_csr_addr == 12'h302 ;

  // register rg_meie
  assign rg_meie_D_IN = write_csr_word[11] ;
  assign rg_meie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_meip
  assign rg_meip_D_IN = ext_interrupt_ex_i ;
  assign rg_meip_EN = EN_ext_interrupt && rg_prv == 2'd3 ;

  // register rg_mepc
  assign rg_mepc_D_IN =
	     MUX_rg_mepc_write_1__SEL_1 ?
	       write_csr_word[63:1] :
	       upd_on_trap_pc[63:1] ;
  assign rg_mepc_EN =
	     EN_write_csr && write_csr_addr == 12'h341 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ;

  // register rg_mideleg
  assign rg_mideleg_D_IN = write_csr_word[11:0] ;
  assign rg_mideleg_EN = EN_write_csr && write_csr_addr == 12'h303 ;

  // register rg_mie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or
	  MUX_rg_mcause_write_1__SEL_2 or
	  MUX_rg_mie_write_1__SEL_3 or rg_mpie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mie_D_IN = write_csr_word[3];
      MUX_rg_mcause_write_1__SEL_2: rg_mie_D_IN = 1'd0;
      MUX_rg_mie_write_1__SEL_3: rg_mie_D_IN = rg_mpie;
      default: rg_mie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_mie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ||
	     EN_upd_on_ret && upd_on_ret_prv != 2'd0 ;

  // register rg_minterrupt
  assign rg_minterrupt_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[63] :
	       upd_on_trap_cause[5] ;
  assign rg_minterrupt_EN =
	     EN_write_csr && write_csr_addr == 12'h342 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ;

  // register rg_mode
  assign rg_mode_D_IN = write_csr_word[1:0] ;
  assign rg_mode_EN =
	     EN_write_csr && write_csr_addr == 12'h305 &&
	     write_csr_word_BITS_1_TO_0_03_ULT_2___d404 ;

  // register rg_mpie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or
	  MUX_rg_mcause_write_1__SEL_2 or rg_mie or MUX_rg_mie_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mpie_D_IN = write_csr_word[7];
      MUX_rg_mcause_write_1__SEL_2: rg_mpie_D_IN = rg_mie;
      MUX_rg_mie_write_1__SEL_3: rg_mpie_D_IN = 1'd1;
      default: rg_mpie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_mpie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ||
	     EN_upd_on_ret && upd_on_ret_prv != 2'd0 ;

  // register rg_mpp
  always@(MUX_rg_mcause_write_1__SEL_2 or
	  rg_prv or
	  MUX_rg_mpp_write_1__SEL_2 or
	  write_csr_word or MUX_rg_mie_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mcause_write_1__SEL_2: rg_mpp_D_IN = rg_prv;
      MUX_rg_mpp_write_1__SEL_2: rg_mpp_D_IN = write_csr_word[12:11];
      MUX_rg_mie_write_1__SEL_3: rg_mpp_D_IN = 2'd0;
      default: rg_mpp_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_mpp_EN =
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ||
	     MUX_rg_mpp_write_1__SEL_2 ||
	     EN_upd_on_ret && upd_on_ret_prv != 2'd0 ;

  // register rg_mprv
  assign rg_mprv_D_IN = write_csr_word[17] ;
  assign rg_mprv_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_mscratch
  assign rg_mscratch_D_IN = write_csr_word ;
  assign rg_mscratch_EN = EN_write_csr && write_csr_addr == 12'h340 ;

  // register rg_msie
  assign rg_msie_D_IN = write_csr_word[3] ;
  assign rg_msie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_msip
  assign rg_msip_D_IN = clint_msip_intrpt ;
  assign rg_msip_EN = EN_clint_msip ;

  // register rg_mtie
  assign rg_mtie_D_IN = write_csr_word[7] ;
  assign rg_mtie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_mtip
  assign rg_mtip_D_IN = clint_mtip_intrpt ;
  assign rg_mtip_EN = EN_clint_mtip ;

  // register rg_mtval
  assign rg_mtval_D_IN =
	     MUX_rg_mtval_write_1__SEL_1 ? write_csr_word : upd_on_trap_tval ;
  assign rg_mtval_EN =
	     EN_write_csr && write_csr_addr == 12'h343 ||
	     EN_upd_on_trap &&
	     NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 ;

  // register rg_mtvec
  assign rg_mtvec_D_IN = { 32'd0, write_csr_word[31:2] } ;
  assign rg_mtvec_EN = EN_write_csr && write_csr_addr == 12'h305 ;

  // register rg_prv
  assign rg_prv_D_IN =
	     EN_upd_on_ret ?
	       MUX_rg_prv_write_1__VAL_1 :
	       MUX_rg_prv_write_1__VAL_2 ;
  assign rg_prv_EN = EN_upd_on_ret || EN_upd_on_trap ;

  // register rg_ucause
  assign rg_ucause_D_IN =
	     MUX_rg_ucause_write_1__SEL_1 ?
	       upd_on_trap_cause[4:0] :
	       write_csr_word[4:0] ;
  assign rg_ucause_EN =
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr && write_csr_addr == 12'h042 ;

  // register rg_ueie
  assign rg_ueie_D_IN = write_csr_word[8] ;
  assign rg_ueie_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h304 || write_csr_addr == 12'h004) ;

  // register rg_uepc
  assign rg_uepc_D_IN =
	     MUX_rg_ucause_write_1__SEL_1 ?
	       upd_on_trap_pc[63:1] :
	       write_csr_word[63:1] ;
  assign rg_uepc_EN =
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr && write_csr_addr == 12'h041 ;

  // register rg_uie
  always@(MUX_rg_uie_write_1__SEL_1 or
	  rg_upie or
	  MUX_rg_ucause_write_1__SEL_1 or
	  MUX_rg_uie_write_1__SEL_3 or write_csr_word)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_uie_write_1__SEL_1: rg_uie_D_IN = rg_upie;
      MUX_rg_ucause_write_1__SEL_1: rg_uie_D_IN = 1'd0;
      MUX_rg_uie_write_1__SEL_3: rg_uie_D_IN = write_csr_word[0];
      default: rg_uie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_uie_EN =
	     EN_upd_on_ret && upd_on_ret_prv == 2'd0 ||
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr &&
	     (write_csr_addr == 12'h300 || write_csr_addr == 12'h0) ;

  // register rg_uinterrupt
  assign rg_uinterrupt_D_IN =
	     MUX_rg_ucause_write_1__SEL_1 ?
	       upd_on_trap_cause[5] :
	       write_csr_word[63] ;
  assign rg_uinterrupt_EN =
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr && write_csr_addr == 12'h042 ;

  // register rg_umode
  assign rg_umode_D_IN = write_csr_word[1:0] ;
  assign rg_umode_EN =
	     EN_write_csr && write_csr_addr == 12'h005 &&
	     write_csr_word_BITS_1_TO_0_03_ULT_2___d404 ;

  // register rg_upie
  always@(MUX_rg_uie_write_1__SEL_1 or
	  MUX_rg_ucause_write_1__SEL_1 or
	  rg_uie or MUX_rg_uie_write_1__SEL_3 or write_csr_word)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_uie_write_1__SEL_1: rg_upie_D_IN = 1'd1;
      MUX_rg_ucause_write_1__SEL_1: rg_upie_D_IN = rg_uie;
      MUX_rg_uie_write_1__SEL_3: rg_upie_D_IN = write_csr_word[4];
      default: rg_upie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_upie_EN =
	     EN_upd_on_ret && upd_on_ret_prv == 2'd0 ||
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr &&
	     (write_csr_addr == 12'h300 || write_csr_addr == 12'h0) ;

  // register rg_uscratch
  assign rg_uscratch_D_IN = write_csr_word ;
  assign rg_uscratch_EN = EN_write_csr && write_csr_addr == 12'h040 ;

  // register rg_usie
  assign rg_usie_D_IN = write_csr_word[0] ;
  assign rg_usie_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h304 || write_csr_addr == 12'h004) ;

  // register rg_usip
  assign rg_usip_D_IN = write_csr_word[0] ;
  assign rg_usip_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h344 || write_csr_addr == 12'h044) &&
	     misa_n ;

  // register rg_utie
  assign rg_utie_D_IN = write_csr_word[4] ;
  assign rg_utie_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h304 || write_csr_addr == 12'h004) ;

  // register rg_utip
  assign rg_utip_D_IN = write_csr_word[4] ;
  assign rg_utip_EN = EN_write_csr && write_csr_addr == 12'h344 && misa_n ;

  // register rg_utval
  assign rg_utval_D_IN =
	     MUX_rg_ucause_write_1__SEL_1 ?
	       upd_on_trap_tval :
	       write_csr_word ;
  assign rg_utval_EN =
	     EN_upd_on_trap &&
	     rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 ||
	     EN_write_csr && write_csr_addr == 12'h043 ;

  // register rg_utvec
  assign rg_utvec_D_IN = { 32'd0, write_csr_word[31:2] } ;
  assign rg_utvec_EN = EN_write_csr && write_csr_addr == 12'h005 ;

  // register soft_ueip
  assign soft_ueip_D_IN = write_csr_word[8] ;
  assign soft_ueip_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h344 || write_csr_addr == 12'h044) &&
	     misa_n ;

  // register trigger_index
  assign trigger_index_D_IN = write_csr_word[0] ;
  assign trigger_index_EN = EN_write_csr && write_csr_addr == 12'h7A0 ;

  // register v_pmp_addr_0
  assign v_pmp_addr_0_D_IN = write_csr_word[29:0] ;
  assign v_pmp_addr_0_EN =
	     EN_write_csr && write_csr_addr == 12'h3B0 && !v_pmp_cfg_0[7] ;

  // register v_pmp_addr_1
  assign v_pmp_addr_1_D_IN = write_csr_word[29:0] ;
  assign v_pmp_addr_1_EN =
	     EN_write_csr && write_csr_addr == 12'h3B1 && !v_pmp_cfg_1[7] ;

  // register v_pmp_addr_2
  assign v_pmp_addr_2_D_IN = write_csr_word[29:0] ;
  assign v_pmp_addr_2_EN =
	     EN_write_csr && write_csr_addr == 12'h3B2 && !v_pmp_cfg_2[7] ;

  // register v_pmp_addr_3
  assign v_pmp_addr_3_D_IN = write_csr_word[29:0] ;
  assign v_pmp_addr_3_EN =
	     EN_write_csr && write_csr_addr == 12'h3B3 && !v_pmp_cfg_3[7] ;

  // register v_pmp_cfg_0
  assign v_pmp_cfg_0_D_IN = write_csr_word[7:0] ;
  assign v_pmp_cfg_0_EN =
	     EN_write_csr && write_csr_addr == 12'h3A0 && !v_pmp_cfg_0[7] ;

  // register v_pmp_cfg_1
  assign v_pmp_cfg_1_D_IN = write_csr_word[15:8] ;
  assign v_pmp_cfg_1_EN =
	     EN_write_csr && write_csr_addr == 12'h3A0 && !v_pmp_cfg_1[7] ;

  // register v_pmp_cfg_2
  assign v_pmp_cfg_2_D_IN = write_csr_word[23:16] ;
  assign v_pmp_cfg_2_EN =
	     EN_write_csr && write_csr_addr == 12'h3A0 && !v_pmp_cfg_2[7] ;

  // register v_pmp_cfg_3
  assign v_pmp_cfg_3_D_IN = write_csr_word[31:24] ;
  assign v_pmp_cfg_3_EN =
	     EN_write_csr && write_csr_addr == 12'h3A0 && !v_pmp_cfg_3[7] ;

  // register v_tinfo_0
  assign v_tinfo_0_D_IN = 64'h0 ;
  assign v_tinfo_0_EN = 1'b0 ;

  // register v_tinfo_1
  assign v_tinfo_1_D_IN = 64'h0 ;
  assign v_tinfo_1_EN = 1'b0 ;

  // register v_trig_tdata1_0
  assign v_trig_tdata1_0_D_IN = v_trig_tdata1_1_D_IN ;
  assign v_trig_tdata1_0_EN =
	     EN_write_csr && trigger_index == 1'd0 &&
	     write_csr_addr == 12'h7A1 ;

  // register v_trig_tdata1_1
  assign v_trig_tdata1_1_D_IN =
	     (write_csr_word[63:60] == 4'd2) ?
	       { 2'd0,
		 write_csr_word[0],
		 write_csr_word[1],
		 write_csr_word[2],
		 write_csr_word[3],
		 write_csr_word[6],
		 x__h10404,
		 write_csr_word[11],
		 write_csr_word[15:12],
		 x__h10567,
		 write_csr_word[19:18] } :
	       { CASE_write_csr_word_BITS_63_TO_60_4_1_5_2_3__q23,
		 11'b01010101010 /* unspecified value */ ,
		 write_csr_word[5:0],
		 write_csr_word[6],
		 write_csr_word[9:8] } ;
  assign v_trig_tdata1_1_EN =
	     EN_write_csr && trigger_index == 1'd1 &&
	     write_csr_addr == 12'h7A1 ;

  // register v_trig_tdata2_0
  assign v_trig_tdata2_0_D_IN = write_csr_word ;
  assign v_trig_tdata2_0_EN =
	     EN_write_csr && trigger_index == 1'd0 &&
	     write_csr_addr == 12'h7A2 ;

  // register v_trig_tdata2_1
  assign v_trig_tdata2_1_D_IN = write_csr_word ;
  assign v_trig_tdata2_1_EN =
	     EN_write_csr && trigger_index == 1'd1 &&
	     write_csr_addr == 12'h7A2 ;

  // register v_trig_tdata3_0
  assign v_trig_tdata3_0_D_IN = write_csr_word[50] ;
  assign v_trig_tdata3_0_EN =
	     EN_write_csr && trigger_index == 1'd0 &&
	     write_csr_addr == 12'h7A3 ;

  // register v_trig_tdata3_1
  assign v_trig_tdata3_1_D_IN = write_csr_word[50] ;
  assign v_trig_tdata3_1_EN =
	     EN_write_csr && trigger_index == 1'd1 &&
	     write_csr_addr == 12'h7A3 ;

  // remaining internal signals
  assign IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d168 =
	     CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q20 ?
	       { 4'd5,
		 CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17,
		 _0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d143 } :
	       64'd0 ;
  assign IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d169 =
	     CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q21 ?
	       { 4'd4,
		 CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17,
		 _0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d143 } :
	       IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d168 ;
  assign IF_rg_mode_28_EQ_1_57_AND_upd_on_trap_cause_BI_ETC___d760 =
	     (rg_mode == 2'd1 && upd_on_trap_cause[5]) ?
	       rg_mtvec + { 57'd0, upd_on_trap_cause[4:0] } :
	       rg_mtvec ;
  assign IF_rg_umode_26_EQ_1_52_AND_upd_on_trap_cause_B_ETC___d756 =
	     (rg_umode == 2'd1 && upd_on_trap_cause[5]) ?
	       rg_utvec + { 57'd0, upd_on_trap_cause[4:0] } :
	       rg_utvec ;
  assign IF_upd_on_ret_prv_EQ_0_89_THEN_IF_misa_c_34_TH_ETC___d698 =
	     (upd_on_ret_prv == 2'd0) ?
	       (misa_c ? rg_uepc : result__h11079) :
	       (misa_c ? rg_mepc : result__h11218) ;
  assign NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739 =
	     !rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d715 &&
	     !rg_medeleg_u1_07_CONCAT_0_CONCAT_rg_medeleg_m2_ETC___d719 ||
	     rg_prv != 2'd0 ||
	     !misa_n ;
  assign SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d110 =
	     { CASE_trigger_index_0_v_trig_tdata1_0_BIT_17_1__ETC__q8,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_18_1__ETC__q9,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_19_1__ETC__q10 } ;
  assign SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d112 =
	     { CASE_trigger_index_0_v_trig_tdata1_0_BITS_14_T_ETC__q11,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_15_1__ETC__q12,
	       2'd0,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_16_1__ETC__q13,
	       SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d110 } ;
  assign SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d113 =
	     { CASE_trigger_index_0_v_trig_tdata1_0_BITS_9_TO_ETC__q14,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_10_1__ETC__q15,
	       SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d112 } ;
  assign _0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d143 =
	     { 49'd0,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_1_1_v_ETC__q16,
	       2'd0,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_2_1_v_ETC__q18,
	       CASE_trigger_index_0_v_trig_tdata1_0_BITS_8_TO_ETC__q19 } ;
  assign _0_CONCAT_rg_utie_33_AND_misa_n_96_AND_rg_utip__ETC___d785 =
	     { 2'd0,
	       rg_utie & misa_n_96_AND_rg_utip_00___d290,
	       rg_msie & rg_msip,
	       2'd0,
	       rg_usie & misa_n_96_AND_rg_usip_05___d291 } ;
  assign _0b0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_2_ETC___d115 =
	     { 1'b0,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_1_1_v_ETC__q16,
	       1'b0,
	       SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d53[1:0],
	       SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d113 } ;
  assign _2_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d117 =
	     { 4'd2,
	       CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17,
	       36'd0,
	       SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d53[3:2],
	       _0b0_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_2_ETC___d115 } ;
  assign _theResult_____2__h3245 = read_csr ;
  assign data___1__h3472 =
	     { 13'd0,
	       CASE_trigger_index_0_v_trig_tdata3_0_1_v_trig__ETC__q5,
	       50'd0 } ;
  assign data___1__h3669 =
	     CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q22 ?
	       _2_CONCAT_SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21__ETC___d117 :
	       IF_SEL_ARR_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d169 ;
  assign data___1__h4665 = { 63'd0, trigger_index } ;
  assign data___1__h4689 = { 56'd0, x__h4692 } ;
  assign data___1__h4696 = { 61'd0, frm } ;
  assign data___1__h4701 = { 59'd0, fflags } ;
  assign data___1__h4717 =
	     { 52'd0,
	       rg_meip,
	       2'd0,
	       x__h4731 & misa_n,
	       rg_mtip,
	       2'd0,
	       x__h4765 & misa_n,
	       rg_msip,
	       2'd0,
	       x__h4793 & misa_n } ;
  assign data___1__h4832 = { rg_uinterrupt, 58'd0, rg_ucause } ;
  assign data___1__h4843 = { rg_uepc, 1'b0 } ;
  assign data___1__h4852 = { rg_utvec, rg_umode } ;
  assign data___1__h4857 =
	     { 52'd0,
	       rg_meie,
	       2'd0,
	       rg_mideleg[8] & rg_ueie,
	       rg_mtie,
	       2'd0,
	       rg_mideleg[4] & rg_utie,
	       rg_msie,
	       2'd0,
	       rg_mideleg[0] & rg_usie } ;
  assign data___1__h4961 =
	     { r__h4966, 48'd262144, fs, 8'd0, rg_upie, 3'd0, rg_uie } ;
  assign data___1__h5028 = { 34'd0, v_pmp_addr_3 } ;
  assign data___1__h5173 = { 34'd0, v_pmp_addr_2 } ;
  assign data___1__h5190 = { 34'd0, v_pmp_addr_1 } ;
  assign data___1__h5207 = { 34'd0, v_pmp_addr_0 } ;
  assign data___1__h5300 =
	     { 32'd0, v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign data___1__h5695 = { 61'd0, rg_mcounteren } ;
  assign data___1__h5701 = { rg_minterrupt, 58'd0, rg_mcause } ;
  assign data___1__h5715 = { rg_mepc, 1'b0 } ;
  assign data___1__h5725 =
	     { 52'd0,
	       rg_meip,
	       2'd0,
	       misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289,
	       rg_mtip,
	       2'd0,
	       misa_n_96_AND_rg_utip_00___d290,
	       rg_msip,
	       2'd0,
	       misa_n_96_AND_rg_usip_05___d291 } ;
  assign data___1__h5758 =
	     { 52'd0,
	       rg_meie,
	       2'd0,
	       misa_n_96_AND_rg_ueie_30___d298,
	       rg_mtie,
	       2'd0,
	       misa_n_96_AND_rg_utie_33___d299,
	       rg_msie,
	       2'd0,
	       misa_n_96_AND_rg_usie_36___d300 } ;
  assign data___1__h5791 =
	     { 48'd0,
	       rg_medeleg_u1,
	       1'd0,
	       rg_medeleg_m2,
	       2'd0,
	       rg_medeleg_l10 } ;
  assign data___1__h5800 = { 52'd0, rg_mideleg } ;
  assign data___1__h5802 =
	     { r__h4966,
	       45'd163840,
	       rg_mprv,
	       2'd0,
	       fs,
	       rg_mpp,
	       3'd0,
	       rg_mpie,
	       2'd0,
	       rg_upie,
	       rg_mie,
	       2'd0,
	       rg_uie } ;
  assign data___1__h5830 = { rg_mtvec, rg_mode } ;
  assign misa__h260 =
	     { 5'd0,
	       misa_u,
	       6'd16,
	       misa_n,
	       misa_m,
	       3'd0,
	       misa_i,
	       5'd0,
	       misa_c,
	       1'd0,
	       misa_a } ;
  assign misa_n_96_AND_rg_ueie_30___d298 = misa_n & rg_ueie ;
  assign misa_n_96_AND_rg_usie_36___d300 = misa_n & rg_usie ;
  assign misa_n_96_AND_rg_usip_05___d291 = misa_n & rg_usip ;
  assign misa_n_96_AND_rg_utie_33___d299 = misa_n & rg_utie ;
  assign misa_n_96_AND_rg_utip_00___d290 = misa_n & rg_utip ;
  assign misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289 =
	     misa_n & y__h4734 ;
  assign mv_csr_decode_csr_mstatus__h15934 = csr_mstatus ;
  assign r__h4966 = fs == 2'b11 ;
  assign result__h11079 = { rg_uepc[62:1], 1'd0 } ;
  assign result__h11218 = { rg_mepc[62:1], 1'd0 } ;
  assign rg_medeleg_u1_07_CONCAT_0_CONCAT_rg_medeleg_m2_ETC___d719 =
	     rg_medeleg_u1_CONCAT_0_CONCAT_rg_medeleg_m2_CO_ETC__q7[0] &
	     ~upd_on_trap_cause[5] ;
  assign rg_medeleg_u1_CONCAT_0_CONCAT_rg_medeleg_m2_CO_ETC__q7 =
	     { rg_medeleg_u1, 1'd0, rg_medeleg_m2, 2'd0, rg_medeleg_l10 } >>
	     upd_on_trap_cause[4:0] ;
  assign rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d715 =
	     rg_mideleg_SRL_upd_on_trap_cause_BITS_4_TO_0__q6[0] &
	     upd_on_trap_cause[5] ;
  assign rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742 =
	     (rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d715 ||
	      rg_medeleg_u1_07_CONCAT_0_CONCAT_rg_medeleg_m2_ETC___d719) &&
	     rg_prv == 2'd0 &&
	     misa_n ;
  assign rg_mideleg_SRL_upd_on_trap_cause_BITS_4_TO_0__q6 =
	     rg_mideleg >> upd_on_trap_cause[4:0] ;
  assign rg_ueie_30_AND_misa_n_96_AND_soft_ueip_92_OR_e_ETC___d786 =
	     { rg_ueie & misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289,
	       rg_mtie & rg_mtip,
	       _0_CONCAT_rg_utie_33_AND_misa_n_96_AND_rg_utip__ETC___d785 } ;
  assign write_csr_addr_EQ_0x1_86_AND_NOT_fflags_76_EQ__ETC___d504 =
	     write_csr_addr == 12'h001 && fflags != write_csr_word[4:0] ||
	     write_csr_addr != 12'h001 &&
	     write_csr_addr_EQ_0x2_92_AND_NOT_frm_75_EQ_wri_ETC___d502 ;
  assign write_csr_addr_EQ_0x2_92_AND_NOT_frm_75_EQ_wri_ETC___d502 =
	     write_csr_addr == 12'h002 && frm != write_csr_word[2:0] ||
	     write_csr_addr == 12'h003 && x__h4692 != write_csr_word[7:0] ;
  assign write_csr_word_BITS_1_TO_0_03_ULT_2___d404 =
	     write_csr_word[1:0] < 2'd2 ;
  assign x__h10404 =
	     (!write_csr_word[19] &&
	      (write_csr_word[10:7] == 4'd0 || write_csr_word[10:7] == 4'd2 ||
	       write_csr_word[10:7] == 4'd3)) ?
	       write_csr_word[10:7] :
	       4'd0 ;
  assign x__h10567 = { write_csr_word[22:21], write_csr_word[17:16] } ;
  assign x__h15968 =
	     { rg_meie,
	       2'd0,
	       rg_ueie,
	       rg_mtie,
	       2'd0,
	       rg_utie,
	       rg_msie,
	       2'd0,
	       rg_usie } ;
  assign x__h15980 =
	     { 3'd0,
	       misa_n_96_AND_soft_ueip_92_OR_ext_ueip_93_94___d289,
	       3'd0,
	       misa_n_96_AND_rg_utip_00___d290,
	       3'd0,
	       misa_n_96_AND_rg_usip_05___d291 } ;
  assign x__h16007 =
	     { 3'd0,
	       misa_n_96_AND_rg_ueie_30___d298,
	       3'd0,
	       misa_n_96_AND_rg_utie_33___d299,
	       3'd0,
	       misa_n_96_AND_rg_usie_36___d300 } ;
  assign x__h16184 =
	     { rg_meie & rg_meip,
	       2'd0,
	       rg_ueie_30_AND_misa_n_96_AND_soft_ueip_92_OR_e_ETC___d786 } ;
  assign x__h4692 = { frm, fflags } ;
  assign x__h4731 = rg_mideleg[8] & y__h4734 ;
  assign x__h4765 = rg_mideleg[4] & rg_utip ;
  assign x__h4793 = rg_mideleg[0] & rg_usip ;
  assign y__h4734 = soft_ueip | ext_ueip ;
  always@(v_trig_tdata1_1)
  begin
    case (v_trig_tdata1_1[21:20])
      2'd1, 2'd2:
	  CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q1 =
	      v_trig_tdata1_1[1];
      default: CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q1 =
		   v_trig_tdata1_1[21:20] == 2'd0 && v_trig_tdata1_1[15];
    endcase
  end
  always@(v_trig_tdata1_1)
  begin
    case (v_trig_tdata1_1[21:20])
      2'd1, 2'd2:
	  CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q2 =
	      v_trig_tdata1_1[2];
      default: CASE_v_trig_tdata1_1_BITS_21_TO_20_1_v_trig_td_ETC__q2 =
		   v_trig_tdata1_1[21:20] == 2'd0 && v_trig_tdata1_1[16];
    endcase
  end
  always@(v_trig_tdata1_0)
  begin
    case (v_trig_tdata1_0[21:20])
      2'd1, 2'd2:
	  CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q3 =
	      v_trig_tdata1_0[1];
      default: CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q3 =
		   v_trig_tdata1_0[21:20] == 2'd0 && v_trig_tdata1_0[15];
    endcase
  end
  always@(v_trig_tdata1_0)
  begin
    case (v_trig_tdata1_0[21:20])
      2'd1, 2'd2:
	  CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q4 =
	      v_trig_tdata1_0[2];
      default: CASE_v_trig_tdata1_0_BITS_21_TO_20_1_v_trig_td_ETC__q4 =
		   v_trig_tdata1_0[21:20] == 2'd0 && v_trig_tdata1_0[16];
    endcase
  end
  always@(trigger_index or v_tinfo_0 or v_tinfo_1)
  begin
    case (trigger_index)
      1'd0: data___1__h3381 = v_tinfo_0;
      1'd1: data___1__h3381 = v_tinfo_1;
    endcase
  end
  always@(trigger_index or v_trig_tdata3_0 or v_trig_tdata3_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata3_0_1_v_trig__ETC__q5 =
	      v_trig_tdata3_0;
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata3_0_1_v_trig__ETC__q5 =
	      v_trig_tdata3_1;
    endcase
  end
  always@(trigger_index or v_trig_tdata2_0 or v_trig_tdata2_1)
  begin
    case (trigger_index)
      1'd0: data___1__h3579 = v_trig_tdata2_0;
      1'd1: data___1__h3579 = v_trig_tdata2_1;
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d53 =
	      v_trig_tdata1_0[5:2];
      1'd1:
	  SEL_ARR_IF_v_trig_tdata1_0_4_BITS_21_TO_20_5_E_ETC___d53 =
	      v_trig_tdata1_1[5:2];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_17_1__ETC__q8 =
	      v_trig_tdata1_0[17];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_17_1__ETC__q8 =
	      v_trig_tdata1_1[17];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_18_1__ETC__q9 =
	      v_trig_tdata1_0[18];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_18_1__ETC__q9 =
	      v_trig_tdata1_1[18];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_19_1__ETC__q10 =
	      v_trig_tdata1_0[19];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_19_1__ETC__q10 =
	      v_trig_tdata1_1[19];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_14_T_ETC__q11 =
	      v_trig_tdata1_0[14:11];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_14_T_ETC__q11 =
	      v_trig_tdata1_1[14:11];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_15_1__ETC__q12 =
	      v_trig_tdata1_0[15];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_15_1__ETC__q12 =
	      v_trig_tdata1_1[15];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_16_1__ETC__q13 =
	      v_trig_tdata1_0[16];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_16_1__ETC__q13 =
	      v_trig_tdata1_1[16];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_9_TO_ETC__q14 =
	      v_trig_tdata1_0[9:6];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_9_TO_ETC__q14 =
	      v_trig_tdata1_1[9:6];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_10_1__ETC__q15 =
	      v_trig_tdata1_0[10];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_10_1__ETC__q15 =
	      v_trig_tdata1_1[10];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_1_1_v_ETC__q16 =
	      v_trig_tdata1_0[1];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_1_1_v_ETC__q16 =
	      v_trig_tdata1_1[1];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17 =
	      v_trig_tdata1_0[0];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_0_1_v_ETC__q17 =
	      v_trig_tdata1_1[0];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_2_1_v_ETC__q18 =
	      v_trig_tdata1_0[2];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BIT_2_1_v_ETC__q18 =
	      v_trig_tdata1_1[2];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_8_TO_ETC__q19 =
	      v_trig_tdata1_0[8:3];
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_8_TO_ETC__q19 =
	      v_trig_tdata1_1[8:3];
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q20 =
	      v_trig_tdata1_0[21:20] == 2'd2;
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q20 =
	      v_trig_tdata1_1[21:20] == 2'd2;
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q21 =
	      v_trig_tdata1_0[21:20] == 2'd1;
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q21 =
	      v_trig_tdata1_1[21:20] == 2'd1;
    endcase
  end
  always@(trigger_index or v_trig_tdata1_0 or v_trig_tdata1_1)
  begin
    case (trigger_index)
      1'd0:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q22 =
	      v_trig_tdata1_0[21:20] == 2'd0;
      1'd1:
	  CASE_trigger_index_0_v_trig_tdata1_0_BITS_21_T_ETC__q22 =
	      v_trig_tdata1_1[21:20] == 2'd0;
    endcase
  end
  always@(write_csr_word)
  begin
    case (write_csr_word[63:60])
      4'd4: CASE_write_csr_word_BITS_63_TO_60_4_1_5_2_3__q23 = 2'd1;
      4'd5: CASE_write_csr_word_BITS_63_TO_60_4_1_5_2_3__q23 = 2'd2;
      default: CASE_write_csr_word_BITS_63_TO_60_4_1_5_2_3__q23 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      ext_ueip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
      frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
      fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
      mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
      minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
      misa_a <= `BSV_ASSIGNMENT_DELAY 1'd1;
      misa_c <= `BSV_ASSIGNMENT_DELAY 1'd1;
      misa_i <= `BSV_ASSIGNMENT_DELAY 1'd1;
      misa_m <= `BSV_ASSIGNMENT_DELAY 1'd1;
      misa_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
      misa_u <= `BSV_ASSIGNMENT_DELAY 1'd1;
      rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_mcause <= `BSV_ASSIGNMENT_DELAY 5'd0;
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY 3'd0;
      rg_medeleg_l10 <= `BSV_ASSIGNMENT_DELAY 10'd0;
      rg_medeleg_m2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_medeleg_u1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_meip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mepc <= `BSV_ASSIGNMENT_DELAY 63'd0;
      rg_mideleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
      rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_minterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'b0;
      rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_msip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtval <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_mtvec <= `BSV_ASSIGNMENT_DELAY 62'd0;
      rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
      rg_ucause <= `BSV_ASSIGNMENT_DELAY 5'd0;
      rg_ueie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_uepc <= `BSV_ASSIGNMENT_DELAY 63'd0;
      rg_uie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_uinterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_umode <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_upie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_uscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_usie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_usip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_utie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_utip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_utval <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_utvec <= `BSV_ASSIGNMENT_DELAY 62'd0;
      soft_ueip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      trigger_index <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY 30'd0;
      v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY 30'd0;
      v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY 30'd0;
      v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY 30'd0;
      v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      v_tinfo_0 <= `BSV_ASSIGNMENT_DELAY 64'd52;
      v_tinfo_1 <= `BSV_ASSIGNMENT_DELAY 64'd52;
      v_trig_tdata1_0 <= `BSV_ASSIGNMENT_DELAY
	  { 2'd3, 20'b10101010101010101010 /* unspecified value */  };
      v_trig_tdata1_1 <= `BSV_ASSIGNMENT_DELAY
	  { 2'd3, 20'b10101010101010101010 /* unspecified value */  };
      v_trig_tdata2_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      v_trig_tdata2_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      v_trig_tdata3_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      v_trig_tdata3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (ext_ueip_EN) ext_ueip <= `BSV_ASSIGNMENT_DELAY ext_ueip_D_IN;
      if (fflags_EN) fflags <= `BSV_ASSIGNMENT_DELAY fflags_D_IN;
      if (frm_EN) frm <= `BSV_ASSIGNMENT_DELAY frm_D_IN;
      if (fs_EN) fs <= `BSV_ASSIGNMENT_DELAY fs_D_IN;
      if (mcycle_EN) mcycle <= `BSV_ASSIGNMENT_DELAY mcycle_D_IN;
      if (minstret_EN) minstret <= `BSV_ASSIGNMENT_DELAY minstret_D_IN;
      if (misa_a_EN) misa_a <= `BSV_ASSIGNMENT_DELAY misa_a_D_IN;
      if (misa_c_EN) misa_c <= `BSV_ASSIGNMENT_DELAY misa_c_D_IN;
      if (misa_i_EN) misa_i <= `BSV_ASSIGNMENT_DELAY misa_i_D_IN;
      if (misa_m_EN) misa_m <= `BSV_ASSIGNMENT_DELAY misa_m_D_IN;
      if (misa_n_EN) misa_n <= `BSV_ASSIGNMENT_DELAY misa_n_D_IN;
      if (misa_u_EN) misa_u <= `BSV_ASSIGNMENT_DELAY misa_u_D_IN;
      if (rg_clint_mtime_EN)
	rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY rg_clint_mtime_D_IN;
      if (rg_mcause_EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause_D_IN;
      if (rg_mcounteren_EN)
	rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren_D_IN;
      if (rg_medeleg_l10_EN)
	rg_medeleg_l10 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_l10_D_IN;
      if (rg_medeleg_m2_EN)
	rg_medeleg_m2 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_m2_D_IN;
      if (rg_medeleg_u1_EN)
	rg_medeleg_u1 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_u1_D_IN;
      if (rg_meie_EN) rg_meie <= `BSV_ASSIGNMENT_DELAY rg_meie_D_IN;
      if (rg_meip_EN) rg_meip <= `BSV_ASSIGNMENT_DELAY rg_meip_D_IN;
      if (rg_mepc_EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc_D_IN;
      if (rg_mideleg_EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg_D_IN;
      if (rg_mie_EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie_D_IN;
      if (rg_minterrupt_EN)
	rg_minterrupt <= `BSV_ASSIGNMENT_DELAY rg_minterrupt_D_IN;
      if (rg_mode_EN) rg_mode <= `BSV_ASSIGNMENT_DELAY rg_mode_D_IN;
      if (rg_mpie_EN) rg_mpie <= `BSV_ASSIGNMENT_DELAY rg_mpie_D_IN;
      if (rg_mpp_EN) rg_mpp <= `BSV_ASSIGNMENT_DELAY rg_mpp_D_IN;
      if (rg_mprv_EN) rg_mprv <= `BSV_ASSIGNMENT_DELAY rg_mprv_D_IN;
      if (rg_mscratch_EN)
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch_D_IN;
      if (rg_msie_EN) rg_msie <= `BSV_ASSIGNMENT_DELAY rg_msie_D_IN;
      if (rg_msip_EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip_D_IN;
      if (rg_mtie_EN) rg_mtie <= `BSV_ASSIGNMENT_DELAY rg_mtie_D_IN;
      if (rg_mtip_EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip_D_IN;
      if (rg_mtval_EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval_D_IN;
      if (rg_mtvec_EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec_D_IN;
      if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
      if (rg_ucause_EN) rg_ucause <= `BSV_ASSIGNMENT_DELAY rg_ucause_D_IN;
      if (rg_ueie_EN) rg_ueie <= `BSV_ASSIGNMENT_DELAY rg_ueie_D_IN;
      if (rg_uepc_EN) rg_uepc <= `BSV_ASSIGNMENT_DELAY rg_uepc_D_IN;
      if (rg_uie_EN) rg_uie <= `BSV_ASSIGNMENT_DELAY rg_uie_D_IN;
      if (rg_uinterrupt_EN)
	rg_uinterrupt <= `BSV_ASSIGNMENT_DELAY rg_uinterrupt_D_IN;
      if (rg_umode_EN) rg_umode <= `BSV_ASSIGNMENT_DELAY rg_umode_D_IN;
      if (rg_upie_EN) rg_upie <= `BSV_ASSIGNMENT_DELAY rg_upie_D_IN;
      if (rg_uscratch_EN)
	rg_uscratch <= `BSV_ASSIGNMENT_DELAY rg_uscratch_D_IN;
      if (rg_usie_EN) rg_usie <= `BSV_ASSIGNMENT_DELAY rg_usie_D_IN;
      if (rg_usip_EN) rg_usip <= `BSV_ASSIGNMENT_DELAY rg_usip_D_IN;
      if (rg_utie_EN) rg_utie <= `BSV_ASSIGNMENT_DELAY rg_utie_D_IN;
      if (rg_utip_EN) rg_utip <= `BSV_ASSIGNMENT_DELAY rg_utip_D_IN;
      if (rg_utval_EN) rg_utval <= `BSV_ASSIGNMENT_DELAY rg_utval_D_IN;
      if (rg_utvec_EN) rg_utvec <= `BSV_ASSIGNMENT_DELAY rg_utvec_D_IN;
      if (soft_ueip_EN) soft_ueip <= `BSV_ASSIGNMENT_DELAY soft_ueip_D_IN;
      if (trigger_index_EN)
	trigger_index <= `BSV_ASSIGNMENT_DELAY trigger_index_D_IN;
      if (v_pmp_addr_0_EN)
	v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_0_D_IN;
      if (v_pmp_addr_1_EN)
	v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_1_D_IN;
      if (v_pmp_addr_2_EN)
	v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_2_D_IN;
      if (v_pmp_addr_3_EN)
	v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_3_D_IN;
      if (v_pmp_cfg_0_EN)
	v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_0_D_IN;
      if (v_pmp_cfg_1_EN)
	v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_1_D_IN;
      if (v_pmp_cfg_2_EN)
	v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_2_D_IN;
      if (v_pmp_cfg_3_EN)
	v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_3_D_IN;
      if (v_tinfo_0_EN) v_tinfo_0 <= `BSV_ASSIGNMENT_DELAY v_tinfo_0_D_IN;
      if (v_tinfo_1_EN) v_tinfo_1 <= `BSV_ASSIGNMENT_DELAY v_tinfo_1_D_IN;
      if (v_trig_tdata1_0_EN)
	v_trig_tdata1_0 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata1_0_D_IN;
      if (v_trig_tdata1_1_EN)
	v_trig_tdata1_1 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata1_1_D_IN;
      if (v_trig_tdata2_0_EN)
	v_trig_tdata2_0 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata2_0_D_IN;
      if (v_trig_tdata2_1_EN)
	v_trig_tdata2_1 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata2_1_D_IN;
      if (v_trig_tdata3_0_EN)
	v_trig_tdata3_0 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata3_0_D_IN;
      if (v_trig_tdata3_1_EN)
	v_trig_tdata3_1 <= `BSV_ASSIGNMENT_DELAY v_trig_tdata3_1_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ext_ueip = 1'h0;
    fflags = 5'h0A;
    frm = 3'h2;
    fs = 2'h2;
    mcycle = 64'hAAAAAAAAAAAAAAAA;
    minstret = 64'hAAAAAAAAAAAAAAAA;
    misa_a = 1'h0;
    misa_c = 1'h0;
    misa_i = 1'h0;
    misa_m = 1'h0;
    misa_n = 1'h0;
    misa_u = 1'h0;
    rg_clint_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_mcause = 5'h0A;
    rg_mcounteren = 3'h2;
    rg_medeleg_l10 = 10'h2AA;
    rg_medeleg_m2 = 2'h2;
    rg_medeleg_u1 = 1'h0;
    rg_meie = 1'h0;
    rg_meip = 1'h0;
    rg_mepc = 63'h2AAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_mie = 1'h0;
    rg_minterrupt = 1'h0;
    rg_mode = 2'h2;
    rg_mpie = 1'h0;
    rg_mpp = 2'h2;
    rg_mprv = 1'h0;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_msie = 1'h0;
    rg_msip = 1'h0;
    rg_mtie = 1'h0;
    rg_mtip = 1'h0;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_mtvec = 62'h2AAAAAAAAAAAAAAA;
    rg_prv = 2'h2;
    rg_ucause = 5'h0A;
    rg_ueie = 1'h0;
    rg_uepc = 63'h2AAAAAAAAAAAAAAA;
    rg_uie = 1'h0;
    rg_uinterrupt = 1'h0;
    rg_umode = 2'h2;
    rg_upie = 1'h0;
    rg_uscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_usie = 1'h0;
    rg_usip = 1'h0;
    rg_utie = 1'h0;
    rg_utip = 1'h0;
    rg_utval = 64'hAAAAAAAAAAAAAAAA;
    rg_utvec = 62'h2AAAAAAAAAAAAAAA;
    soft_ueip = 1'h0;
    trigger_index = 1'h0;
    v_pmp_addr_0 = 30'h2AAAAAAA;
    v_pmp_addr_1 = 30'h2AAAAAAA;
    v_pmp_addr_2 = 30'h2AAAAAAA;
    v_pmp_addr_3 = 30'h2AAAAAAA;
    v_pmp_cfg_0 = 8'hAA;
    v_pmp_cfg_1 = 8'hAA;
    v_pmp_cfg_2 = 8'hAA;
    v_pmp_cfg_3 = 8'hAA;
    v_tinfo_0 = 64'hAAAAAAAAAAAAAAAA;
    v_tinfo_1 = 64'hAAAAAAAAAAAAAAAA;
    v_trig_tdata1_0 = 22'h2AAAAA;
    v_trig_tdata1_1 = 22'h2AAAAA;
    v_trig_tdata2_0 = 64'hAAAAAAAAAAAAAAAA;
    v_trig_tdata2_1 = 64'hAAAAAAAAAAAAAAAA;
    v_trig_tdata3_0 = 1'h0;
    v_trig_tdata3_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d3 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d4 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d5 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  v__h3170 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("[%10d", v__h3170, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("CSRFILE : Read Operation : Addr:%h", read_csr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d3 ||
	   TASK_testplusargs___d4 && TASK_testplusargs___d5))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d11 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  v__h3312 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("[%10d", v__h3312, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("CSRFILE : Read Operation : Addr:%h Data:%h",
	       read_csr_addr,
	       _theResult_____2__h3245);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d699 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d700 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d701 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  v__h11341 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d699 ||
	   TASK_testplusargs___d700 && TASK_testplusargs___d701))
	$write("[%10d", v__h11341, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d699 ||
	   TASK_testplusargs___d700 && TASK_testplusargs___d701))
	$write("CSRFILE : PC:%h Cause:%d misa_s:%b",
	       upd_on_trap_pc,
	       upd_on_trap_cause,
	       1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d699 ||
	   TASK_testplusargs___d700 && TASK_testplusargs___d701))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d705 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d706 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d707 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  v__h11480 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d705 ||
	   TASK_testplusargs___d706 && TASK_testplusargs___d707))
	$write("[%10d", v__h11480, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d705 ||
	   TASK_testplusargs___d706 && TASK_testplusargs___d707))
	$write("CSRFILE : medeleg:%b delegateM:%b",
	       { rg_medeleg_u1, 1'd0, rg_medeleg_m2, 2'd0, rg_medeleg_l10 },
	       rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d715 ||
	       rg_medeleg_u1_07_CONCAT_0_CONCAT_rg_medeleg_m2_ETC___d719);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d705 ||
	   TASK_testplusargs___d706 && TASK_testplusargs___d707))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d721 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d722 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d723 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d729 =
	(TASK_testplusargs___d721 ||
	 TASK_testplusargs___d722 && TASK_testplusargs___d723) &&
	rg_prv == 2'd3;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d731 =
	(TASK_testplusargs___d721 ||
	 TASK_testplusargs___d722 && TASK_testplusargs___d723) &&
	rg_prv != 2'd3;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d740 =
	(TASK_testplusargs___d721 ||
	 TASK_testplusargs___d722 && TASK_testplusargs___d723) &&
	NOT_rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_ETC___d739;
    TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d743 =
	(TASK_testplusargs___d721 ||
	 TASK_testplusargs___d722 && TASK_testplusargs___d723) &&
	rg_mideleg_90_SRL_upd_on_trap_cause_BITS_4_TO__ETC___d742;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  v__h15135 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d721 ||
	   TASK_testplusargs___d722 && TASK_testplusargs___d723))
	$write("[%10d", v__h15135, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d721 ||
	   TASK_testplusargs___d722 && TASK_testplusargs___d723))
	$write("CSRFILE : rg_prv: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d729)
	$write("Machine");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d731)
	$write("User");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d721 ||
	   TASK_testplusargs___d722 && TASK_testplusargs___d723))
	$write(" prv: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d740)
	$write("Machine");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  TASK_testplusargs_21_OR_TASK_testplusargs_22_A_ETC___d743)
	$write("User");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d721 ||
	   TASK_testplusargs___d722 && TASK_testplusargs___d723))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d744 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d745 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  TASK_testplusargs___d746 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap)
	begin
	  v__h15309 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d744 ||
	   TASK_testplusargs___d745 && TASK_testplusargs___d746))
	$write("[%10d", v__h15309, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d744 ||
	   TASK_testplusargs___d745 && TASK_testplusargs___d746))
	$write("CSRFILE : rg_mtvec:%h rg_mode:%b", rg_mtvec, rg_mode);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_upd_on_trap &&
	  (TASK_testplusargs___d744 ||
	   TASK_testplusargs___d745 && TASK_testplusargs___d746))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d384 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d385 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d386 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  v__h6116 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("[%10d", v__h6116, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("CSRFILE : Write Operation : Addr:%h, word:%h",
	       write_csr_addr,
	       write_csr_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d384 ||
	   TASK_testplusargs___d385 && TASK_testplusargs___d386))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkcsrfile

