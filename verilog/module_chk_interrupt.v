//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eba)
//
// On Fri Mar  7 14:49:19 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// chk_interrupt                  O     8
// chk_interrupt_prv              I     2
// chk_interrupt_mstatus          I    64
// chk_interrupt_mip              I    14
// chk_interrupt_mie              I    12
// chk_interrupt_mideleg          I    12
// chk_interrupt_uip              I    12
// chk_interrupt_uie              I    12
//
// Combinational paths from inputs to outputs:
//   (chk_interrupt_prv,
//    chk_interrupt_mstatus,
//    chk_interrupt_mip,
//    chk_interrupt_mie,
//    chk_interrupt_mideleg,
//    chk_interrupt_uip,
//    chk_interrupt_uie) -> chk_interrupt
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_chk_interrupt(chk_interrupt_prv,
			    chk_interrupt_mstatus,
			    chk_interrupt_mip,
			    chk_interrupt_mie,
			    chk_interrupt_mideleg,
			    chk_interrupt_uip,
			    chk_interrupt_uie,
			    chk_interrupt);
  // value method chk_interrupt
  input  [1 : 0] chk_interrupt_prv;
  input  [63 : 0] chk_interrupt_mstatus;
  input  [13 : 0] chk_interrupt_mip;
  input  [11 : 0] chk_interrupt_mie;
  input  [11 : 0] chk_interrupt_mideleg;
  input  [11 : 0] chk_interrupt_uip;
  input  [11 : 0] chk_interrupt_uie;
  output [7 : 0] chk_interrupt;

  // signals for module outputs
  wire [7 : 0] chk_interrupt;

  // remaining internal signals
  wire [13 : 0] pending_interrupts__h39;
  wire [11 : 0] m_interrupts__h37,
		u_interrupts__h38,
		x__h128,
		x__h182,
		x__h184,
		x__h323,
		y__h129,
		y__h131,
		y__h183;
  wire [5 : 0] x__h28;

  // value method chk_interrupt
  assign chk_interrupt =
	     { x__h28, pending_interrupts__h39 != 14'd0, x__h323 != 12'd0 } ;

  // remaining internal signals
  assign m_interrupts__h37 = x__h128 & y__h129 ;
  assign pending_interrupts__h39 =
	     ((chk_interrupt_prv != 2'd3 || chk_interrupt_mstatus[3]) ?
		{ 2'd0, m_interrupts__h37 } :
		14'd0) |
	     ((chk_interrupt_mstatus[0] && chk_interrupt_prv == 2'd0) ?
		{ 2'd0, u_interrupts__h38 } :
		14'd0) ;
  assign u_interrupts__h38 = x__h182 & y__h183 ;
  assign x__h128 = x__h323 & y__h131 ;
  assign x__h182 = x__h184 & chk_interrupt_mideleg ;
  assign x__h184 = chk_interrupt_uie & chk_interrupt_uip ;
  assign x__h28 =
	     { 1'b1,
	       pending_interrupts__h39[11] ?
		 5'd11 :
		 (pending_interrupts__h39[3] ?
		    5'd3 :
		    (pending_interrupts__h39[7] ?
		       5'd7 :
		       (pending_interrupts__h39[8] ?
			  5'd8 :
			  (pending_interrupts__h39[0] ?
			     5'd0 :
			     (pending_interrupts__h39[4] ?
				5'd4 :
				5'd31))))) } ;
  assign x__h323 = chk_interrupt_mie & chk_interrupt_mip[11:0] ;
  assign y__h129 = ~chk_interrupt_mideleg ;
  assign y__h131 =
	     {12{chk_interrupt_prv != 2'd3 || chk_interrupt_mstatus[3]}} ;
  assign y__h183 =
	     {12{chk_interrupt_mstatus[0] && chk_interrupt_prv == 2'd0}} ;
endmodule  // module_chk_interrupt

