//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eba)
//
// On Fri Mar  7 14:49:29 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// fn_alu                         O   138
// fn_alu_fn                      I     4
// fn_alu_op1                     I    64
// fn_alu_op2                     I    64
// fn_alu_op3                     I    64
// fn_alu_imm_value               I    64
// fn_alu_inst_type               I     4
// fn_alu_funct3                  I     3
// fn_alu_memaccess               I     2
// fn_alu_word32                  I     1
// fn_alu_misa_c                  I     1
// fn_alu_lpc                     I     2 unused
// fn_alu_tdata1                  I    44
// fn_alu_tdata2                  I   128
// fn_alu_tenable                 I     2
//
// Combinational paths from inputs to outputs:
//   (fn_alu_fn,
//    fn_alu_op1,
//    fn_alu_op2,
//    fn_alu_op3,
//    fn_alu_imm_value,
//    fn_alu_inst_type,
//    fn_alu_funct3,
//    fn_alu_memaccess,
//    fn_alu_word32,
//    fn_alu_misa_c,
//    fn_alu_tdata1,
//    fn_alu_tdata2,
//    fn_alu_tenable) -> fn_alu
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_alu(fn_alu_fn,
		     fn_alu_op1,
		     fn_alu_op2,
		     fn_alu_op3,
		     fn_alu_imm_value,
		     fn_alu_inst_type,
		     fn_alu_funct3,
		     fn_alu_memaccess,
		     fn_alu_word32,
		     fn_alu_misa_c,
		     fn_alu_lpc,
		     fn_alu_tdata1,
		     fn_alu_tdata2,
		     fn_alu_tenable,
		     fn_alu);
  // value method fn_alu
  input  [3 : 0] fn_alu_fn;
  input  [63 : 0] fn_alu_op1;
  input  [63 : 0] fn_alu_op2;
  input  [63 : 0] fn_alu_op3;
  input  [63 : 0] fn_alu_imm_value;
  input  [3 : 0] fn_alu_inst_type;
  input  [2 : 0] fn_alu_funct3;
  input  [1 : 0] fn_alu_memaccess;
  input  fn_alu_word32;
  input  fn_alu_misa_c;
  input  [1 : 0] fn_alu_lpc;
  input  [43 : 0] fn_alu_tdata1;
  input  [127 : 0] fn_alu_tdata2;
  input  [1 : 0] fn_alu_tenable;
  output [137 : 0] fn_alu;

  // signals for module outputs
  wire [137 : 0] fn_alu;

  // remaining internal signals
  reg [63 : 0] final_output__h57, shin__h53;
  reg [1 : 0] CASE_fn_alu_inst_type_1_0_5_1_2__q5;
  reg CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2,
      CASE_fn_alu_tdata1_BITS_14_TO_11_2_IF_IF_fn_al_ETC__q1,
      IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100,
      IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150,
      IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153;
  wire [64 : 0] fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377,
		fn_alu_fn_BIT_3_AND_shin3_BIT_63_CONCAT_shin3__q3,
		inv_op2__h41,
		x__h3809;
  wire [63 : 0] _theResult_____7__h59,
		_theResult____h1592,
		_theResult____h3137,
		effective_address__h58,
		final_output___1__h3769,
		op1_xor_op2__h42,
		result__h1762,
		shift_inright__h52,
		shift_l__h56,
		x__h3765;
  wire [31 : 0] final_output7_BITS_31_TO_0__q4, upper_bits__h51;
  wire [6 : 0] IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d501;
  wire [5 : 0] _theResult_____4_fst__h3528,
	       _theResult_____5_fst__h3553,
	       cause___1__h3530,
	       cause___1__h3569,
	       cause__h60,
	       cause__h63,
	       cause__h66,
	       shift_amt__h50;
  wire [1 : 0] IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d215;
  wire IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65,
       IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d99,
       IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138,
       IF_NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu__ETC___d209,
       INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196,
       NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu_ins_ETC___d171,
       NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50,
       NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148,
       NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d75,
       adder_z_flag__h44,
       fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_BI_ETC___d155,
       fn_alu_inst_type_EQ_2_78_AND_IF_fn_alu_fn_EQ_2_ETC___d201,
       fn_alu_inst_type_EQ_4_8_OR_fn_alu_inst_type_EQ_ETC___d206,
       fn_alu_tdata1_BIT_19_AND_fn_alu_memaccess_EQ_0_ETC___d92,
       fn_alu_tdata1_BIT_41_05_AND_fn_alu_memaccess_E_ETC___d128,
       fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146,
       fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70,
       fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144,
       fn_alu_tenable_BIT_1_AND_NOT_fn_alu_tenable_BI_ETC___d131,
       sign__h45,
       x__h11736;

  // value method fn_alu
  assign fn_alu =
	     { 1'd1,
	       IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d215,
	       x__h3765,
	       _theResult_____7__h59,
	       IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d501 } ;

  // remaining internal signals
  assign IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65 =
	     _theResult____h1592 < fn_alu_tdata2[63:0] ;
  assign IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d99 =
	     IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65 ||
	     ((fn_alu_tdata1[14:11] == 4'd2) ?
		!IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65 :
		fn_alu_tdata1[14:11] == 4'd0 &&
		fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70) ;
  assign IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 =
	     _theResult____h3137 < fn_alu_tdata2[127:64] ;
  assign IF_NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu__ETC___d209 =
	     (fn_alu_memaccess != 2'd3 && fn_alu_inst_type == 4'd1) ?
	       _theResult_____7__h59[63:32] != 32'd0 :
	       fn_alu_inst_type_EQ_4_8_OR_fn_alu_inst_type_EQ_ETC___d206 ||
	       fn_alu_inst_type == 4'd6 ;
  assign IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d215 =
	     (fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_BI_ETC___d155 ||
	      NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu_ins_ETC___d171 ||
	      IF_NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu__ETC___d209) ?
	       2'd3 :
	       CASE_fn_alu_inst_type_1_0_5_1_2__q5 ;
  assign IF_fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_ETC___d501 =
	     { fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_BI_ETC___d155 ?
		 6'd3 :
		 _theResult_____4_fst__h3528,
	       fn_alu_inst_type_EQ_2_78_AND_IF_fn_alu_fn_EQ_2_ETC___d201 ||
	       fn_alu_inst_type == 4'd4 ||
	       fn_alu_inst_type == 4'd3 } ;
  assign INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196 =
	     ({ sign__h45 & fn_alu_op1[63], fn_alu_op1 } ^
	      65'h10000000000000000) <
	     ({ sign__h45 & fn_alu_op2[63], fn_alu_op2 } ^
	      65'h10000000000000000) ;
  assign NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu_ins_ETC___d171 =
	     fn_alu_memaccess != 2'd3 && fn_alu_inst_type == 4'd1 &&
	     (fn_alu_funct3[1:0] == 2'd1 && effective_address__h58[0] ||
	      fn_alu_funct3[1:0] == 2'd2 &&
	      _theResult_____7__h59[1:0] != 2'd0 ||
	      fn_alu_funct3[1:0] == 2'd3 &&
	      effective_address__h58[2:0] != 3'd0) ;
  assign NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 =
	     (!fn_alu_tdata1[19] || fn_alu_memaccess != 2'd0 ||
	      fn_alu_tdata1[1]) &&
	     (!fn_alu_tdata1[18] || fn_alu_memaccess != 2'd1) ||
	     fn_alu_tdata1[5:2] != 4'd0 &&
	     (fn_alu_tdata1[5:2] != 4'd1 || fn_alu_funct3[1:0] != 2'd0) &&
	     (fn_alu_tdata1[5:2] != 4'd2 || fn_alu_funct3[1:0] != 2'd1) &&
	     (fn_alu_tdata1[5:2] != 4'd3 || fn_alu_funct3[1:0] != 2'd2) &&
	     (fn_alu_tdata1[5:2] != 4'd5 || fn_alu_funct3[1:0] != 2'd3) ;
  assign NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148 =
	     (!fn_alu_tenable[0] || fn_alu_tdata1[21:20] != 2'd0 ||
	      NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 ||
	      !fn_alu_tdata1[10]) &&
	     ((fn_alu_tdata1[36:33] == 4'd0) ?
		fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146 :
		fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144) ;
  assign NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d75 =
	     !fn_alu_tenable[0] || fn_alu_tdata1[21:20] != 2'd0 ||
	     NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 ||
	     CASE_fn_alu_tdata1_BITS_14_TO_11_2_IF_IF_fn_al_ETC__q1 ;
  assign _theResult_____4_fst__h3528 =
	     NOT_fn_alu_memaccess_EQ_3_56_57_AND_fn_alu_ins_ETC___d171 ?
	       cause___1__h3530 :
	       cause__h66 ;
  assign _theResult_____5_fst__h3553 =
	     (_theResult_____7__h59[63:32] == 32'd0) ?
	       cause__h63 :
	       cause___1__h3569 ;
  assign _theResult_____7__h59 =
	     (fn_alu_inst_type == 4'd4) ?
	       result__h1762 :
	       effective_address__h58 ;
  assign _theResult____h1592 =
	     fn_alu_tdata1[1] ? fn_alu_op2 : _theResult_____7__h59 ;
  assign _theResult____h3137 =
	     fn_alu_tdata1[23] ? fn_alu_op2 : _theResult_____7__h59 ;
  assign adder_z_flag__h44 = ~(op1_xor_op2__h42 != 64'd0) ;
  assign cause___1__h3530 = (fn_alu_memaccess == 2'd0) ? cause__h66 : 6'd6 ;
  assign cause___1__h3569 = (fn_alu_memaccess == 2'd0) ? 6'd5 : 6'd7 ;
  assign cause__h60 =
	     (fn_alu_inst_type == 4'd6) ?
	       { fn_alu_fn[2:0], fn_alu_funct3 } :
	       6'd4 ;
  assign cause__h63 =
	     fn_alu_inst_type_EQ_4_8_OR_fn_alu_inst_type_EQ_ETC___d206 ?
	       6'd0 :
	       cause__h60 ;
  assign cause__h66 =
	     (fn_alu_memaccess != 2'd3 && fn_alu_inst_type == 4'd1) ?
	       _theResult_____5_fst__h3553 :
	       cause__h63 ;
  assign effective_address__h58 = fn_alu_op3 + fn_alu_imm_value ;
  assign final_output7_BITS_31_TO_0__q4 = final_output__h57[31:0] ;
  assign final_output___1__h3769 =
	     { {32{final_output7_BITS_31_TO_0__q4[31]}},
	       final_output7_BITS_31_TO_0__q4 } ;
  assign fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377 =
	     { fn_alu_fn[3] & shin__h53[63], shin__h53 } >> shift_amt__h50 |
	     ~(65'h1FFFFFFFFFFFFFFFF >> shift_amt__h50) &
	     {65{fn_alu_fn_BIT_3_AND_shin3_BIT_63_CONCAT_shin3__q3[64]}} ;
  assign fn_alu_fn_BIT_3_AND_shin3_BIT_63_CONCAT_shin3__q3 =
	     { fn_alu_fn[3] & shin__h53[63], shin__h53 } ;
  assign fn_alu_inst_type_EQ_1_AND_IF_fn_alu_tenable_BI_ETC___d155 =
	     fn_alu_inst_type == 4'd1 &&
	     (fn_alu_tenable_BIT_1_AND_NOT_fn_alu_tenable_BI_ETC___d131 ?
		IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153 :
		fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144) ;
  assign fn_alu_inst_type_EQ_2_78_AND_IF_fn_alu_fn_EQ_2_ETC___d201 =
	     fn_alu_inst_type == 4'd2 &&
	     CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2 ;
  assign fn_alu_inst_type_EQ_4_8_OR_fn_alu_inst_type_EQ_ETC___d206 =
	     (fn_alu_inst_type == 4'd4 || fn_alu_inst_type == 4'd3 ||
	      fn_alu_inst_type_EQ_2_78_AND_IF_fn_alu_fn_EQ_2_ETC___d201) &&
	     _theResult_____7__h59[1] &&
	     !fn_alu_misa_c ;
  assign fn_alu_tdata1_BIT_19_AND_fn_alu_memaccess_EQ_0_ETC___d92 =
	     (fn_alu_tdata1[19] && fn_alu_memaccess == 2'd0 &&
	      !fn_alu_tdata1[1] ||
	      fn_alu_tdata1[18] && fn_alu_memaccess == 2'd1) &&
	     (fn_alu_tdata1[5:2] == 4'd0 ||
	      fn_alu_tdata1[5:2] == 4'd1 && fn_alu_funct3[1:0] == 2'd0 ||
	      fn_alu_tdata1[5:2] == 4'd2 && fn_alu_funct3[1:0] == 2'd1 ||
	      fn_alu_tdata1[5:2] == 4'd3 && fn_alu_funct3[1:0] == 2'd2 ||
	      fn_alu_tdata1[5:2] == 4'd5 && fn_alu_funct3[1:0] == 2'd3) ;
  assign fn_alu_tdata1_BIT_41_05_AND_fn_alu_memaccess_E_ETC___d128 =
	     (fn_alu_tdata1[41] && fn_alu_memaccess == 2'd0 &&
	      !fn_alu_tdata1[23] ||
	      fn_alu_tdata1[40] && fn_alu_memaccess == 2'd1) &&
	     (fn_alu_tdata1[27:24] == 4'd0 ||
	      fn_alu_tdata1[27:24] == 4'd1 && fn_alu_funct3[1:0] == 2'd0 ||
	      fn_alu_tdata1[27:24] == 4'd2 && fn_alu_funct3[1:0] == 2'd1 ||
	      fn_alu_tdata1[27:24] == 4'd3 && fn_alu_funct3[1:0] == 2'd2 ||
	      fn_alu_tdata1[27:24] == 4'd5 && fn_alu_funct3[1:0] == 2'd3) ;
  assign fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146 =
	     fn_alu_tdata2[127:64] == _theResult____h3137 ||
	     !fn_alu_tdata1[10] &&
	     fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144 ;
  assign fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70 =
	     fn_alu_tdata2[63:0] == _theResult____h1592 ;
  assign fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144 =
	     fn_alu_tenable[0] && fn_alu_tdata1[21:20] == 2'd0 &&
	     fn_alu_tdata1_BIT_19_AND_fn_alu_memaccess_EQ_0_ETC___d92 &&
	     IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100 ;
  assign fn_alu_tenable_BIT_1_AND_NOT_fn_alu_tenable_BI_ETC___d131 =
	     fn_alu_tenable[1] &&
	     (NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d75 &&
	      (!fn_alu_tenable[0] || fn_alu_tdata1[21:20] != 2'd0 ||
	       NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 ||
	       !fn_alu_tdata1[10]) ||
	      fn_alu_tenable[0] && fn_alu_tdata1[21:20] == 2'd0 &&
	      fn_alu_tdata1_BIT_19_AND_fn_alu_memaccess_EQ_0_ETC___d92 &&
	      fn_alu_tdata1[10] &&
	      IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100) &&
	     fn_alu_tdata1[43:42] == 2'd0 &&
	     fn_alu_tdata1_BIT_41_05_AND_fn_alu_memaccess_E_ETC___d128 ;
  assign inv_op2__h41 = { fn_alu_op2 ^ {64{fn_alu_fn[1]}}, fn_alu_fn[1] } ;
  assign op1_xor_op2__h42 = fn_alu_op1 ^ fn_alu_op2 ;
  assign result__h1762 = { effective_address__h58[63:1], 1'd0 } ;
  assign shift_amt__h50 =
	     { !fn_alu_word32 && fn_alu_op2[5], fn_alu_op2[4:0] } ;
  assign shift_inright__h52 = { upper_bits__h51, fn_alu_op1[31:0] } ;
  assign shift_l__h56 =
	     { fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[0],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[1],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[2],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[3],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[4],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[5],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[6],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[7],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[8],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[9],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[10],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[11],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[12],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[13],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[14],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[15],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[16],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[17],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[18],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[19],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[20],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[21],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[22],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[23],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[24],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[25],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[26],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[27],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[28],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[29],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[30],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[31],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[32],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[33],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[34],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[35],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[36],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[37],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[38],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[39],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[40],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[41],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[42],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[43],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[44],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[45],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[46],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[47],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[48],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[49],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[50],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[51],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[52],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[53],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[54],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[55],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[56],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[57],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[58],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[59],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[60],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[61],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[62],
	       fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[63] } ;
  assign sign__h45 = ~fn_alu_fn[1] ;
  assign upper_bits__h51 =
	     fn_alu_word32 ? {32{x__h11736}} : fn_alu_op1[63:32] ;
  assign x__h11736 = fn_alu_fn[3] & fn_alu_op1[31] ;
  assign x__h3765 =
	     fn_alu_word32 ? final_output___1__h3769 : final_output__h57 ;
  assign x__h3809 = { fn_alu_op1, 1'b1 } + inv_op2__h41 ;
  always@(fn_alu_fn or fn_alu_op1 or upper_bits__h51 or shift_inright__h52)
  begin
    case (fn_alu_fn)
      4'd5, 4'd11: shin__h53 = shift_inright__h52;
      default: shin__h53 =
		   { fn_alu_op1[0],
		     fn_alu_op1[1],
		     fn_alu_op1[2],
		     fn_alu_op1[3],
		     fn_alu_op1[4],
		     fn_alu_op1[5],
		     fn_alu_op1[6],
		     fn_alu_op1[7],
		     fn_alu_op1[8],
		     fn_alu_op1[9],
		     fn_alu_op1[10],
		     fn_alu_op1[11],
		     fn_alu_op1[12],
		     fn_alu_op1[13],
		     fn_alu_op1[14],
		     fn_alu_op1[15],
		     fn_alu_op1[16],
		     fn_alu_op1[17],
		     fn_alu_op1[18],
		     fn_alu_op1[19],
		     fn_alu_op1[20],
		     fn_alu_op1[21],
		     fn_alu_op1[22],
		     fn_alu_op1[23],
		     fn_alu_op1[24],
		     fn_alu_op1[25],
		     fn_alu_op1[26],
		     fn_alu_op1[27],
		     fn_alu_op1[28],
		     fn_alu_op1[29],
		     fn_alu_op1[30],
		     fn_alu_op1[31],
		     upper_bits__h51[0],
		     upper_bits__h51[1],
		     upper_bits__h51[2],
		     upper_bits__h51[3],
		     upper_bits__h51[4],
		     upper_bits__h51[5],
		     upper_bits__h51[6],
		     upper_bits__h51[7],
		     upper_bits__h51[8],
		     upper_bits__h51[9],
		     upper_bits__h51[10],
		     upper_bits__h51[11],
		     upper_bits__h51[12],
		     upper_bits__h51[13],
		     upper_bits__h51[14],
		     upper_bits__h51[15],
		     upper_bits__h51[16],
		     upper_bits__h51[17],
		     upper_bits__h51[18],
		     upper_bits__h51[19],
		     upper_bits__h51[20],
		     upper_bits__h51[21],
		     upper_bits__h51[22],
		     upper_bits__h51[23],
		     upper_bits__h51[24],
		     upper_bits__h51[25],
		     upper_bits__h51[26],
		     upper_bits__h51[27],
		     upper_bits__h51[28],
		     upper_bits__h51[29],
		     upper_bits__h51[30],
		     upper_bits__h51[31] };
    endcase
  end
  always@(fn_alu_tdata1 or
	  fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70 or
	  IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65)
  begin
    case (fn_alu_tdata1[14:11])
      4'd2:
	  CASE_fn_alu_tdata1_BITS_14_TO_11_2_IF_IF_fn_al_ETC__q1 =
	      IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65;
      4'd3:
	  CASE_fn_alu_tdata1_BITS_14_TO_11_2_IF_IF_fn_al_ETC__q1 =
	      !IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65;
      default: CASE_fn_alu_tdata1_BITS_14_TO_11_2_IF_IF_fn_al_ETC__q1 =
		   fn_alu_tdata1[14:11] != 4'd0 ||
		   !fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70;
    endcase
  end
  always@(fn_alu_tdata1 or
	  fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70 or
	  IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65 or
	  IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d99)
  begin
    case (fn_alu_tdata1[14:11])
      4'd2:
	  IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100 =
	      !IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d65;
      4'd3:
	  IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100 =
	      IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_NO_ETC___d99;
      default: IF_IF_fn_alu_tdata1_BITS_21_TO_20_EQ_0_THEN_fn_ETC___d100 =
		   fn_alu_tdata1[14:11] == 4'd0 &&
		   fn_alu_tdata2_BITS_63_TO_0_4_EQ_IF_IF_fn_alu_t_ETC___d70;
    endcase
  end
  always@(fn_alu_tdata1 or
	  fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144 or
	  fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146 or
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 or
	  NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148)
  begin
    case (fn_alu_tdata1[36:33])
      4'd0:
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150 =
	      fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146;
      4'd2:
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150 =
	      !IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 ||
	      NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148;
      default: IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150 =
		   fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144;
    endcase
  end
  always@(fn_alu_fn or
	  INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196 or
	  adder_z_flag__h44 or op1_xor_op2__h42)
  begin
    case (fn_alu_fn)
      4'd2:
	  CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2 =
	      adder_z_flag__h44;
      4'd3:
	  CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2 =
	      op1_xor_op2__h42 != 64'd0;
      4'd12, 4'd14:
	  CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2 =
	      INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196;
      default: CASE_fn_alu_fn_2_adder_z_flag4_3_NOT_op1_xor_o_ETC__q2 =
		   !INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196;
    endcase
  end
  always@(fn_alu_tdata1 or
	  fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144 or
	  fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146 or
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 or
	  NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148 or
	  fn_alu_tenable or
	  NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 or
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150)
  begin
    case (fn_alu_tdata1[36:33])
      4'd0:
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153 =
	      fn_alu_tdata2_BITS_127_TO_64_37_EQ_IF_IF_fn_al_ETC___d146;
      4'd2:
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153 =
	      !IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 ||
	      NOT_fn_alu_tenable_BIT_0_OR_NOT_fn_alu_tdata1__ETC___d148;
      4'd3:
	  IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153 =
	      IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d138 ||
	      (!fn_alu_tenable[0] || fn_alu_tdata1[21:20] != 2'd0 ||
	       NOT_fn_alu_tdata1_BIT_19_OR_NOT_fn_alu_memacce_ETC___d50 ||
	       !fn_alu_tdata1[10]) &&
	      IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d150;
      default: IF_IF_fn_alu_tdata1_BITS_43_TO_42_03_EQ_0_04_T_ETC___d153 =
		   fn_alu_tenable_BIT_0_AND_fn_alu_tdata1_BITS_21_ETC___d144;
    endcase
  end
  always@(fn_alu_fn or
	  op1_xor_op2__h42 or
	  x__h3809 or
	  shift_l__h56 or
	  fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377 or
	  fn_alu_op1 or
	  fn_alu_op2 or
	  INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196)
  begin
    case (fn_alu_fn)
      4'd0, 4'd10: final_output__h57 = x__h3809[64:1];
      4'd1: final_output__h57 = shift_l__h56;
      4'd5, 4'd11:
	  final_output__h57 =
	      fn_alu_fn_BIT_3_65_AND_IF_fn_alu_fn_EQ_5_62_OR_ETC___d377[63:0];
      4'd6: final_output__h57 = fn_alu_op1 | fn_alu_op2;
      4'd7: final_output__h57 = fn_alu_op1 & fn_alu_op2;
      4'd12, 4'd13, 4'd14, 4'd15:
	  final_output__h57 =
	      { 63'd0,
		INV_fn_alu_fn_BIT_1_88_89_AND_fn_alu_op1_BIT_6_ETC___d196 };
      default: final_output__h57 = op1_xor_op2__h42;
    endcase
  end
  always@(fn_alu_inst_type)
  begin
    case (fn_alu_inst_type)
      4'd1: CASE_fn_alu_inst_type_1_0_5_1_2__q5 = 2'd0;
      4'd5: CASE_fn_alu_inst_type_1_0_5_1_2__q5 = 2'd1;
      default: CASE_fn_alu_inst_type_1_0_5_1_2__q5 = 2'd2;
    endcase
  end
endmodule  // module_fn_alu

